
car.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004080  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  080041bc  080041bc  000141bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080043ac  080043ac  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  080043ac  080043ac  000143ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080043b4  080043b4  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080043b4  080043b4  000143b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080043b8  080043b8  000143b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080043bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000244  20000068  08004424  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002ac  08004424  000202ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008350  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b54  00000000  00000000  00028424  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007b0  00000000  00000000  00029f78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005c5  00000000  00000000  0002a728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000168ae  00000000  00000000  0002aced  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000aa7d  00000000  00000000  0004159b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008644a  00000000  00000000  0004c018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002808  00000000  00000000  000d2464  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000d4c6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000068 	.word	0x20000068
 8000158:	00000000 	.word	0x00000000
 800015c:	080041a4 	.word	0x080041a4

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	2000006c 	.word	0x2000006c
 8000178:	080041a4 	.word	0x080041a4

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <__aeabi_uldivmod>:
 800018c:	b953      	cbnz	r3, 80001a4 <__aeabi_uldivmod+0x18>
 800018e:	b94a      	cbnz	r2, 80001a4 <__aeabi_uldivmod+0x18>
 8000190:	2900      	cmp	r1, #0
 8000192:	bf08      	it	eq
 8000194:	2800      	cmpeq	r0, #0
 8000196:	bf1c      	itt	ne
 8000198:	f04f 31ff 	movne.w	r1, #4294967295
 800019c:	f04f 30ff 	movne.w	r0, #4294967295
 80001a0:	f000 b972 	b.w	8000488 <__aeabi_idiv0>
 80001a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ac:	f000 f806 	bl	80001bc <__udivmoddi4>
 80001b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001b8:	b004      	add	sp, #16
 80001ba:	4770      	bx	lr

080001bc <__udivmoddi4>:
 80001bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001c0:	9e08      	ldr	r6, [sp, #32]
 80001c2:	460d      	mov	r5, r1
 80001c4:	4604      	mov	r4, r0
 80001c6:	468e      	mov	lr, r1
 80001c8:	2b00      	cmp	r3, #0
 80001ca:	d14c      	bne.n	8000266 <__udivmoddi4+0xaa>
 80001cc:	428a      	cmp	r2, r1
 80001ce:	4694      	mov	ip, r2
 80001d0:	d967      	bls.n	80002a2 <__udivmoddi4+0xe6>
 80001d2:	fab2 f382 	clz	r3, r2
 80001d6:	b153      	cbz	r3, 80001ee <__udivmoddi4+0x32>
 80001d8:	fa02 fc03 	lsl.w	ip, r2, r3
 80001dc:	f1c3 0220 	rsb	r2, r3, #32
 80001e0:	fa01 fe03 	lsl.w	lr, r1, r3
 80001e4:	fa20 f202 	lsr.w	r2, r0, r2
 80001e8:	ea42 0e0e 	orr.w	lr, r2, lr
 80001ec:	409c      	lsls	r4, r3
 80001ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80001f2:	fbbe f1f7 	udiv	r1, lr, r7
 80001f6:	fa1f f58c 	uxth.w	r5, ip
 80001fa:	fb07 ee11 	mls	lr, r7, r1, lr
 80001fe:	fb01 f005 	mul.w	r0, r1, r5
 8000202:	0c22      	lsrs	r2, r4, #16
 8000204:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 8000208:	4290      	cmp	r0, r2
 800020a:	d90a      	bls.n	8000222 <__udivmoddi4+0x66>
 800020c:	eb1c 0202 	adds.w	r2, ip, r2
 8000210:	f101 3eff 	add.w	lr, r1, #4294967295
 8000214:	f080 8119 	bcs.w	800044a <__udivmoddi4+0x28e>
 8000218:	4290      	cmp	r0, r2
 800021a:	f240 8116 	bls.w	800044a <__udivmoddi4+0x28e>
 800021e:	3902      	subs	r1, #2
 8000220:	4462      	add	r2, ip
 8000222:	1a12      	subs	r2, r2, r0
 8000224:	fbb2 f0f7 	udiv	r0, r2, r7
 8000228:	fb07 2210 	mls	r2, r7, r0, r2
 800022c:	fb00 f505 	mul.w	r5, r0, r5
 8000230:	b2a4      	uxth	r4, r4
 8000232:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000236:	42a5      	cmp	r5, r4
 8000238:	d90a      	bls.n	8000250 <__udivmoddi4+0x94>
 800023a:	eb1c 0404 	adds.w	r4, ip, r4
 800023e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000242:	f080 8104 	bcs.w	800044e <__udivmoddi4+0x292>
 8000246:	42a5      	cmp	r5, r4
 8000248:	f240 8101 	bls.w	800044e <__udivmoddi4+0x292>
 800024c:	4464      	add	r4, ip
 800024e:	3802      	subs	r0, #2
 8000250:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000254:	2100      	movs	r1, #0
 8000256:	1b64      	subs	r4, r4, r5
 8000258:	b11e      	cbz	r6, 8000262 <__udivmoddi4+0xa6>
 800025a:	40dc      	lsrs	r4, r3
 800025c:	2300      	movs	r3, #0
 800025e:	e9c6 4300 	strd	r4, r3, [r6]
 8000262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000266:	428b      	cmp	r3, r1
 8000268:	d908      	bls.n	800027c <__udivmoddi4+0xc0>
 800026a:	2e00      	cmp	r6, #0
 800026c:	f000 80ea 	beq.w	8000444 <__udivmoddi4+0x288>
 8000270:	2100      	movs	r1, #0
 8000272:	e9c6 0500 	strd	r0, r5, [r6]
 8000276:	4608      	mov	r0, r1
 8000278:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800027c:	fab3 f183 	clz	r1, r3
 8000280:	2900      	cmp	r1, #0
 8000282:	d148      	bne.n	8000316 <__udivmoddi4+0x15a>
 8000284:	42ab      	cmp	r3, r5
 8000286:	d302      	bcc.n	800028e <__udivmoddi4+0xd2>
 8000288:	4282      	cmp	r2, r0
 800028a:	f200 80f8 	bhi.w	800047e <__udivmoddi4+0x2c2>
 800028e:	1a84      	subs	r4, r0, r2
 8000290:	eb65 0203 	sbc.w	r2, r5, r3
 8000294:	2001      	movs	r0, #1
 8000296:	4696      	mov	lr, r2
 8000298:	2e00      	cmp	r6, #0
 800029a:	d0e2      	beq.n	8000262 <__udivmoddi4+0xa6>
 800029c:	e9c6 4e00 	strd	r4, lr, [r6]
 80002a0:	e7df      	b.n	8000262 <__udivmoddi4+0xa6>
 80002a2:	b902      	cbnz	r2, 80002a6 <__udivmoddi4+0xea>
 80002a4:	deff      	udf	#255	; 0xff
 80002a6:	fab2 f382 	clz	r3, r2
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 808e 	bne.w	80003cc <__udivmoddi4+0x210>
 80002b0:	1a88      	subs	r0, r1, r2
 80002b2:	2101      	movs	r1, #1
 80002b4:	0c17      	lsrs	r7, r2, #16
 80002b6:	fa1f fe82 	uxth.w	lr, r2
 80002ba:	fbb0 f5f7 	udiv	r5, r0, r7
 80002be:	fb07 0015 	mls	r0, r7, r5, r0
 80002c2:	0c22      	lsrs	r2, r4, #16
 80002c4:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80002c8:	fb0e f005 	mul.w	r0, lr, r5
 80002cc:	4290      	cmp	r0, r2
 80002ce:	d908      	bls.n	80002e2 <__udivmoddi4+0x126>
 80002d0:	eb1c 0202 	adds.w	r2, ip, r2
 80002d4:	f105 38ff 	add.w	r8, r5, #4294967295
 80002d8:	d202      	bcs.n	80002e0 <__udivmoddi4+0x124>
 80002da:	4290      	cmp	r0, r2
 80002dc:	f200 80cc 	bhi.w	8000478 <__udivmoddi4+0x2bc>
 80002e0:	4645      	mov	r5, r8
 80002e2:	1a12      	subs	r2, r2, r0
 80002e4:	fbb2 f0f7 	udiv	r0, r2, r7
 80002e8:	fb07 2210 	mls	r2, r7, r0, r2
 80002ec:	fb0e fe00 	mul.w	lr, lr, r0
 80002f0:	b2a4      	uxth	r4, r4
 80002f2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002f6:	45a6      	cmp	lr, r4
 80002f8:	d908      	bls.n	800030c <__udivmoddi4+0x150>
 80002fa:	eb1c 0404 	adds.w	r4, ip, r4
 80002fe:	f100 32ff 	add.w	r2, r0, #4294967295
 8000302:	d202      	bcs.n	800030a <__udivmoddi4+0x14e>
 8000304:	45a6      	cmp	lr, r4
 8000306:	f200 80b4 	bhi.w	8000472 <__udivmoddi4+0x2b6>
 800030a:	4610      	mov	r0, r2
 800030c:	eba4 040e 	sub.w	r4, r4, lr
 8000310:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000314:	e7a0      	b.n	8000258 <__udivmoddi4+0x9c>
 8000316:	f1c1 0720 	rsb	r7, r1, #32
 800031a:	408b      	lsls	r3, r1
 800031c:	fa22 fc07 	lsr.w	ip, r2, r7
 8000320:	ea4c 0c03 	orr.w	ip, ip, r3
 8000324:	fa25 fa07 	lsr.w	sl, r5, r7
 8000328:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800032c:	fbba f8f9 	udiv	r8, sl, r9
 8000330:	408d      	lsls	r5, r1
 8000332:	fa20 f307 	lsr.w	r3, r0, r7
 8000336:	fb09 aa18 	mls	sl, r9, r8, sl
 800033a:	fa1f fe8c 	uxth.w	lr, ip
 800033e:	432b      	orrs	r3, r5
 8000340:	fa00 f501 	lsl.w	r5, r0, r1
 8000344:	fb08 f00e 	mul.w	r0, r8, lr
 8000348:	0c1c      	lsrs	r4, r3, #16
 800034a:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800034e:	42a0      	cmp	r0, r4
 8000350:	fa02 f201 	lsl.w	r2, r2, r1
 8000354:	d90b      	bls.n	800036e <__udivmoddi4+0x1b2>
 8000356:	eb1c 0404 	adds.w	r4, ip, r4
 800035a:	f108 3aff 	add.w	sl, r8, #4294967295
 800035e:	f080 8086 	bcs.w	800046e <__udivmoddi4+0x2b2>
 8000362:	42a0      	cmp	r0, r4
 8000364:	f240 8083 	bls.w	800046e <__udivmoddi4+0x2b2>
 8000368:	f1a8 0802 	sub.w	r8, r8, #2
 800036c:	4464      	add	r4, ip
 800036e:	1a24      	subs	r4, r4, r0
 8000370:	b298      	uxth	r0, r3
 8000372:	fbb4 f3f9 	udiv	r3, r4, r9
 8000376:	fb09 4413 	mls	r4, r9, r3, r4
 800037a:	fb03 fe0e 	mul.w	lr, r3, lr
 800037e:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8000382:	45a6      	cmp	lr, r4
 8000384:	d908      	bls.n	8000398 <__udivmoddi4+0x1dc>
 8000386:	eb1c 0404 	adds.w	r4, ip, r4
 800038a:	f103 30ff 	add.w	r0, r3, #4294967295
 800038e:	d26a      	bcs.n	8000466 <__udivmoddi4+0x2aa>
 8000390:	45a6      	cmp	lr, r4
 8000392:	d968      	bls.n	8000466 <__udivmoddi4+0x2aa>
 8000394:	3b02      	subs	r3, #2
 8000396:	4464      	add	r4, ip
 8000398:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 800039c:	fba0 9302 	umull	r9, r3, r0, r2
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	429c      	cmp	r4, r3
 80003a6:	46c8      	mov	r8, r9
 80003a8:	469e      	mov	lr, r3
 80003aa:	d354      	bcc.n	8000456 <__udivmoddi4+0x29a>
 80003ac:	d051      	beq.n	8000452 <__udivmoddi4+0x296>
 80003ae:	2e00      	cmp	r6, #0
 80003b0:	d067      	beq.n	8000482 <__udivmoddi4+0x2c6>
 80003b2:	ebb5 0308 	subs.w	r3, r5, r8
 80003b6:	eb64 040e 	sbc.w	r4, r4, lr
 80003ba:	40cb      	lsrs	r3, r1
 80003bc:	fa04 f707 	lsl.w	r7, r4, r7
 80003c0:	431f      	orrs	r7, r3
 80003c2:	40cc      	lsrs	r4, r1
 80003c4:	e9c6 7400 	strd	r7, r4, [r6]
 80003c8:	2100      	movs	r1, #0
 80003ca:	e74a      	b.n	8000262 <__udivmoddi4+0xa6>
 80003cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003d0:	f1c3 0020 	rsb	r0, r3, #32
 80003d4:	40c1      	lsrs	r1, r0
 80003d6:	409d      	lsls	r5, r3
 80003d8:	fa24 f000 	lsr.w	r0, r4, r0
 80003dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e0:	4328      	orrs	r0, r5
 80003e2:	fbb1 f5f7 	udiv	r5, r1, r7
 80003e6:	fb07 1115 	mls	r1, r7, r5, r1
 80003ea:	fa1f fe8c 	uxth.w	lr, ip
 80003ee:	0c02      	lsrs	r2, r0, #16
 80003f0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80003f4:	fb05 f10e 	mul.w	r1, r5, lr
 80003f8:	4291      	cmp	r1, r2
 80003fa:	fa04 f403 	lsl.w	r4, r4, r3
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x256>
 8000400:	eb1c 0202 	adds.w	r2, ip, r2
 8000404:	f105 38ff 	add.w	r8, r5, #4294967295
 8000408:	d22f      	bcs.n	800046a <__udivmoddi4+0x2ae>
 800040a:	4291      	cmp	r1, r2
 800040c:	d92d      	bls.n	800046a <__udivmoddi4+0x2ae>
 800040e:	3d02      	subs	r5, #2
 8000410:	4462      	add	r2, ip
 8000412:	1a52      	subs	r2, r2, r1
 8000414:	fbb2 f1f7 	udiv	r1, r2, r7
 8000418:	fb07 2211 	mls	r2, r7, r1, r2
 800041c:	b280      	uxth	r0, r0
 800041e:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8000422:	fb01 f20e 	mul.w	r2, r1, lr
 8000426:	4282      	cmp	r2, r0
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x280>
 800042a:	eb1c 0000 	adds.w	r0, ip, r0
 800042e:	f101 38ff 	add.w	r8, r1, #4294967295
 8000432:	d216      	bcs.n	8000462 <__udivmoddi4+0x2a6>
 8000434:	4282      	cmp	r2, r0
 8000436:	d914      	bls.n	8000462 <__udivmoddi4+0x2a6>
 8000438:	3902      	subs	r1, #2
 800043a:	4460      	add	r0, ip
 800043c:	1a80      	subs	r0, r0, r2
 800043e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000442:	e73a      	b.n	80002ba <__udivmoddi4+0xfe>
 8000444:	4631      	mov	r1, r6
 8000446:	4630      	mov	r0, r6
 8000448:	e70b      	b.n	8000262 <__udivmoddi4+0xa6>
 800044a:	4671      	mov	r1, lr
 800044c:	e6e9      	b.n	8000222 <__udivmoddi4+0x66>
 800044e:	4610      	mov	r0, r2
 8000450:	e6fe      	b.n	8000250 <__udivmoddi4+0x94>
 8000452:	454d      	cmp	r5, r9
 8000454:	d2ab      	bcs.n	80003ae <__udivmoddi4+0x1f2>
 8000456:	ebb9 0802 	subs.w	r8, r9, r2
 800045a:	eb63 0e0c 	sbc.w	lr, r3, ip
 800045e:	3801      	subs	r0, #1
 8000460:	e7a5      	b.n	80003ae <__udivmoddi4+0x1f2>
 8000462:	4641      	mov	r1, r8
 8000464:	e7ea      	b.n	800043c <__udivmoddi4+0x280>
 8000466:	4603      	mov	r3, r0
 8000468:	e796      	b.n	8000398 <__udivmoddi4+0x1dc>
 800046a:	4645      	mov	r5, r8
 800046c:	e7d1      	b.n	8000412 <__udivmoddi4+0x256>
 800046e:	46d0      	mov	r8, sl
 8000470:	e77d      	b.n	800036e <__udivmoddi4+0x1b2>
 8000472:	4464      	add	r4, ip
 8000474:	3802      	subs	r0, #2
 8000476:	e749      	b.n	800030c <__udivmoddi4+0x150>
 8000478:	3d02      	subs	r5, #2
 800047a:	4462      	add	r2, ip
 800047c:	e731      	b.n	80002e2 <__udivmoddi4+0x126>
 800047e:	4608      	mov	r0, r1
 8000480:	e70a      	b.n	8000298 <__udivmoddi4+0xdc>
 8000482:	4631      	mov	r1, r6
 8000484:	e6ed      	b.n	8000262 <__udivmoddi4+0xa6>
 8000486:	bf00      	nop

08000488 <__aeabi_idiv0>:
 8000488:	4770      	bx	lr
 800048a:	bf00      	nop

0800048c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b08a      	sub	sp, #40	; 0x28
 8000490:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000492:	f107 0314 	add.w	r3, r7, #20
 8000496:	2200      	movs	r2, #0
 8000498:	601a      	str	r2, [r3, #0]
 800049a:	605a      	str	r2, [r3, #4]
 800049c:	609a      	str	r2, [r3, #8]
 800049e:	60da      	str	r2, [r3, #12]
 80004a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004a2:	4b2a      	ldr	r3, [pc, #168]	; (800054c <MX_GPIO_Init+0xc0>)
 80004a4:	69db      	ldr	r3, [r3, #28]
 80004a6:	4a29      	ldr	r2, [pc, #164]	; (800054c <MX_GPIO_Init+0xc0>)
 80004a8:	f043 0304 	orr.w	r3, r3, #4
 80004ac:	61d3      	str	r3, [r2, #28]
 80004ae:	4b27      	ldr	r3, [pc, #156]	; (800054c <MX_GPIO_Init+0xc0>)
 80004b0:	69db      	ldr	r3, [r3, #28]
 80004b2:	f003 0304 	and.w	r3, r3, #4
 80004b6:	613b      	str	r3, [r7, #16]
 80004b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004ba:	4b24      	ldr	r3, [pc, #144]	; (800054c <MX_GPIO_Init+0xc0>)
 80004bc:	69db      	ldr	r3, [r3, #28]
 80004be:	4a23      	ldr	r2, [pc, #140]	; (800054c <MX_GPIO_Init+0xc0>)
 80004c0:	f043 0320 	orr.w	r3, r3, #32
 80004c4:	61d3      	str	r3, [r2, #28]
 80004c6:	4b21      	ldr	r3, [pc, #132]	; (800054c <MX_GPIO_Init+0xc0>)
 80004c8:	69db      	ldr	r3, [r3, #28]
 80004ca:	f003 0320 	and.w	r3, r3, #32
 80004ce:	60fb      	str	r3, [r7, #12]
 80004d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004d2:	4b1e      	ldr	r3, [pc, #120]	; (800054c <MX_GPIO_Init+0xc0>)
 80004d4:	69db      	ldr	r3, [r3, #28]
 80004d6:	4a1d      	ldr	r2, [pc, #116]	; (800054c <MX_GPIO_Init+0xc0>)
 80004d8:	f043 0301 	orr.w	r3, r3, #1
 80004dc:	61d3      	str	r3, [r2, #28]
 80004de:	4b1b      	ldr	r3, [pc, #108]	; (800054c <MX_GPIO_Init+0xc0>)
 80004e0:	69db      	ldr	r3, [r3, #28]
 80004e2:	f003 0301 	and.w	r3, r3, #1
 80004e6:	60bb      	str	r3, [r7, #8]
 80004e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004ea:	4b18      	ldr	r3, [pc, #96]	; (800054c <MX_GPIO_Init+0xc0>)
 80004ec:	69db      	ldr	r3, [r3, #28]
 80004ee:	4a17      	ldr	r2, [pc, #92]	; (800054c <MX_GPIO_Init+0xc0>)
 80004f0:	f043 0302 	orr.w	r3, r3, #2
 80004f4:	61d3      	str	r3, [r2, #28]
 80004f6:	4b15      	ldr	r3, [pc, #84]	; (800054c <MX_GPIO_Init+0xc0>)
 80004f8:	69db      	ldr	r3, [r3, #28]
 80004fa:	f003 0302 	and.w	r3, r3, #2
 80004fe:	607b      	str	r3, [r7, #4]
 8000500:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000502:	2200      	movs	r2, #0
 8000504:	2120      	movs	r1, #32
 8000506:	4812      	ldr	r0, [pc, #72]	; (8000550 <MX_GPIO_Init+0xc4>)
 8000508:	f000 fe12 	bl	8001130 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800050c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000510:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000512:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000516:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000518:	2300      	movs	r3, #0
 800051a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800051c:	f107 0314 	add.w	r3, r7, #20
 8000520:	4619      	mov	r1, r3
 8000522:	480c      	ldr	r0, [pc, #48]	; (8000554 <MX_GPIO_Init+0xc8>)
 8000524:	f000 fc74 	bl	8000e10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000528:	2320      	movs	r3, #32
 800052a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800052c:	2301      	movs	r3, #1
 800052e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000530:	2300      	movs	r3, #0
 8000532:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000534:	2300      	movs	r3, #0
 8000536:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000538:	f107 0314 	add.w	r3, r7, #20
 800053c:	4619      	mov	r1, r3
 800053e:	4804      	ldr	r0, [pc, #16]	; (8000550 <MX_GPIO_Init+0xc4>)
 8000540:	f000 fc66 	bl	8000e10 <HAL_GPIO_Init>

}
 8000544:	bf00      	nop
 8000546:	3728      	adds	r7, #40	; 0x28
 8000548:	46bd      	mov	sp, r7
 800054a:	bd80      	pop	{r7, pc}
 800054c:	40023800 	.word	0x40023800
 8000550:	40020000 	.word	0x40020000
 8000554:	40020800 	.word	0x40020800

08000558 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800055c:	f000 fa5d 	bl	8000a1a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000560:	f000 f80e 	bl	8000580 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000564:	f7ff ff92 	bl	800048c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000568:	f000 f9bc 	bl	80008e4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, (uint8_t *)rx_buffer, sizeof(rx_buffer));
 800056c:	2264      	movs	r2, #100	; 0x64
 800056e:	4902      	ldr	r1, [pc, #8]	; (8000578 <main+0x20>)
 8000570:	4802      	ldr	r0, [pc, #8]	; (800057c <main+0x24>)
 8000572:	f001 fc55 	bl	8001e20 <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000576:	e7fe      	b.n	8000576 <main+0x1e>
 8000578:	20000088 	.word	0x20000088
 800057c:	20000114 	.word	0x20000114

08000580 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b092      	sub	sp, #72	; 0x48
 8000584:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000586:	f107 0314 	add.w	r3, r7, #20
 800058a:	2234      	movs	r2, #52	; 0x34
 800058c:	2100      	movs	r1, #0
 800058e:	4618      	mov	r0, r3
 8000590:	f002 fb17 	bl	8002bc2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000594:	463b      	mov	r3, r7
 8000596:	2200      	movs	r2, #0
 8000598:	601a      	str	r2, [r3, #0]
 800059a:	605a      	str	r2, [r3, #4]
 800059c:	609a      	str	r2, [r3, #8]
 800059e:	60da      	str	r2, [r3, #12]
 80005a0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005a2:	4b1d      	ldr	r3, [pc, #116]	; (8000618 <SystemClock_Config+0x98>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80005aa:	4a1b      	ldr	r2, [pc, #108]	; (8000618 <SystemClock_Config+0x98>)
 80005ac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80005b0:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005b2:	2302      	movs	r3, #2
 80005b4:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005b6:	2301      	movs	r3, #1
 80005b8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005ba:	2310      	movs	r3, #16
 80005bc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005be:	2302      	movs	r3, #2
 80005c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005c2:	2300      	movs	r3, #0
 80005c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80005c6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80005ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 80005cc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80005d0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d2:	f107 0314 	add.w	r3, r7, #20
 80005d6:	4618      	mov	r0, r3
 80005d8:	f000 fddc 	bl	8001194 <HAL_RCC_OscConfig>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80005e2:	f000 f847 	bl	8000674 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e6:	230f      	movs	r3, #15
 80005e8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ea:	2303      	movs	r3, #3
 80005ec:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ee:	2300      	movs	r3, #0
 80005f0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005f2:	2300      	movs	r3, #0
 80005f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005f6:	2300      	movs	r3, #0
 80005f8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005fa:	463b      	mov	r3, r7
 80005fc:	2101      	movs	r1, #1
 80005fe:	4618      	mov	r0, r3
 8000600:	f001 f8f8 	bl	80017f4 <HAL_RCC_ClockConfig>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800060a:	f000 f833 	bl	8000674 <Error_Handler>
  }
}
 800060e:	bf00      	nop
 8000610:	3748      	adds	r7, #72	; 0x48
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	40007000 	.word	0x40007000

0800061c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2)
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a0d      	ldr	r2, [pc, #52]	; (8000660 <HAL_UART_RxCpltCallback+0x44>)
 800062a:	4293      	cmp	r3, r2
 800062c:	d114      	bne.n	8000658 <HAL_UART_RxCpltCallback+0x3c>
		{
		  HAL_UART_Receive_IT(&huart2, (uint8_t *)rx_buffer, sizeof(rx_buffer));
 800062e:	2264      	movs	r2, #100	; 0x64
 8000630:	490c      	ldr	r1, [pc, #48]	; (8000664 <HAL_UART_RxCpltCallback+0x48>)
 8000632:	480d      	ldr	r0, [pc, #52]	; (8000668 <HAL_UART_RxCpltCallback+0x4c>)
 8000634:	f001 fbf4 	bl	8001e20 <HAL_UART_Receive_IT>

			parse_data(rx_buffer);
 8000638:	480a      	ldr	r0, [pc, #40]	; (8000664 <HAL_UART_RxCpltCallback+0x48>)
 800063a:	f000 f821 	bl	8000680 <parse_data>
			HAL_UART_Receive_IT(&huart2, (uint8_t *)rx_buffer, sizeof(rx_buffer));
 800063e:	2264      	movs	r2, #100	; 0x64
 8000640:	4908      	ldr	r1, [pc, #32]	; (8000664 <HAL_UART_RxCpltCallback+0x48>)
 8000642:	4809      	ldr	r0, [pc, #36]	; (8000668 <HAL_UART_RxCpltCallback+0x4c>)
 8000644:	f001 fbec 	bl	8001e20 <HAL_UART_Receive_IT>

			if(znak== 'e')
 8000648:	4b08      	ldr	r3, [pc, #32]	; (800066c <HAL_UART_RxCpltCallback+0x50>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	2b65      	cmp	r3, #101	; 0x65
 800064e:	d103      	bne.n	8000658 <HAL_UART_RxCpltCallback+0x3c>
			{
				HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000650:	2120      	movs	r1, #32
 8000652:	4807      	ldr	r0, [pc, #28]	; (8000670 <HAL_UART_RxCpltCallback+0x54>)
 8000654:	f000 fd84 	bl	8001160 <HAL_GPIO_TogglePin>
			}

		}

}
 8000658:	bf00      	nop
 800065a:	3708      	adds	r7, #8
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	40004400 	.word	0x40004400
 8000664:	20000088 	.word	0x20000088
 8000668:	20000114 	.word	0x20000114
 800066c:	20000084 	.word	0x20000084
 8000670:	40020000 	.word	0x40020000

08000674 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000678:	b672      	cpsid	i
}
 800067a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800067c:	e7fe      	b.n	800067c <Error_Handler+0x8>
	...

08000680 <parse_data>:
char parsed_direction[10];
char parsed_turn[10];


void parse_data(char *data)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b084      	sub	sp, #16
 8000684:	af02      	add	r7, sp, #8
 8000686:	6078      	str	r0, [r7, #4]
  sscanf(data, "Velocity=%[^,], Direction=%[^,], Turn=%s", parsed_velocity, parsed_direction, parsed_turn);
 8000688:	4b0b      	ldr	r3, [pc, #44]	; (80006b8 <parse_data+0x38>)
 800068a:	9300      	str	r3, [sp, #0]
 800068c:	4b0b      	ldr	r3, [pc, #44]	; (80006bc <parse_data+0x3c>)
 800068e:	4a0c      	ldr	r2, [pc, #48]	; (80006c0 <parse_data+0x40>)
 8000690:	490c      	ldr	r1, [pc, #48]	; (80006c4 <parse_data+0x44>)
 8000692:	6878      	ldr	r0, [r7, #4]
 8000694:	f002 fa26 	bl	8002ae4 <siscanf>
  printf("Parsed Velocity: %s\n", parsed_velocity);
 8000698:	4909      	ldr	r1, [pc, #36]	; (80006c0 <parse_data+0x40>)
 800069a:	480b      	ldr	r0, [pc, #44]	; (80006c8 <parse_data+0x48>)
 800069c:	f002 fa10 	bl	8002ac0 <iprintf>
  printf("Parsed Direction: %s\n", parsed_direction);
 80006a0:	4906      	ldr	r1, [pc, #24]	; (80006bc <parse_data+0x3c>)
 80006a2:	480a      	ldr	r0, [pc, #40]	; (80006cc <parse_data+0x4c>)
 80006a4:	f002 fa0c 	bl	8002ac0 <iprintf>
  printf("Parsed Turn: %s\n", parsed_turn);
 80006a8:	4903      	ldr	r1, [pc, #12]	; (80006b8 <parse_data+0x38>)
 80006aa:	4809      	ldr	r0, [pc, #36]	; (80006d0 <parse_data+0x50>)
 80006ac:	f002 fa08 	bl	8002ac0 <iprintf>
}
 80006b0:	bf00      	nop
 80006b2:	3708      	adds	r7, #8
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	20000104 	.word	0x20000104
 80006bc:	200000f8 	.word	0x200000f8
 80006c0:	200000ec 	.word	0x200000ec
 80006c4:	080041bc 	.word	0x080041bc
 80006c8:	080041e8 	.word	0x080041e8
 80006cc:	08004200 	.word	0x08004200
 80006d0:	08004218 	.word	0x08004218

080006d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b084      	sub	sp, #16
 80006d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 80006da:	4b15      	ldr	r3, [pc, #84]	; (8000730 <HAL_MspInit+0x5c>)
 80006dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006de:	4a14      	ldr	r2, [pc, #80]	; (8000730 <HAL_MspInit+0x5c>)
 80006e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80006e4:	6253      	str	r3, [r2, #36]	; 0x24
 80006e6:	4b12      	ldr	r3, [pc, #72]	; (8000730 <HAL_MspInit+0x5c>)
 80006e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80006ee:	60fb      	str	r3, [r7, #12]
 80006f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006f2:	4b0f      	ldr	r3, [pc, #60]	; (8000730 <HAL_MspInit+0x5c>)
 80006f4:	6a1b      	ldr	r3, [r3, #32]
 80006f6:	4a0e      	ldr	r2, [pc, #56]	; (8000730 <HAL_MspInit+0x5c>)
 80006f8:	f043 0301 	orr.w	r3, r3, #1
 80006fc:	6213      	str	r3, [r2, #32]
 80006fe:	4b0c      	ldr	r3, [pc, #48]	; (8000730 <HAL_MspInit+0x5c>)
 8000700:	6a1b      	ldr	r3, [r3, #32]
 8000702:	f003 0301 	and.w	r3, r3, #1
 8000706:	60bb      	str	r3, [r7, #8]
 8000708:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800070a:	4b09      	ldr	r3, [pc, #36]	; (8000730 <HAL_MspInit+0x5c>)
 800070c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800070e:	4a08      	ldr	r2, [pc, #32]	; (8000730 <HAL_MspInit+0x5c>)
 8000710:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000714:	6253      	str	r3, [r2, #36]	; 0x24
 8000716:	4b06      	ldr	r3, [pc, #24]	; (8000730 <HAL_MspInit+0x5c>)
 8000718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800071a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800071e:	607b      	str	r3, [r7, #4]
 8000720:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000722:	2007      	movs	r0, #7
 8000724:	f000 fab4 	bl	8000c90 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000728:	bf00      	nop
 800072a:	3710      	adds	r7, #16
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	40023800 	.word	0x40023800

08000734 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000738:	e7fe      	b.n	8000738 <NMI_Handler+0x4>

0800073a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800073a:	b480      	push	{r7}
 800073c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800073e:	e7fe      	b.n	800073e <HardFault_Handler+0x4>

08000740 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000744:	e7fe      	b.n	8000744 <MemManage_Handler+0x4>

08000746 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000746:	b480      	push	{r7}
 8000748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800074a:	e7fe      	b.n	800074a <BusFault_Handler+0x4>

0800074c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000750:	e7fe      	b.n	8000750 <UsageFault_Handler+0x4>

08000752 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000752:	b480      	push	{r7}
 8000754:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000756:	bf00      	nop
 8000758:	46bd      	mov	sp, r7
 800075a:	bc80      	pop	{r7}
 800075c:	4770      	bx	lr

0800075e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800075e:	b480      	push	{r7}
 8000760:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000762:	bf00      	nop
 8000764:	46bd      	mov	sp, r7
 8000766:	bc80      	pop	{r7}
 8000768:	4770      	bx	lr

0800076a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800076a:	b480      	push	{r7}
 800076c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800076e:	bf00      	nop
 8000770:	46bd      	mov	sp, r7
 8000772:	bc80      	pop	{r7}
 8000774:	4770      	bx	lr

08000776 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000776:	b580      	push	{r7, lr}
 8000778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800077a:	f000 f9a1 	bl	8000ac0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800077e:	bf00      	nop
 8000780:	bd80      	pop	{r7, pc}
	...

08000784 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000788:	4802      	ldr	r0, [pc, #8]	; (8000794 <USART2_IRQHandler+0x10>)
 800078a:	f001 fb6f 	bl	8001e6c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	20000114 	.word	0x20000114

08000798 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b086      	sub	sp, #24
 800079c:	af00      	add	r7, sp, #0
 800079e:	60f8      	str	r0, [r7, #12]
 80007a0:	60b9      	str	r1, [r7, #8]
 80007a2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007a4:	2300      	movs	r3, #0
 80007a6:	617b      	str	r3, [r7, #20]
 80007a8:	e00a      	b.n	80007c0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80007aa:	f3af 8000 	nop.w
 80007ae:	4601      	mov	r1, r0
 80007b0:	68bb      	ldr	r3, [r7, #8]
 80007b2:	1c5a      	adds	r2, r3, #1
 80007b4:	60ba      	str	r2, [r7, #8]
 80007b6:	b2ca      	uxtb	r2, r1
 80007b8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007ba:	697b      	ldr	r3, [r7, #20]
 80007bc:	3301      	adds	r3, #1
 80007be:	617b      	str	r3, [r7, #20]
 80007c0:	697a      	ldr	r2, [r7, #20]
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	429a      	cmp	r2, r3
 80007c6:	dbf0      	blt.n	80007aa <_read+0x12>
  }

  return len;
 80007c8:	687b      	ldr	r3, [r7, #4]
}
 80007ca:	4618      	mov	r0, r3
 80007cc:	3718      	adds	r7, #24
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}

080007d2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80007d2:	b580      	push	{r7, lr}
 80007d4:	b086      	sub	sp, #24
 80007d6:	af00      	add	r7, sp, #0
 80007d8:	60f8      	str	r0, [r7, #12]
 80007da:	60b9      	str	r1, [r7, #8]
 80007dc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007de:	2300      	movs	r3, #0
 80007e0:	617b      	str	r3, [r7, #20]
 80007e2:	e009      	b.n	80007f8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80007e4:	68bb      	ldr	r3, [r7, #8]
 80007e6:	1c5a      	adds	r2, r3, #1
 80007e8:	60ba      	str	r2, [r7, #8]
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	4618      	mov	r0, r3
 80007ee:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007f2:	697b      	ldr	r3, [r7, #20]
 80007f4:	3301      	adds	r3, #1
 80007f6:	617b      	str	r3, [r7, #20]
 80007f8:	697a      	ldr	r2, [r7, #20]
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	429a      	cmp	r2, r3
 80007fe:	dbf1      	blt.n	80007e4 <_write+0x12>
  }
  return len;
 8000800:	687b      	ldr	r3, [r7, #4]
}
 8000802:	4618      	mov	r0, r3
 8000804:	3718      	adds	r7, #24
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}

0800080a <_close>:

int _close(int file)
{
 800080a:	b480      	push	{r7}
 800080c:	b083      	sub	sp, #12
 800080e:	af00      	add	r7, sp, #0
 8000810:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000812:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000816:	4618      	mov	r0, r3
 8000818:	370c      	adds	r7, #12
 800081a:	46bd      	mov	sp, r7
 800081c:	bc80      	pop	{r7}
 800081e:	4770      	bx	lr

08000820 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000820:	b480      	push	{r7}
 8000822:	b083      	sub	sp, #12
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
 8000828:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800082a:	683b      	ldr	r3, [r7, #0]
 800082c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000830:	605a      	str	r2, [r3, #4]
  return 0;
 8000832:	2300      	movs	r3, #0
}
 8000834:	4618      	mov	r0, r3
 8000836:	370c      	adds	r7, #12
 8000838:	46bd      	mov	sp, r7
 800083a:	bc80      	pop	{r7}
 800083c:	4770      	bx	lr

0800083e <_isatty>:

int _isatty(int file)
{
 800083e:	b480      	push	{r7}
 8000840:	b083      	sub	sp, #12
 8000842:	af00      	add	r7, sp, #0
 8000844:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000846:	2301      	movs	r3, #1
}
 8000848:	4618      	mov	r0, r3
 800084a:	370c      	adds	r7, #12
 800084c:	46bd      	mov	sp, r7
 800084e:	bc80      	pop	{r7}
 8000850:	4770      	bx	lr

08000852 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000852:	b480      	push	{r7}
 8000854:	b085      	sub	sp, #20
 8000856:	af00      	add	r7, sp, #0
 8000858:	60f8      	str	r0, [r7, #12]
 800085a:	60b9      	str	r1, [r7, #8]
 800085c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800085e:	2300      	movs	r3, #0
}
 8000860:	4618      	mov	r0, r3
 8000862:	3714      	adds	r7, #20
 8000864:	46bd      	mov	sp, r7
 8000866:	bc80      	pop	{r7}
 8000868:	4770      	bx	lr
	...

0800086c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b086      	sub	sp, #24
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000874:	4a14      	ldr	r2, [pc, #80]	; (80008c8 <_sbrk+0x5c>)
 8000876:	4b15      	ldr	r3, [pc, #84]	; (80008cc <_sbrk+0x60>)
 8000878:	1ad3      	subs	r3, r2, r3
 800087a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800087c:	697b      	ldr	r3, [r7, #20]
 800087e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000880:	4b13      	ldr	r3, [pc, #76]	; (80008d0 <_sbrk+0x64>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	2b00      	cmp	r3, #0
 8000886:	d102      	bne.n	800088e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000888:	4b11      	ldr	r3, [pc, #68]	; (80008d0 <_sbrk+0x64>)
 800088a:	4a12      	ldr	r2, [pc, #72]	; (80008d4 <_sbrk+0x68>)
 800088c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800088e:	4b10      	ldr	r3, [pc, #64]	; (80008d0 <_sbrk+0x64>)
 8000890:	681a      	ldr	r2, [r3, #0]
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	4413      	add	r3, r2
 8000896:	693a      	ldr	r2, [r7, #16]
 8000898:	429a      	cmp	r2, r3
 800089a:	d207      	bcs.n	80008ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800089c:	f002 f9e0 	bl	8002c60 <__errno>
 80008a0:	4603      	mov	r3, r0
 80008a2:	220c      	movs	r2, #12
 80008a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008a6:	f04f 33ff 	mov.w	r3, #4294967295
 80008aa:	e009      	b.n	80008c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008ac:	4b08      	ldr	r3, [pc, #32]	; (80008d0 <_sbrk+0x64>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008b2:	4b07      	ldr	r3, [pc, #28]	; (80008d0 <_sbrk+0x64>)
 80008b4:	681a      	ldr	r2, [r3, #0]
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	4413      	add	r3, r2
 80008ba:	4a05      	ldr	r2, [pc, #20]	; (80008d0 <_sbrk+0x64>)
 80008bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008be:	68fb      	ldr	r3, [r7, #12]
}
 80008c0:	4618      	mov	r0, r3
 80008c2:	3718      	adds	r7, #24
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	20014000 	.word	0x20014000
 80008cc:	00000400 	.word	0x00000400
 80008d0:	20000110 	.word	0x20000110
 80008d4:	200002b0 	.word	0x200002b0

080008d8 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008dc:	bf00      	nop
 80008de:	46bd      	mov	sp, r7
 80008e0:	bc80      	pop	{r7}
 80008e2:	4770      	bx	lr

080008e4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008e8:	4b11      	ldr	r3, [pc, #68]	; (8000930 <MX_USART2_UART_Init+0x4c>)
 80008ea:	4a12      	ldr	r2, [pc, #72]	; (8000934 <MX_USART2_UART_Init+0x50>)
 80008ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008ee:	4b10      	ldr	r3, [pc, #64]	; (8000930 <MX_USART2_UART_Init+0x4c>)
 80008f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008f6:	4b0e      	ldr	r3, [pc, #56]	; (8000930 <MX_USART2_UART_Init+0x4c>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008fc:	4b0c      	ldr	r3, [pc, #48]	; (8000930 <MX_USART2_UART_Init+0x4c>)
 80008fe:	2200      	movs	r2, #0
 8000900:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000902:	4b0b      	ldr	r3, [pc, #44]	; (8000930 <MX_USART2_UART_Init+0x4c>)
 8000904:	2200      	movs	r2, #0
 8000906:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000908:	4b09      	ldr	r3, [pc, #36]	; (8000930 <MX_USART2_UART_Init+0x4c>)
 800090a:	220c      	movs	r2, #12
 800090c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800090e:	4b08      	ldr	r3, [pc, #32]	; (8000930 <MX_USART2_UART_Init+0x4c>)
 8000910:	2200      	movs	r2, #0
 8000912:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000914:	4b06      	ldr	r3, [pc, #24]	; (8000930 <MX_USART2_UART_Init+0x4c>)
 8000916:	2200      	movs	r2, #0
 8000918:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800091a:	4805      	ldr	r0, [pc, #20]	; (8000930 <MX_USART2_UART_Init+0x4c>)
 800091c:	f001 fa30 	bl	8001d80 <HAL_UART_Init>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000926:	f7ff fea5 	bl	8000674 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800092a:	bf00      	nop
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	20000114 	.word	0x20000114
 8000934:	40004400 	.word	0x40004400

08000938 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b08a      	sub	sp, #40	; 0x28
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000940:	f107 0314 	add.w	r3, r7, #20
 8000944:	2200      	movs	r2, #0
 8000946:	601a      	str	r2, [r3, #0]
 8000948:	605a      	str	r2, [r3, #4]
 800094a:	609a      	str	r2, [r3, #8]
 800094c:	60da      	str	r2, [r3, #12]
 800094e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4a1b      	ldr	r2, [pc, #108]	; (80009c4 <HAL_UART_MspInit+0x8c>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d12f      	bne.n	80009ba <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800095a:	4b1b      	ldr	r3, [pc, #108]	; (80009c8 <HAL_UART_MspInit+0x90>)
 800095c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800095e:	4a1a      	ldr	r2, [pc, #104]	; (80009c8 <HAL_UART_MspInit+0x90>)
 8000960:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000964:	6253      	str	r3, [r2, #36]	; 0x24
 8000966:	4b18      	ldr	r3, [pc, #96]	; (80009c8 <HAL_UART_MspInit+0x90>)
 8000968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800096a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800096e:	613b      	str	r3, [r7, #16]
 8000970:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000972:	4b15      	ldr	r3, [pc, #84]	; (80009c8 <HAL_UART_MspInit+0x90>)
 8000974:	69db      	ldr	r3, [r3, #28]
 8000976:	4a14      	ldr	r2, [pc, #80]	; (80009c8 <HAL_UART_MspInit+0x90>)
 8000978:	f043 0301 	orr.w	r3, r3, #1
 800097c:	61d3      	str	r3, [r2, #28]
 800097e:	4b12      	ldr	r3, [pc, #72]	; (80009c8 <HAL_UART_MspInit+0x90>)
 8000980:	69db      	ldr	r3, [r3, #28]
 8000982:	f003 0301 	and.w	r3, r3, #1
 8000986:	60fb      	str	r3, [r7, #12]
 8000988:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800098a:	230c      	movs	r3, #12
 800098c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098e:	2302      	movs	r3, #2
 8000990:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000992:	2300      	movs	r3, #0
 8000994:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000996:	2303      	movs	r3, #3
 8000998:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800099a:	2307      	movs	r3, #7
 800099c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800099e:	f107 0314 	add.w	r3, r7, #20
 80009a2:	4619      	mov	r1, r3
 80009a4:	4809      	ldr	r0, [pc, #36]	; (80009cc <HAL_UART_MspInit+0x94>)
 80009a6:	f000 fa33 	bl	8000e10 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80009aa:	2200      	movs	r2, #0
 80009ac:	2100      	movs	r1, #0
 80009ae:	2026      	movs	r0, #38	; 0x26
 80009b0:	f000 f979 	bl	8000ca6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80009b4:	2026      	movs	r0, #38	; 0x26
 80009b6:	f000 f992 	bl	8000cde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80009ba:	bf00      	nop
 80009bc:	3728      	adds	r7, #40	; 0x28
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	40004400 	.word	0x40004400
 80009c8:	40023800 	.word	0x40023800
 80009cc:	40020000 	.word	0x40020000

080009d0 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 80009d0:	f7ff ff82 	bl	80008d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009d4:	480b      	ldr	r0, [pc, #44]	; (8000a04 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80009d6:	490c      	ldr	r1, [pc, #48]	; (8000a08 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80009d8:	4a0c      	ldr	r2, [pc, #48]	; (8000a0c <LoopFillZerobss+0x16>)
  movs r3, #0
 80009da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009dc:	e002      	b.n	80009e4 <LoopCopyDataInit>

080009de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009e2:	3304      	adds	r3, #4

080009e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009e8:	d3f9      	bcc.n	80009de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009ea:	4a09      	ldr	r2, [pc, #36]	; (8000a10 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80009ec:	4c09      	ldr	r4, [pc, #36]	; (8000a14 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009f0:	e001      	b.n	80009f6 <LoopFillZerobss>

080009f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009f4:	3204      	adds	r2, #4

080009f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009f8:	d3fb      	bcc.n	80009f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009fa:	f002 f937 	bl	8002c6c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009fe:	f7ff fdab 	bl	8000558 <main>
  bx lr
 8000a02:	4770      	bx	lr
  ldr r0, =_sdata
 8000a04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a08:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000a0c:	080043bc 	.word	0x080043bc
  ldr r2, =_sbss
 8000a10:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000a14:	200002ac 	.word	0x200002ac

08000a18 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a18:	e7fe      	b.n	8000a18 <ADC1_IRQHandler>

08000a1a <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a1a:	b580      	push	{r7, lr}
 8000a1c:	b082      	sub	sp, #8
 8000a1e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a20:	2300      	movs	r3, #0
 8000a22:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a24:	2003      	movs	r0, #3
 8000a26:	f000 f933 	bl	8000c90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a2a:	2000      	movs	r0, #0
 8000a2c:	f000 f80e 	bl	8000a4c <HAL_InitTick>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d002      	beq.n	8000a3c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000a36:	2301      	movs	r3, #1
 8000a38:	71fb      	strb	r3, [r7, #7]
 8000a3a:	e001      	b.n	8000a40 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a3c:	f7ff fe4a 	bl	80006d4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a40:	79fb      	ldrb	r3, [r7, #7]
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
	...

08000a4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b084      	sub	sp, #16
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a54:	2300      	movs	r3, #0
 8000a56:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000a58:	4b16      	ldr	r3, [pc, #88]	; (8000ab4 <HAL_InitTick+0x68>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d022      	beq.n	8000aa6 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000a60:	4b15      	ldr	r3, [pc, #84]	; (8000ab8 <HAL_InitTick+0x6c>)
 8000a62:	681a      	ldr	r2, [r3, #0]
 8000a64:	4b13      	ldr	r3, [pc, #76]	; (8000ab4 <HAL_InitTick+0x68>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a6c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000a70:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a74:	4618      	mov	r0, r3
 8000a76:	f000 f940 	bl	8000cfa <HAL_SYSTICK_Config>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d10f      	bne.n	8000aa0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	2b0f      	cmp	r3, #15
 8000a84:	d809      	bhi.n	8000a9a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a86:	2200      	movs	r2, #0
 8000a88:	6879      	ldr	r1, [r7, #4]
 8000a8a:	f04f 30ff 	mov.w	r0, #4294967295
 8000a8e:	f000 f90a 	bl	8000ca6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a92:	4a0a      	ldr	r2, [pc, #40]	; (8000abc <HAL_InitTick+0x70>)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	6013      	str	r3, [r2, #0]
 8000a98:	e007      	b.n	8000aaa <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	73fb      	strb	r3, [r7, #15]
 8000a9e:	e004      	b.n	8000aaa <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	73fb      	strb	r3, [r7, #15]
 8000aa4:	e001      	b.n	8000aaa <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000aaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	3710      	adds	r7, #16
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	20000008 	.word	0x20000008
 8000ab8:	20000000 	.word	0x20000000
 8000abc:	20000004 	.word	0x20000004

08000ac0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ac4:	4b05      	ldr	r3, [pc, #20]	; (8000adc <HAL_IncTick+0x1c>)
 8000ac6:	681a      	ldr	r2, [r3, #0]
 8000ac8:	4b05      	ldr	r3, [pc, #20]	; (8000ae0 <HAL_IncTick+0x20>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4413      	add	r3, r2
 8000ace:	4a03      	ldr	r2, [pc, #12]	; (8000adc <HAL_IncTick+0x1c>)
 8000ad0:	6013      	str	r3, [r2, #0]
}
 8000ad2:	bf00      	nop
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bc80      	pop	{r7}
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	2000015c 	.word	0x2000015c
 8000ae0:	20000008 	.word	0x20000008

08000ae4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ae8:	4b02      	ldr	r3, [pc, #8]	; (8000af4 <HAL_GetTick+0x10>)
 8000aea:	681b      	ldr	r3, [r3, #0]
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bc80      	pop	{r7}
 8000af2:	4770      	bx	lr
 8000af4:	2000015c 	.word	0x2000015c

08000af8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b085      	sub	sp, #20
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	f003 0307 	and.w	r3, r3, #7
 8000b06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b08:	4b0c      	ldr	r3, [pc, #48]	; (8000b3c <__NVIC_SetPriorityGrouping+0x44>)
 8000b0a:	68db      	ldr	r3, [r3, #12]
 8000b0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b0e:	68ba      	ldr	r2, [r7, #8]
 8000b10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b14:	4013      	ands	r3, r2
 8000b16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b1c:	68bb      	ldr	r3, [r7, #8]
 8000b1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b2a:	4a04      	ldr	r2, [pc, #16]	; (8000b3c <__NVIC_SetPriorityGrouping+0x44>)
 8000b2c:	68bb      	ldr	r3, [r7, #8]
 8000b2e:	60d3      	str	r3, [r2, #12]
}
 8000b30:	bf00      	nop
 8000b32:	3714      	adds	r7, #20
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bc80      	pop	{r7}
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	e000ed00 	.word	0xe000ed00

08000b40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b44:	4b04      	ldr	r3, [pc, #16]	; (8000b58 <__NVIC_GetPriorityGrouping+0x18>)
 8000b46:	68db      	ldr	r3, [r3, #12]
 8000b48:	0a1b      	lsrs	r3, r3, #8
 8000b4a:	f003 0307 	and.w	r3, r3, #7
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bc80      	pop	{r7}
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	e000ed00 	.word	0xe000ed00

08000b5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	4603      	mov	r3, r0
 8000b64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	db0b      	blt.n	8000b86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b6e:	79fb      	ldrb	r3, [r7, #7]
 8000b70:	f003 021f 	and.w	r2, r3, #31
 8000b74:	4906      	ldr	r1, [pc, #24]	; (8000b90 <__NVIC_EnableIRQ+0x34>)
 8000b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b7a:	095b      	lsrs	r3, r3, #5
 8000b7c:	2001      	movs	r0, #1
 8000b7e:	fa00 f202 	lsl.w	r2, r0, r2
 8000b82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b86:	bf00      	nop
 8000b88:	370c      	adds	r7, #12
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bc80      	pop	{r7}
 8000b8e:	4770      	bx	lr
 8000b90:	e000e100 	.word	0xe000e100

08000b94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b083      	sub	sp, #12
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	6039      	str	r1, [r7, #0]
 8000b9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ba0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	db0a      	blt.n	8000bbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	b2da      	uxtb	r2, r3
 8000bac:	490c      	ldr	r1, [pc, #48]	; (8000be0 <__NVIC_SetPriority+0x4c>)
 8000bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb2:	0112      	lsls	r2, r2, #4
 8000bb4:	b2d2      	uxtb	r2, r2
 8000bb6:	440b      	add	r3, r1
 8000bb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bbc:	e00a      	b.n	8000bd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	b2da      	uxtb	r2, r3
 8000bc2:	4908      	ldr	r1, [pc, #32]	; (8000be4 <__NVIC_SetPriority+0x50>)
 8000bc4:	79fb      	ldrb	r3, [r7, #7]
 8000bc6:	f003 030f 	and.w	r3, r3, #15
 8000bca:	3b04      	subs	r3, #4
 8000bcc:	0112      	lsls	r2, r2, #4
 8000bce:	b2d2      	uxtb	r2, r2
 8000bd0:	440b      	add	r3, r1
 8000bd2:	761a      	strb	r2, [r3, #24]
}
 8000bd4:	bf00      	nop
 8000bd6:	370c      	adds	r7, #12
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bc80      	pop	{r7}
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	e000e100 	.word	0xe000e100
 8000be4:	e000ed00 	.word	0xe000ed00

08000be8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b089      	sub	sp, #36	; 0x24
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	60f8      	str	r0, [r7, #12]
 8000bf0:	60b9      	str	r1, [r7, #8]
 8000bf2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	f003 0307 	and.w	r3, r3, #7
 8000bfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bfc:	69fb      	ldr	r3, [r7, #28]
 8000bfe:	f1c3 0307 	rsb	r3, r3, #7
 8000c02:	2b04      	cmp	r3, #4
 8000c04:	bf28      	it	cs
 8000c06:	2304      	movcs	r3, #4
 8000c08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c0a:	69fb      	ldr	r3, [r7, #28]
 8000c0c:	3304      	adds	r3, #4
 8000c0e:	2b06      	cmp	r3, #6
 8000c10:	d902      	bls.n	8000c18 <NVIC_EncodePriority+0x30>
 8000c12:	69fb      	ldr	r3, [r7, #28]
 8000c14:	3b03      	subs	r3, #3
 8000c16:	e000      	b.n	8000c1a <NVIC_EncodePriority+0x32>
 8000c18:	2300      	movs	r3, #0
 8000c1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c1c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c20:	69bb      	ldr	r3, [r7, #24]
 8000c22:	fa02 f303 	lsl.w	r3, r2, r3
 8000c26:	43da      	mvns	r2, r3
 8000c28:	68bb      	ldr	r3, [r7, #8]
 8000c2a:	401a      	ands	r2, r3
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c30:	f04f 31ff 	mov.w	r1, #4294967295
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	fa01 f303 	lsl.w	r3, r1, r3
 8000c3a:	43d9      	mvns	r1, r3
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c40:	4313      	orrs	r3, r2
         );
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	3724      	adds	r7, #36	; 0x24
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bc80      	pop	{r7}
 8000c4a:	4770      	bx	lr

08000c4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	3b01      	subs	r3, #1
 8000c58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c5c:	d301      	bcc.n	8000c62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c5e:	2301      	movs	r3, #1
 8000c60:	e00f      	b.n	8000c82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c62:	4a0a      	ldr	r2, [pc, #40]	; (8000c8c <SysTick_Config+0x40>)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	3b01      	subs	r3, #1
 8000c68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c6a:	210f      	movs	r1, #15
 8000c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c70:	f7ff ff90 	bl	8000b94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c74:	4b05      	ldr	r3, [pc, #20]	; (8000c8c <SysTick_Config+0x40>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c7a:	4b04      	ldr	r3, [pc, #16]	; (8000c8c <SysTick_Config+0x40>)
 8000c7c:	2207      	movs	r2, #7
 8000c7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c80:	2300      	movs	r3, #0
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	3708      	adds	r7, #8
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	e000e010 	.word	0xe000e010

08000c90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c98:	6878      	ldr	r0, [r7, #4]
 8000c9a:	f7ff ff2d 	bl	8000af8 <__NVIC_SetPriorityGrouping>
}
 8000c9e:	bf00      	nop
 8000ca0:	3708      	adds	r7, #8
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}

08000ca6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ca6:	b580      	push	{r7, lr}
 8000ca8:	b086      	sub	sp, #24
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	4603      	mov	r3, r0
 8000cae:	60b9      	str	r1, [r7, #8]
 8000cb0:	607a      	str	r2, [r7, #4]
 8000cb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cb8:	f7ff ff42 	bl	8000b40 <__NVIC_GetPriorityGrouping>
 8000cbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cbe:	687a      	ldr	r2, [r7, #4]
 8000cc0:	68b9      	ldr	r1, [r7, #8]
 8000cc2:	6978      	ldr	r0, [r7, #20]
 8000cc4:	f7ff ff90 	bl	8000be8 <NVIC_EncodePriority>
 8000cc8:	4602      	mov	r2, r0
 8000cca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cce:	4611      	mov	r1, r2
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f7ff ff5f 	bl	8000b94 <__NVIC_SetPriority>
}
 8000cd6:	bf00      	nop
 8000cd8:	3718      	adds	r7, #24
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}

08000cde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cde:	b580      	push	{r7, lr}
 8000ce0:	b082      	sub	sp, #8
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ce8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cec:	4618      	mov	r0, r3
 8000cee:	f7ff ff35 	bl	8000b5c <__NVIC_EnableIRQ>
}
 8000cf2:	bf00      	nop
 8000cf4:	3708      	adds	r7, #8
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}

08000cfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cfa:	b580      	push	{r7, lr}
 8000cfc:	b082      	sub	sp, #8
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d02:	6878      	ldr	r0, [r7, #4]
 8000d04:	f7ff ffa2 	bl	8000c4c <SysTick_Config>
 8000d08:	4603      	mov	r3, r0
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}

08000d12 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000d12:	b480      	push	{r7}
 8000d14:	b085      	sub	sp, #20
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000d24:	b2db      	uxtb	r3, r3
 8000d26:	2b02      	cmp	r3, #2
 8000d28:	d008      	beq.n	8000d3c <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	2204      	movs	r2, #4
 8000d2e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	2200      	movs	r2, #0
 8000d34:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	e022      	b.n	8000d82 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	681a      	ldr	r2, [r3, #0]
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f022 020e 	bic.w	r2, r2, #14
 8000d4a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	681a      	ldr	r2, [r3, #0]
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	f022 0201 	bic.w	r2, r2, #1
 8000d5a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d60:	f003 021c 	and.w	r2, r3, #28
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d68:	2101      	movs	r1, #1
 8000d6a:	fa01 f202 	lsl.w	r2, r1, r2
 8000d6e:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	2201      	movs	r2, #1
 8000d74:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	f883 2020 	strb.w	r2, [r3, #32]

    return status;
 8000d80:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	3714      	adds	r7, #20
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bc80      	pop	{r7}
 8000d8a:	4770      	bx	lr

08000d8c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b084      	sub	sp, #16
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d94:	2300      	movs	r3, #0
 8000d96:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000d9e:	b2db      	uxtb	r3, r3
 8000da0:	2b02      	cmp	r3, #2
 8000da2:	d005      	beq.n	8000db0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	2204      	movs	r2, #4
 8000da8:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8000daa:	2301      	movs	r3, #1
 8000dac:	73fb      	strb	r3, [r7, #15]
 8000dae:	e029      	b.n	8000e04 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	681a      	ldr	r2, [r3, #0]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f022 020e 	bic.w	r2, r2, #14
 8000dbe:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f022 0201 	bic.w	r2, r2, #1
 8000dce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd4:	f003 021c 	and.w	r2, r3, #28
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ddc:	2101      	movs	r1, #1
 8000dde:	fa01 f202 	lsl.w	r2, r1, r2
 8000de2:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	2201      	movs	r2, #1
 8000de8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	2200      	movs	r2, #0
 8000df0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d003      	beq.n	8000e04 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e00:	6878      	ldr	r0, [r7, #4]
 8000e02:	4798      	blx	r3
    }
  }
  return status;
 8000e04:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	3710      	adds	r7, #16
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
	...

08000e10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b087      	sub	sp, #28
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
 8000e18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8000e22:	2300      	movs	r3, #0
 8000e24:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000e26:	e160      	b.n	80010ea <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	681a      	ldr	r2, [r3, #0]
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	fa01 f303 	lsl.w	r3, r1, r3
 8000e34:	4013      	ands	r3, r2
 8000e36:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	f000 8152 	beq.w	80010e4 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	f003 0303 	and.w	r3, r3, #3
 8000e48:	2b01      	cmp	r3, #1
 8000e4a:	d005      	beq.n	8000e58 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e54:	2b02      	cmp	r3, #2
 8000e56:	d130      	bne.n	8000eba <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	689b      	ldr	r3, [r3, #8]
 8000e5c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	005b      	lsls	r3, r3, #1
 8000e62:	2203      	movs	r2, #3
 8000e64:	fa02 f303 	lsl.w	r3, r2, r3
 8000e68:	43db      	mvns	r3, r3
 8000e6a:	693a      	ldr	r2, [r7, #16]
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	68da      	ldr	r2, [r3, #12]
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	005b      	lsls	r3, r3, #1
 8000e78:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7c:	693a      	ldr	r2, [r7, #16]
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	693a      	ldr	r2, [r7, #16]
 8000e86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000e8e:	2201      	movs	r2, #1
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	fa02 f303 	lsl.w	r3, r2, r3
 8000e96:	43db      	mvns	r3, r3
 8000e98:	693a      	ldr	r2, [r7, #16]
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	091b      	lsrs	r3, r3, #4
 8000ea4:	f003 0201 	and.w	r2, r3, #1
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8000eae:	693a      	ldr	r2, [r7, #16]
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	f003 0303 	and.w	r3, r3, #3
 8000ec2:	2b03      	cmp	r3, #3
 8000ec4:	d017      	beq.n	8000ef6 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	68db      	ldr	r3, [r3, #12]
 8000eca:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	005b      	lsls	r3, r3, #1
 8000ed0:	2203      	movs	r2, #3
 8000ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed6:	43db      	mvns	r3, r3
 8000ed8:	693a      	ldr	r2, [r7, #16]
 8000eda:	4013      	ands	r3, r2
 8000edc:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	689a      	ldr	r2, [r3, #8]
 8000ee2:	697b      	ldr	r3, [r7, #20]
 8000ee4:	005b      	lsls	r3, r3, #1
 8000ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eea:	693a      	ldr	r2, [r7, #16]
 8000eec:	4313      	orrs	r3, r2
 8000eee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	693a      	ldr	r2, [r7, #16]
 8000ef4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	f003 0303 	and.w	r3, r3, #3
 8000efe:	2b02      	cmp	r3, #2
 8000f00:	d123      	bne.n	8000f4a <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	08da      	lsrs	r2, r3, #3
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	3208      	adds	r2, #8
 8000f0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f0e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	f003 0307 	and.w	r3, r3, #7
 8000f16:	009b      	lsls	r3, r3, #2
 8000f18:	220f      	movs	r2, #15
 8000f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1e:	43db      	mvns	r3, r3
 8000f20:	693a      	ldr	r2, [r7, #16]
 8000f22:	4013      	ands	r3, r2
 8000f24:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	691a      	ldr	r2, [r3, #16]
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	f003 0307 	and.w	r3, r3, #7
 8000f30:	009b      	lsls	r3, r3, #2
 8000f32:	fa02 f303 	lsl.w	r3, r2, r3
 8000f36:	693a      	ldr	r2, [r7, #16]
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	08da      	lsrs	r2, r3, #3
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	3208      	adds	r2, #8
 8000f44:	6939      	ldr	r1, [r7, #16]
 8000f46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	005b      	lsls	r3, r3, #1
 8000f54:	2203      	movs	r2, #3
 8000f56:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5a:	43db      	mvns	r3, r3
 8000f5c:	693a      	ldr	r2, [r7, #16]
 8000f5e:	4013      	ands	r3, r2
 8000f60:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	f003 0203 	and.w	r2, r3, #3
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	005b      	lsls	r3, r3, #1
 8000f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f72:	693a      	ldr	r2, [r7, #16]
 8000f74:	4313      	orrs	r3, r2
 8000f76:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	693a      	ldr	r2, [r7, #16]
 8000f7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	f000 80ac 	beq.w	80010e4 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f8c:	4b5e      	ldr	r3, [pc, #376]	; (8001108 <HAL_GPIO_Init+0x2f8>)
 8000f8e:	6a1b      	ldr	r3, [r3, #32]
 8000f90:	4a5d      	ldr	r2, [pc, #372]	; (8001108 <HAL_GPIO_Init+0x2f8>)
 8000f92:	f043 0301 	orr.w	r3, r3, #1
 8000f96:	6213      	str	r3, [r2, #32]
 8000f98:	4b5b      	ldr	r3, [pc, #364]	; (8001108 <HAL_GPIO_Init+0x2f8>)
 8000f9a:	6a1b      	ldr	r3, [r3, #32]
 8000f9c:	f003 0301 	and.w	r3, r3, #1
 8000fa0:	60bb      	str	r3, [r7, #8]
 8000fa2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8000fa4:	4a59      	ldr	r2, [pc, #356]	; (800110c <HAL_GPIO_Init+0x2fc>)
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	089b      	lsrs	r3, r3, #2
 8000faa:	3302      	adds	r3, #2
 8000fac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fb0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	f003 0303 	and.w	r3, r3, #3
 8000fb8:	009b      	lsls	r3, r3, #2
 8000fba:	220f      	movs	r2, #15
 8000fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc0:	43db      	mvns	r3, r3
 8000fc2:	693a      	ldr	r2, [r7, #16]
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	4a51      	ldr	r2, [pc, #324]	; (8001110 <HAL_GPIO_Init+0x300>)
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d025      	beq.n	800101c <HAL_GPIO_Init+0x20c>
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	4a50      	ldr	r2, [pc, #320]	; (8001114 <HAL_GPIO_Init+0x304>)
 8000fd4:	4293      	cmp	r3, r2
 8000fd6:	d01f      	beq.n	8001018 <HAL_GPIO_Init+0x208>
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	4a4f      	ldr	r2, [pc, #316]	; (8001118 <HAL_GPIO_Init+0x308>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d019      	beq.n	8001014 <HAL_GPIO_Init+0x204>
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	4a4e      	ldr	r2, [pc, #312]	; (800111c <HAL_GPIO_Init+0x30c>)
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d013      	beq.n	8001010 <HAL_GPIO_Init+0x200>
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	4a4d      	ldr	r2, [pc, #308]	; (8001120 <HAL_GPIO_Init+0x310>)
 8000fec:	4293      	cmp	r3, r2
 8000fee:	d00d      	beq.n	800100c <HAL_GPIO_Init+0x1fc>
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	4a4c      	ldr	r2, [pc, #304]	; (8001124 <HAL_GPIO_Init+0x314>)
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	d007      	beq.n	8001008 <HAL_GPIO_Init+0x1f8>
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	4a4b      	ldr	r2, [pc, #300]	; (8001128 <HAL_GPIO_Init+0x318>)
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d101      	bne.n	8001004 <HAL_GPIO_Init+0x1f4>
 8001000:	2306      	movs	r3, #6
 8001002:	e00c      	b.n	800101e <HAL_GPIO_Init+0x20e>
 8001004:	2307      	movs	r3, #7
 8001006:	e00a      	b.n	800101e <HAL_GPIO_Init+0x20e>
 8001008:	2305      	movs	r3, #5
 800100a:	e008      	b.n	800101e <HAL_GPIO_Init+0x20e>
 800100c:	2304      	movs	r3, #4
 800100e:	e006      	b.n	800101e <HAL_GPIO_Init+0x20e>
 8001010:	2303      	movs	r3, #3
 8001012:	e004      	b.n	800101e <HAL_GPIO_Init+0x20e>
 8001014:	2302      	movs	r3, #2
 8001016:	e002      	b.n	800101e <HAL_GPIO_Init+0x20e>
 8001018:	2301      	movs	r3, #1
 800101a:	e000      	b.n	800101e <HAL_GPIO_Init+0x20e>
 800101c:	2300      	movs	r3, #0
 800101e:	697a      	ldr	r2, [r7, #20]
 8001020:	f002 0203 	and.w	r2, r2, #3
 8001024:	0092      	lsls	r2, r2, #2
 8001026:	4093      	lsls	r3, r2
 8001028:	693a      	ldr	r2, [r7, #16]
 800102a:	4313      	orrs	r3, r2
 800102c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 800102e:	4937      	ldr	r1, [pc, #220]	; (800110c <HAL_GPIO_Init+0x2fc>)
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	089b      	lsrs	r3, r3, #2
 8001034:	3302      	adds	r3, #2
 8001036:	693a      	ldr	r2, [r7, #16]
 8001038:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800103c:	4b3b      	ldr	r3, [pc, #236]	; (800112c <HAL_GPIO_Init+0x31c>)
 800103e:	689b      	ldr	r3, [r3, #8]
 8001040:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	43db      	mvns	r3, r3
 8001046:	693a      	ldr	r2, [r7, #16]
 8001048:	4013      	ands	r3, r2
 800104a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001054:	2b00      	cmp	r3, #0
 8001056:	d003      	beq.n	8001060 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8001058:	693a      	ldr	r2, [r7, #16]
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	4313      	orrs	r3, r2
 800105e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001060:	4a32      	ldr	r2, [pc, #200]	; (800112c <HAL_GPIO_Init+0x31c>)
 8001062:	693b      	ldr	r3, [r7, #16]
 8001064:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001066:	4b31      	ldr	r3, [pc, #196]	; (800112c <HAL_GPIO_Init+0x31c>)
 8001068:	68db      	ldr	r3, [r3, #12]
 800106a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	43db      	mvns	r3, r3
 8001070:	693a      	ldr	r2, [r7, #16]
 8001072:	4013      	ands	r3, r2
 8001074:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800107e:	2b00      	cmp	r3, #0
 8001080:	d003      	beq.n	800108a <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 8001082:	693a      	ldr	r2, [r7, #16]
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	4313      	orrs	r3, r2
 8001088:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800108a:	4a28      	ldr	r2, [pc, #160]	; (800112c <HAL_GPIO_Init+0x31c>)
 800108c:	693b      	ldr	r3, [r7, #16]
 800108e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001090:	4b26      	ldr	r3, [pc, #152]	; (800112c <HAL_GPIO_Init+0x31c>)
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	43db      	mvns	r3, r3
 800109a:	693a      	ldr	r2, [r7, #16]
 800109c:	4013      	ands	r3, r2
 800109e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d003      	beq.n	80010b4 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 80010ac:	693a      	ldr	r2, [r7, #16]
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	4313      	orrs	r3, r2
 80010b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80010b4:	4a1d      	ldr	r2, [pc, #116]	; (800112c <HAL_GPIO_Init+0x31c>)
 80010b6:	693b      	ldr	r3, [r7, #16]
 80010b8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010ba:	4b1c      	ldr	r3, [pc, #112]	; (800112c <HAL_GPIO_Init+0x31c>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	43db      	mvns	r3, r3
 80010c4:	693a      	ldr	r2, [r7, #16]
 80010c6:	4013      	ands	r3, r2
 80010c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d003      	beq.n	80010de <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 80010d6:	693a      	ldr	r2, [r7, #16]
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	4313      	orrs	r3, r2
 80010dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80010de:	4a13      	ldr	r2, [pc, #76]	; (800112c <HAL_GPIO_Init+0x31c>)
 80010e0:	693b      	ldr	r3, [r7, #16]
 80010e2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	3301      	adds	r3, #1
 80010e8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	fa22 f303 	lsr.w	r3, r2, r3
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	f47f ae97 	bne.w	8000e28 <HAL_GPIO_Init+0x18>
  }
}
 80010fa:	bf00      	nop
 80010fc:	bf00      	nop
 80010fe:	371c      	adds	r7, #28
 8001100:	46bd      	mov	sp, r7
 8001102:	bc80      	pop	{r7}
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	40023800 	.word	0x40023800
 800110c:	40010000 	.word	0x40010000
 8001110:	40020000 	.word	0x40020000
 8001114:	40020400 	.word	0x40020400
 8001118:	40020800 	.word	0x40020800
 800111c:	40020c00 	.word	0x40020c00
 8001120:	40021000 	.word	0x40021000
 8001124:	40021400 	.word	0x40021400
 8001128:	40021800 	.word	0x40021800
 800112c:	40010400 	.word	0x40010400

08001130 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	460b      	mov	r3, r1
 800113a:	807b      	strh	r3, [r7, #2]
 800113c:	4613      	mov	r3, r2
 800113e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001140:	787b      	ldrb	r3, [r7, #1]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d003      	beq.n	800114e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001146:	887a      	ldrh	r2, [r7, #2]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 800114c:	e003      	b.n	8001156 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 800114e:	887b      	ldrh	r3, [r7, #2]
 8001150:	041a      	lsls	r2, r3, #16
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	619a      	str	r2, [r3, #24]
}
 8001156:	bf00      	nop
 8001158:	370c      	adds	r7, #12
 800115a:	46bd      	mov	sp, r7
 800115c:	bc80      	pop	{r7}
 800115e:	4770      	bx	lr

08001160 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..G depending on device used) to select the GPIO peripheral for STM32L1XX family devices
  * @param  GPIO_Pin specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001160:	b480      	push	{r7}
 8001162:	b085      	sub	sp, #20
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	460b      	mov	r3, r1
 800116a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	695b      	ldr	r3, [r3, #20]
 8001170:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001172:	887a      	ldrh	r2, [r7, #2]
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	4013      	ands	r3, r2
 8001178:	041a      	lsls	r2, r3, #16
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	43d9      	mvns	r1, r3
 800117e:	887b      	ldrh	r3, [r7, #2]
 8001180:	400b      	ands	r3, r1
 8001182:	431a      	orrs	r2, r3
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	619a      	str	r2, [r3, #24]
}
 8001188:	bf00      	nop
 800118a:	3714      	adds	r7, #20
 800118c:	46bd      	mov	sp, r7
 800118e:	bc80      	pop	{r7}
 8001190:	4770      	bx	lr
	...

08001194 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b088      	sub	sp, #32
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d101      	bne.n	80011a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	e31d      	b.n	80017e2 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011a6:	4b94      	ldr	r3, [pc, #592]	; (80013f8 <HAL_RCC_OscConfig+0x264>)
 80011a8:	689b      	ldr	r3, [r3, #8]
 80011aa:	f003 030c 	and.w	r3, r3, #12
 80011ae:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80011b0:	4b91      	ldr	r3, [pc, #580]	; (80013f8 <HAL_RCC_OscConfig+0x264>)
 80011b2:	689b      	ldr	r3, [r3, #8]
 80011b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011b8:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f003 0301 	and.w	r3, r3, #1
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d07b      	beq.n	80012be <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80011c6:	69bb      	ldr	r3, [r7, #24]
 80011c8:	2b08      	cmp	r3, #8
 80011ca:	d006      	beq.n	80011da <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80011cc:	69bb      	ldr	r3, [r7, #24]
 80011ce:	2b0c      	cmp	r3, #12
 80011d0:	d10f      	bne.n	80011f2 <HAL_RCC_OscConfig+0x5e>
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011d8:	d10b      	bne.n	80011f2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011da:	4b87      	ldr	r3, [pc, #540]	; (80013f8 <HAL_RCC_OscConfig+0x264>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d06a      	beq.n	80012bc <HAL_RCC_OscConfig+0x128>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d166      	bne.n	80012bc <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
 80011f0:	e2f7      	b.n	80017e2 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d106      	bne.n	8001208 <HAL_RCC_OscConfig+0x74>
 80011fa:	4b7f      	ldr	r3, [pc, #508]	; (80013f8 <HAL_RCC_OscConfig+0x264>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a7e      	ldr	r2, [pc, #504]	; (80013f8 <HAL_RCC_OscConfig+0x264>)
 8001200:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001204:	6013      	str	r3, [r2, #0]
 8001206:	e02d      	b.n	8001264 <HAL_RCC_OscConfig+0xd0>
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d10c      	bne.n	800122a <HAL_RCC_OscConfig+0x96>
 8001210:	4b79      	ldr	r3, [pc, #484]	; (80013f8 <HAL_RCC_OscConfig+0x264>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a78      	ldr	r2, [pc, #480]	; (80013f8 <HAL_RCC_OscConfig+0x264>)
 8001216:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800121a:	6013      	str	r3, [r2, #0]
 800121c:	4b76      	ldr	r3, [pc, #472]	; (80013f8 <HAL_RCC_OscConfig+0x264>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a75      	ldr	r2, [pc, #468]	; (80013f8 <HAL_RCC_OscConfig+0x264>)
 8001222:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001226:	6013      	str	r3, [r2, #0]
 8001228:	e01c      	b.n	8001264 <HAL_RCC_OscConfig+0xd0>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	2b05      	cmp	r3, #5
 8001230:	d10c      	bne.n	800124c <HAL_RCC_OscConfig+0xb8>
 8001232:	4b71      	ldr	r3, [pc, #452]	; (80013f8 <HAL_RCC_OscConfig+0x264>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4a70      	ldr	r2, [pc, #448]	; (80013f8 <HAL_RCC_OscConfig+0x264>)
 8001238:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800123c:	6013      	str	r3, [r2, #0]
 800123e:	4b6e      	ldr	r3, [pc, #440]	; (80013f8 <HAL_RCC_OscConfig+0x264>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4a6d      	ldr	r2, [pc, #436]	; (80013f8 <HAL_RCC_OscConfig+0x264>)
 8001244:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001248:	6013      	str	r3, [r2, #0]
 800124a:	e00b      	b.n	8001264 <HAL_RCC_OscConfig+0xd0>
 800124c:	4b6a      	ldr	r3, [pc, #424]	; (80013f8 <HAL_RCC_OscConfig+0x264>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a69      	ldr	r2, [pc, #420]	; (80013f8 <HAL_RCC_OscConfig+0x264>)
 8001252:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001256:	6013      	str	r3, [r2, #0]
 8001258:	4b67      	ldr	r3, [pc, #412]	; (80013f8 <HAL_RCC_OscConfig+0x264>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a66      	ldr	r2, [pc, #408]	; (80013f8 <HAL_RCC_OscConfig+0x264>)
 800125e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001262:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d013      	beq.n	8001294 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800126c:	f7ff fc3a 	bl	8000ae4 <HAL_GetTick>
 8001270:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001272:	e008      	b.n	8001286 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001274:	f7ff fc36 	bl	8000ae4 <HAL_GetTick>
 8001278:	4602      	mov	r2, r0
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	2b64      	cmp	r3, #100	; 0x64
 8001280:	d901      	bls.n	8001286 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8001282:	2303      	movs	r3, #3
 8001284:	e2ad      	b.n	80017e2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001286:	4b5c      	ldr	r3, [pc, #368]	; (80013f8 <HAL_RCC_OscConfig+0x264>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800128e:	2b00      	cmp	r3, #0
 8001290:	d0f0      	beq.n	8001274 <HAL_RCC_OscConfig+0xe0>
 8001292:	e014      	b.n	80012be <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001294:	f7ff fc26 	bl	8000ae4 <HAL_GetTick>
 8001298:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800129a:	e008      	b.n	80012ae <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800129c:	f7ff fc22 	bl	8000ae4 <HAL_GetTick>
 80012a0:	4602      	mov	r2, r0
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	1ad3      	subs	r3, r2, r3
 80012a6:	2b64      	cmp	r3, #100	; 0x64
 80012a8:	d901      	bls.n	80012ae <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 80012aa:	2303      	movs	r3, #3
 80012ac:	e299      	b.n	80017e2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80012ae:	4b52      	ldr	r3, [pc, #328]	; (80013f8 <HAL_RCC_OscConfig+0x264>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d1f0      	bne.n	800129c <HAL_RCC_OscConfig+0x108>
 80012ba:	e000      	b.n	80012be <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f003 0302 	and.w	r3, r3, #2
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d05a      	beq.n	8001380 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80012ca:	69bb      	ldr	r3, [r7, #24]
 80012cc:	2b04      	cmp	r3, #4
 80012ce:	d005      	beq.n	80012dc <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80012d0:	69bb      	ldr	r3, [r7, #24]
 80012d2:	2b0c      	cmp	r3, #12
 80012d4:	d119      	bne.n	800130a <HAL_RCC_OscConfig+0x176>
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d116      	bne.n	800130a <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012dc:	4b46      	ldr	r3, [pc, #280]	; (80013f8 <HAL_RCC_OscConfig+0x264>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f003 0302 	and.w	r3, r3, #2
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d005      	beq.n	80012f4 <HAL_RCC_OscConfig+0x160>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d001      	beq.n	80012f4 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 80012f0:	2301      	movs	r3, #1
 80012f2:	e276      	b.n	80017e2 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012f4:	4b40      	ldr	r3, [pc, #256]	; (80013f8 <HAL_RCC_OscConfig+0x264>)
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	691b      	ldr	r3, [r3, #16]
 8001300:	021b      	lsls	r3, r3, #8
 8001302:	493d      	ldr	r1, [pc, #244]	; (80013f8 <HAL_RCC_OscConfig+0x264>)
 8001304:	4313      	orrs	r3, r2
 8001306:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001308:	e03a      	b.n	8001380 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	68db      	ldr	r3, [r3, #12]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d020      	beq.n	8001354 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001312:	4b3a      	ldr	r3, [pc, #232]	; (80013fc <HAL_RCC_OscConfig+0x268>)
 8001314:	2201      	movs	r2, #1
 8001316:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001318:	f7ff fbe4 	bl	8000ae4 <HAL_GetTick>
 800131c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800131e:	e008      	b.n	8001332 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001320:	f7ff fbe0 	bl	8000ae4 <HAL_GetTick>
 8001324:	4602      	mov	r2, r0
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	2b02      	cmp	r3, #2
 800132c:	d901      	bls.n	8001332 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800132e:	2303      	movs	r3, #3
 8001330:	e257      	b.n	80017e2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001332:	4b31      	ldr	r3, [pc, #196]	; (80013f8 <HAL_RCC_OscConfig+0x264>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f003 0302 	and.w	r3, r3, #2
 800133a:	2b00      	cmp	r3, #0
 800133c:	d0f0      	beq.n	8001320 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800133e:	4b2e      	ldr	r3, [pc, #184]	; (80013f8 <HAL_RCC_OscConfig+0x264>)
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	691b      	ldr	r3, [r3, #16]
 800134a:	021b      	lsls	r3, r3, #8
 800134c:	492a      	ldr	r1, [pc, #168]	; (80013f8 <HAL_RCC_OscConfig+0x264>)
 800134e:	4313      	orrs	r3, r2
 8001350:	604b      	str	r3, [r1, #4]
 8001352:	e015      	b.n	8001380 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001354:	4b29      	ldr	r3, [pc, #164]	; (80013fc <HAL_RCC_OscConfig+0x268>)
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800135a:	f7ff fbc3 	bl	8000ae4 <HAL_GetTick>
 800135e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001360:	e008      	b.n	8001374 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001362:	f7ff fbbf 	bl	8000ae4 <HAL_GetTick>
 8001366:	4602      	mov	r2, r0
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	1ad3      	subs	r3, r2, r3
 800136c:	2b02      	cmp	r3, #2
 800136e:	d901      	bls.n	8001374 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8001370:	2303      	movs	r3, #3
 8001372:	e236      	b.n	80017e2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001374:	4b20      	ldr	r3, [pc, #128]	; (80013f8 <HAL_RCC_OscConfig+0x264>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f003 0302 	and.w	r3, r3, #2
 800137c:	2b00      	cmp	r3, #0
 800137e:	d1f0      	bne.n	8001362 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f003 0310 	and.w	r3, r3, #16
 8001388:	2b00      	cmp	r3, #0
 800138a:	f000 80b8 	beq.w	80014fe <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800138e:	69bb      	ldr	r3, [r7, #24]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d170      	bne.n	8001476 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001394:	4b18      	ldr	r3, [pc, #96]	; (80013f8 <HAL_RCC_OscConfig+0x264>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800139c:	2b00      	cmp	r3, #0
 800139e:	d005      	beq.n	80013ac <HAL_RCC_OscConfig+0x218>
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	699b      	ldr	r3, [r3, #24]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d101      	bne.n	80013ac <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 80013a8:	2301      	movs	r3, #1
 80013aa:	e21a      	b.n	80017e2 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6a1a      	ldr	r2, [r3, #32]
 80013b0:	4b11      	ldr	r3, [pc, #68]	; (80013f8 <HAL_RCC_OscConfig+0x264>)
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80013b8:	429a      	cmp	r2, r3
 80013ba:	d921      	bls.n	8001400 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6a1b      	ldr	r3, [r3, #32]
 80013c0:	4618      	mov	r0, r3
 80013c2:	f000 fc7d 	bl	8001cc0 <RCC_SetFlashLatencyFromMSIRange>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 80013cc:	2301      	movs	r3, #1
 80013ce:	e208      	b.n	80017e2 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013d0:	4b09      	ldr	r3, [pc, #36]	; (80013f8 <HAL_RCC_OscConfig+0x264>)
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6a1b      	ldr	r3, [r3, #32]
 80013dc:	4906      	ldr	r1, [pc, #24]	; (80013f8 <HAL_RCC_OscConfig+0x264>)
 80013de:	4313      	orrs	r3, r2
 80013e0:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013e2:	4b05      	ldr	r3, [pc, #20]	; (80013f8 <HAL_RCC_OscConfig+0x264>)
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	69db      	ldr	r3, [r3, #28]
 80013ee:	061b      	lsls	r3, r3, #24
 80013f0:	4901      	ldr	r1, [pc, #4]	; (80013f8 <HAL_RCC_OscConfig+0x264>)
 80013f2:	4313      	orrs	r3, r2
 80013f4:	604b      	str	r3, [r1, #4]
 80013f6:	e020      	b.n	800143a <HAL_RCC_OscConfig+0x2a6>
 80013f8:	40023800 	.word	0x40023800
 80013fc:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001400:	4b99      	ldr	r3, [pc, #612]	; (8001668 <HAL_RCC_OscConfig+0x4d4>)
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6a1b      	ldr	r3, [r3, #32]
 800140c:	4996      	ldr	r1, [pc, #600]	; (8001668 <HAL_RCC_OscConfig+0x4d4>)
 800140e:	4313      	orrs	r3, r2
 8001410:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001412:	4b95      	ldr	r3, [pc, #596]	; (8001668 <HAL_RCC_OscConfig+0x4d4>)
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	69db      	ldr	r3, [r3, #28]
 800141e:	061b      	lsls	r3, r3, #24
 8001420:	4991      	ldr	r1, [pc, #580]	; (8001668 <HAL_RCC_OscConfig+0x4d4>)
 8001422:	4313      	orrs	r3, r2
 8001424:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6a1b      	ldr	r3, [r3, #32]
 800142a:	4618      	mov	r0, r3
 800142c:	f000 fc48 	bl	8001cc0 <RCC_SetFlashLatencyFromMSIRange>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	e1d3      	b.n	80017e2 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6a1b      	ldr	r3, [r3, #32]
 800143e:	0b5b      	lsrs	r3, r3, #13
 8001440:	3301      	adds	r3, #1
 8001442:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001446:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800144a:	4a87      	ldr	r2, [pc, #540]	; (8001668 <HAL_RCC_OscConfig+0x4d4>)
 800144c:	6892      	ldr	r2, [r2, #8]
 800144e:	0912      	lsrs	r2, r2, #4
 8001450:	f002 020f 	and.w	r2, r2, #15
 8001454:	4985      	ldr	r1, [pc, #532]	; (800166c <HAL_RCC_OscConfig+0x4d8>)
 8001456:	5c8a      	ldrb	r2, [r1, r2]
 8001458:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800145a:	4a85      	ldr	r2, [pc, #532]	; (8001670 <HAL_RCC_OscConfig+0x4dc>)
 800145c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800145e:	4b85      	ldr	r3, [pc, #532]	; (8001674 <HAL_RCC_OscConfig+0x4e0>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4618      	mov	r0, r3
 8001464:	f7ff faf2 	bl	8000a4c <HAL_InitTick>
 8001468:	4603      	mov	r3, r0
 800146a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800146c:	7bfb      	ldrb	r3, [r7, #15]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d045      	beq.n	80014fe <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8001472:	7bfb      	ldrb	r3, [r7, #15]
 8001474:	e1b5      	b.n	80017e2 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	699b      	ldr	r3, [r3, #24]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d029      	beq.n	80014d2 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800147e:	4b7e      	ldr	r3, [pc, #504]	; (8001678 <HAL_RCC_OscConfig+0x4e4>)
 8001480:	2201      	movs	r2, #1
 8001482:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001484:	f7ff fb2e 	bl	8000ae4 <HAL_GetTick>
 8001488:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800148a:	e008      	b.n	800149e <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800148c:	f7ff fb2a 	bl	8000ae4 <HAL_GetTick>
 8001490:	4602      	mov	r2, r0
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	2b02      	cmp	r3, #2
 8001498:	d901      	bls.n	800149e <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 800149a:	2303      	movs	r3, #3
 800149c:	e1a1      	b.n	80017e2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800149e:	4b72      	ldr	r3, [pc, #456]	; (8001668 <HAL_RCC_OscConfig+0x4d4>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d0f0      	beq.n	800148c <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014aa:	4b6f      	ldr	r3, [pc, #444]	; (8001668 <HAL_RCC_OscConfig+0x4d4>)
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6a1b      	ldr	r3, [r3, #32]
 80014b6:	496c      	ldr	r1, [pc, #432]	; (8001668 <HAL_RCC_OscConfig+0x4d4>)
 80014b8:	4313      	orrs	r3, r2
 80014ba:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014bc:	4b6a      	ldr	r3, [pc, #424]	; (8001668 <HAL_RCC_OscConfig+0x4d4>)
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	69db      	ldr	r3, [r3, #28]
 80014c8:	061b      	lsls	r3, r3, #24
 80014ca:	4967      	ldr	r1, [pc, #412]	; (8001668 <HAL_RCC_OscConfig+0x4d4>)
 80014cc:	4313      	orrs	r3, r2
 80014ce:	604b      	str	r3, [r1, #4]
 80014d0:	e015      	b.n	80014fe <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80014d2:	4b69      	ldr	r3, [pc, #420]	; (8001678 <HAL_RCC_OscConfig+0x4e4>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d8:	f7ff fb04 	bl	8000ae4 <HAL_GetTick>
 80014dc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80014de:	e008      	b.n	80014f2 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80014e0:	f7ff fb00 	bl	8000ae4 <HAL_GetTick>
 80014e4:	4602      	mov	r2, r0
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	2b02      	cmp	r3, #2
 80014ec:	d901      	bls.n	80014f2 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80014ee:	2303      	movs	r3, #3
 80014f0:	e177      	b.n	80017e2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80014f2:	4b5d      	ldr	r3, [pc, #372]	; (8001668 <HAL_RCC_OscConfig+0x4d4>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d1f0      	bne.n	80014e0 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f003 0308 	and.w	r3, r3, #8
 8001506:	2b00      	cmp	r3, #0
 8001508:	d030      	beq.n	800156c <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	695b      	ldr	r3, [r3, #20]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d016      	beq.n	8001540 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001512:	4b5a      	ldr	r3, [pc, #360]	; (800167c <HAL_RCC_OscConfig+0x4e8>)
 8001514:	2201      	movs	r2, #1
 8001516:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001518:	f7ff fae4 	bl	8000ae4 <HAL_GetTick>
 800151c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800151e:	e008      	b.n	8001532 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001520:	f7ff fae0 	bl	8000ae4 <HAL_GetTick>
 8001524:	4602      	mov	r2, r0
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	2b02      	cmp	r3, #2
 800152c:	d901      	bls.n	8001532 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800152e:	2303      	movs	r3, #3
 8001530:	e157      	b.n	80017e2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001532:	4b4d      	ldr	r3, [pc, #308]	; (8001668 <HAL_RCC_OscConfig+0x4d4>)
 8001534:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001536:	f003 0302 	and.w	r3, r3, #2
 800153a:	2b00      	cmp	r3, #0
 800153c:	d0f0      	beq.n	8001520 <HAL_RCC_OscConfig+0x38c>
 800153e:	e015      	b.n	800156c <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001540:	4b4e      	ldr	r3, [pc, #312]	; (800167c <HAL_RCC_OscConfig+0x4e8>)
 8001542:	2200      	movs	r2, #0
 8001544:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001546:	f7ff facd 	bl	8000ae4 <HAL_GetTick>
 800154a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800154c:	e008      	b.n	8001560 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800154e:	f7ff fac9 	bl	8000ae4 <HAL_GetTick>
 8001552:	4602      	mov	r2, r0
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	1ad3      	subs	r3, r2, r3
 8001558:	2b02      	cmp	r3, #2
 800155a:	d901      	bls.n	8001560 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800155c:	2303      	movs	r3, #3
 800155e:	e140      	b.n	80017e2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001560:	4b41      	ldr	r3, [pc, #260]	; (8001668 <HAL_RCC_OscConfig+0x4d4>)
 8001562:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001564:	f003 0302 	and.w	r3, r3, #2
 8001568:	2b00      	cmp	r3, #0
 800156a:	d1f0      	bne.n	800154e <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f003 0304 	and.w	r3, r3, #4
 8001574:	2b00      	cmp	r3, #0
 8001576:	f000 80b5 	beq.w	80016e4 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 800157a:	2300      	movs	r3, #0
 800157c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800157e:	4b3a      	ldr	r3, [pc, #232]	; (8001668 <HAL_RCC_OscConfig+0x4d4>)
 8001580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001582:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001586:	2b00      	cmp	r3, #0
 8001588:	d10d      	bne.n	80015a6 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800158a:	4b37      	ldr	r3, [pc, #220]	; (8001668 <HAL_RCC_OscConfig+0x4d4>)
 800158c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800158e:	4a36      	ldr	r2, [pc, #216]	; (8001668 <HAL_RCC_OscConfig+0x4d4>)
 8001590:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001594:	6253      	str	r3, [r2, #36]	; 0x24
 8001596:	4b34      	ldr	r3, [pc, #208]	; (8001668 <HAL_RCC_OscConfig+0x4d4>)
 8001598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800159a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800159e:	60bb      	str	r3, [r7, #8]
 80015a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015a2:	2301      	movs	r3, #1
 80015a4:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015a6:	4b36      	ldr	r3, [pc, #216]	; (8001680 <HAL_RCC_OscConfig+0x4ec>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d118      	bne.n	80015e4 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015b2:	4b33      	ldr	r3, [pc, #204]	; (8001680 <HAL_RCC_OscConfig+0x4ec>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a32      	ldr	r2, [pc, #200]	; (8001680 <HAL_RCC_OscConfig+0x4ec>)
 80015b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015be:	f7ff fa91 	bl	8000ae4 <HAL_GetTick>
 80015c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015c4:	e008      	b.n	80015d8 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015c6:	f7ff fa8d 	bl	8000ae4 <HAL_GetTick>
 80015ca:	4602      	mov	r2, r0
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	1ad3      	subs	r3, r2, r3
 80015d0:	2b64      	cmp	r3, #100	; 0x64
 80015d2:	d901      	bls.n	80015d8 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80015d4:	2303      	movs	r3, #3
 80015d6:	e104      	b.n	80017e2 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015d8:	4b29      	ldr	r3, [pc, #164]	; (8001680 <HAL_RCC_OscConfig+0x4ec>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d0f0      	beq.n	80015c6 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d106      	bne.n	80015fa <HAL_RCC_OscConfig+0x466>
 80015ec:	4b1e      	ldr	r3, [pc, #120]	; (8001668 <HAL_RCC_OscConfig+0x4d4>)
 80015ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015f0:	4a1d      	ldr	r2, [pc, #116]	; (8001668 <HAL_RCC_OscConfig+0x4d4>)
 80015f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015f6:	6353      	str	r3, [r2, #52]	; 0x34
 80015f8:	e02d      	b.n	8001656 <HAL_RCC_OscConfig+0x4c2>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d10c      	bne.n	800161c <HAL_RCC_OscConfig+0x488>
 8001602:	4b19      	ldr	r3, [pc, #100]	; (8001668 <HAL_RCC_OscConfig+0x4d4>)
 8001604:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001606:	4a18      	ldr	r2, [pc, #96]	; (8001668 <HAL_RCC_OscConfig+0x4d4>)
 8001608:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800160c:	6353      	str	r3, [r2, #52]	; 0x34
 800160e:	4b16      	ldr	r3, [pc, #88]	; (8001668 <HAL_RCC_OscConfig+0x4d4>)
 8001610:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001612:	4a15      	ldr	r2, [pc, #84]	; (8001668 <HAL_RCC_OscConfig+0x4d4>)
 8001614:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001618:	6353      	str	r3, [r2, #52]	; 0x34
 800161a:	e01c      	b.n	8001656 <HAL_RCC_OscConfig+0x4c2>
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	2b05      	cmp	r3, #5
 8001622:	d10c      	bne.n	800163e <HAL_RCC_OscConfig+0x4aa>
 8001624:	4b10      	ldr	r3, [pc, #64]	; (8001668 <HAL_RCC_OscConfig+0x4d4>)
 8001626:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001628:	4a0f      	ldr	r2, [pc, #60]	; (8001668 <HAL_RCC_OscConfig+0x4d4>)
 800162a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800162e:	6353      	str	r3, [r2, #52]	; 0x34
 8001630:	4b0d      	ldr	r3, [pc, #52]	; (8001668 <HAL_RCC_OscConfig+0x4d4>)
 8001632:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001634:	4a0c      	ldr	r2, [pc, #48]	; (8001668 <HAL_RCC_OscConfig+0x4d4>)
 8001636:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800163a:	6353      	str	r3, [r2, #52]	; 0x34
 800163c:	e00b      	b.n	8001656 <HAL_RCC_OscConfig+0x4c2>
 800163e:	4b0a      	ldr	r3, [pc, #40]	; (8001668 <HAL_RCC_OscConfig+0x4d4>)
 8001640:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001642:	4a09      	ldr	r2, [pc, #36]	; (8001668 <HAL_RCC_OscConfig+0x4d4>)
 8001644:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001648:	6353      	str	r3, [r2, #52]	; 0x34
 800164a:	4b07      	ldr	r3, [pc, #28]	; (8001668 <HAL_RCC_OscConfig+0x4d4>)
 800164c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800164e:	4a06      	ldr	r2, [pc, #24]	; (8001668 <HAL_RCC_OscConfig+0x4d4>)
 8001650:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001654:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d024      	beq.n	80016a8 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800165e:	f7ff fa41 	bl	8000ae4 <HAL_GetTick>
 8001662:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001664:	e019      	b.n	800169a <HAL_RCC_OscConfig+0x506>
 8001666:	bf00      	nop
 8001668:	40023800 	.word	0x40023800
 800166c:	08004244 	.word	0x08004244
 8001670:	20000000 	.word	0x20000000
 8001674:	20000004 	.word	0x20000004
 8001678:	42470020 	.word	0x42470020
 800167c:	42470680 	.word	0x42470680
 8001680:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001684:	f7ff fa2e 	bl	8000ae4 <HAL_GetTick>
 8001688:	4602      	mov	r2, r0
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001692:	4293      	cmp	r3, r2
 8001694:	d901      	bls.n	800169a <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8001696:	2303      	movs	r3, #3
 8001698:	e0a3      	b.n	80017e2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800169a:	4b54      	ldr	r3, [pc, #336]	; (80017ec <HAL_RCC_OscConfig+0x658>)
 800169c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800169e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d0ee      	beq.n	8001684 <HAL_RCC_OscConfig+0x4f0>
 80016a6:	e014      	b.n	80016d2 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016a8:	f7ff fa1c 	bl	8000ae4 <HAL_GetTick>
 80016ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80016ae:	e00a      	b.n	80016c6 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016b0:	f7ff fa18 	bl	8000ae4 <HAL_GetTick>
 80016b4:	4602      	mov	r2, r0
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80016be:	4293      	cmp	r3, r2
 80016c0:	d901      	bls.n	80016c6 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 80016c2:	2303      	movs	r3, #3
 80016c4:	e08d      	b.n	80017e2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80016c6:	4b49      	ldr	r3, [pc, #292]	; (80017ec <HAL_RCC_OscConfig+0x658>)
 80016c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d1ee      	bne.n	80016b0 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80016d2:	7ffb      	ldrb	r3, [r7, #31]
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d105      	bne.n	80016e4 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016d8:	4b44      	ldr	r3, [pc, #272]	; (80017ec <HAL_RCC_OscConfig+0x658>)
 80016da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016dc:	4a43      	ldr	r2, [pc, #268]	; (80017ec <HAL_RCC_OscConfig+0x658>)
 80016de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016e2:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d079      	beq.n	80017e0 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016ec:	69bb      	ldr	r3, [r7, #24]
 80016ee:	2b0c      	cmp	r3, #12
 80016f0:	d056      	beq.n	80017a0 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f6:	2b02      	cmp	r3, #2
 80016f8:	d13b      	bne.n	8001772 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016fa:	4b3d      	ldr	r3, [pc, #244]	; (80017f0 <HAL_RCC_OscConfig+0x65c>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001700:	f7ff f9f0 	bl	8000ae4 <HAL_GetTick>
 8001704:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001706:	e008      	b.n	800171a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001708:	f7ff f9ec 	bl	8000ae4 <HAL_GetTick>
 800170c:	4602      	mov	r2, r0
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	2b02      	cmp	r3, #2
 8001714:	d901      	bls.n	800171a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001716:	2303      	movs	r3, #3
 8001718:	e063      	b.n	80017e2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800171a:	4b34      	ldr	r3, [pc, #208]	; (80017ec <HAL_RCC_OscConfig+0x658>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001722:	2b00      	cmp	r3, #0
 8001724:	d1f0      	bne.n	8001708 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001726:	4b31      	ldr	r3, [pc, #196]	; (80017ec <HAL_RCC_OscConfig+0x658>)
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001736:	4319      	orrs	r1, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173c:	430b      	orrs	r3, r1
 800173e:	492b      	ldr	r1, [pc, #172]	; (80017ec <HAL_RCC_OscConfig+0x658>)
 8001740:	4313      	orrs	r3, r2
 8001742:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001744:	4b2a      	ldr	r3, [pc, #168]	; (80017f0 <HAL_RCC_OscConfig+0x65c>)
 8001746:	2201      	movs	r2, #1
 8001748:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800174a:	f7ff f9cb 	bl	8000ae4 <HAL_GetTick>
 800174e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001750:	e008      	b.n	8001764 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001752:	f7ff f9c7 	bl	8000ae4 <HAL_GetTick>
 8001756:	4602      	mov	r2, r0
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	1ad3      	subs	r3, r2, r3
 800175c:	2b02      	cmp	r3, #2
 800175e:	d901      	bls.n	8001764 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8001760:	2303      	movs	r3, #3
 8001762:	e03e      	b.n	80017e2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001764:	4b21      	ldr	r3, [pc, #132]	; (80017ec <HAL_RCC_OscConfig+0x658>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800176c:	2b00      	cmp	r3, #0
 800176e:	d0f0      	beq.n	8001752 <HAL_RCC_OscConfig+0x5be>
 8001770:	e036      	b.n	80017e0 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001772:	4b1f      	ldr	r3, [pc, #124]	; (80017f0 <HAL_RCC_OscConfig+0x65c>)
 8001774:	2200      	movs	r2, #0
 8001776:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001778:	f7ff f9b4 	bl	8000ae4 <HAL_GetTick>
 800177c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800177e:	e008      	b.n	8001792 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001780:	f7ff f9b0 	bl	8000ae4 <HAL_GetTick>
 8001784:	4602      	mov	r2, r0
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	2b02      	cmp	r3, #2
 800178c:	d901      	bls.n	8001792 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 800178e:	2303      	movs	r3, #3
 8001790:	e027      	b.n	80017e2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001792:	4b16      	ldr	r3, [pc, #88]	; (80017ec <HAL_RCC_OscConfig+0x658>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800179a:	2b00      	cmp	r3, #0
 800179c:	d1f0      	bne.n	8001780 <HAL_RCC_OscConfig+0x5ec>
 800179e:	e01f      	b.n	80017e0 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d101      	bne.n	80017ac <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	e01a      	b.n	80017e2 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80017ac:	4b0f      	ldr	r3, [pc, #60]	; (80017ec <HAL_RCC_OscConfig+0x658>)
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017bc:	429a      	cmp	r2, r3
 80017be:	d10d      	bne.n	80017dc <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017ca:	429a      	cmp	r2, r3
 80017cc:	d106      	bne.n	80017dc <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80017d8:	429a      	cmp	r2, r3
 80017da:	d001      	beq.n	80017e0 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 80017dc:	2301      	movs	r3, #1
 80017de:	e000      	b.n	80017e2 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 80017e0:	2300      	movs	r3, #0
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3720      	adds	r7, #32
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	40023800 	.word	0x40023800
 80017f0:	42470060 	.word	0x42470060

080017f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b084      	sub	sp, #16
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
 80017fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d101      	bne.n	8001808 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001804:	2301      	movs	r3, #1
 8001806:	e11a      	b.n	8001a3e <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001808:	4b8f      	ldr	r3, [pc, #572]	; (8001a48 <HAL_RCC_ClockConfig+0x254>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 0301 	and.w	r3, r3, #1
 8001810:	683a      	ldr	r2, [r7, #0]
 8001812:	429a      	cmp	r2, r3
 8001814:	d919      	bls.n	800184a <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	2b01      	cmp	r3, #1
 800181a:	d105      	bne.n	8001828 <HAL_RCC_ClockConfig+0x34>
 800181c:	4b8a      	ldr	r3, [pc, #552]	; (8001a48 <HAL_RCC_ClockConfig+0x254>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a89      	ldr	r2, [pc, #548]	; (8001a48 <HAL_RCC_ClockConfig+0x254>)
 8001822:	f043 0304 	orr.w	r3, r3, #4
 8001826:	6013      	str	r3, [r2, #0]
 8001828:	4b87      	ldr	r3, [pc, #540]	; (8001a48 <HAL_RCC_ClockConfig+0x254>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f023 0201 	bic.w	r2, r3, #1
 8001830:	4985      	ldr	r1, [pc, #532]	; (8001a48 <HAL_RCC_ClockConfig+0x254>)
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	4313      	orrs	r3, r2
 8001836:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001838:	4b83      	ldr	r3, [pc, #524]	; (8001a48 <HAL_RCC_ClockConfig+0x254>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 0301 	and.w	r3, r3, #1
 8001840:	683a      	ldr	r2, [r7, #0]
 8001842:	429a      	cmp	r2, r3
 8001844:	d001      	beq.n	800184a <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e0f9      	b.n	8001a3e <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 0302 	and.w	r3, r3, #2
 8001852:	2b00      	cmp	r3, #0
 8001854:	d008      	beq.n	8001868 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001856:	4b7d      	ldr	r3, [pc, #500]	; (8001a4c <HAL_RCC_ClockConfig+0x258>)
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	497a      	ldr	r1, [pc, #488]	; (8001a4c <HAL_RCC_ClockConfig+0x258>)
 8001864:	4313      	orrs	r3, r2
 8001866:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 0301 	and.w	r3, r3, #1
 8001870:	2b00      	cmp	r3, #0
 8001872:	f000 808e 	beq.w	8001992 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	2b02      	cmp	r3, #2
 800187c:	d107      	bne.n	800188e <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800187e:	4b73      	ldr	r3, [pc, #460]	; (8001a4c <HAL_RCC_ClockConfig+0x258>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d121      	bne.n	80018ce <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e0d7      	b.n	8001a3e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	2b03      	cmp	r3, #3
 8001894:	d107      	bne.n	80018a6 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001896:	4b6d      	ldr	r3, [pc, #436]	; (8001a4c <HAL_RCC_ClockConfig+0x258>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d115      	bne.n	80018ce <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	e0cb      	b.n	8001a3e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d107      	bne.n	80018be <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80018ae:	4b67      	ldr	r3, [pc, #412]	; (8001a4c <HAL_RCC_ClockConfig+0x258>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 0302 	and.w	r3, r3, #2
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d109      	bne.n	80018ce <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e0bf      	b.n	8001a3e <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80018be:	4b63      	ldr	r3, [pc, #396]	; (8001a4c <HAL_RCC_ClockConfig+0x258>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d101      	bne.n	80018ce <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e0b7      	b.n	8001a3e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018ce:	4b5f      	ldr	r3, [pc, #380]	; (8001a4c <HAL_RCC_ClockConfig+0x258>)
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	f023 0203 	bic.w	r2, r3, #3
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	495c      	ldr	r1, [pc, #368]	; (8001a4c <HAL_RCC_ClockConfig+0x258>)
 80018dc:	4313      	orrs	r3, r2
 80018de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018e0:	f7ff f900 	bl	8000ae4 <HAL_GetTick>
 80018e4:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	2b02      	cmp	r3, #2
 80018ec:	d112      	bne.n	8001914 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80018ee:	e00a      	b.n	8001906 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018f0:	f7ff f8f8 	bl	8000ae4 <HAL_GetTick>
 80018f4:	4602      	mov	r2, r0
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80018fe:	4293      	cmp	r3, r2
 8001900:	d901      	bls.n	8001906 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8001902:	2303      	movs	r3, #3
 8001904:	e09b      	b.n	8001a3e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001906:	4b51      	ldr	r3, [pc, #324]	; (8001a4c <HAL_RCC_ClockConfig+0x258>)
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	f003 030c 	and.w	r3, r3, #12
 800190e:	2b08      	cmp	r3, #8
 8001910:	d1ee      	bne.n	80018f0 <HAL_RCC_ClockConfig+0xfc>
 8001912:	e03e      	b.n	8001992 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	2b03      	cmp	r3, #3
 800191a:	d112      	bne.n	8001942 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800191c:	e00a      	b.n	8001934 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800191e:	f7ff f8e1 	bl	8000ae4 <HAL_GetTick>
 8001922:	4602      	mov	r2, r0
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	1ad3      	subs	r3, r2, r3
 8001928:	f241 3288 	movw	r2, #5000	; 0x1388
 800192c:	4293      	cmp	r3, r2
 800192e:	d901      	bls.n	8001934 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8001930:	2303      	movs	r3, #3
 8001932:	e084      	b.n	8001a3e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001934:	4b45      	ldr	r3, [pc, #276]	; (8001a4c <HAL_RCC_ClockConfig+0x258>)
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	f003 030c 	and.w	r3, r3, #12
 800193c:	2b0c      	cmp	r3, #12
 800193e:	d1ee      	bne.n	800191e <HAL_RCC_ClockConfig+0x12a>
 8001940:	e027      	b.n	8001992 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	2b01      	cmp	r3, #1
 8001948:	d11d      	bne.n	8001986 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800194a:	e00a      	b.n	8001962 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800194c:	f7ff f8ca 	bl	8000ae4 <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	f241 3288 	movw	r2, #5000	; 0x1388
 800195a:	4293      	cmp	r3, r2
 800195c:	d901      	bls.n	8001962 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 800195e:	2303      	movs	r3, #3
 8001960:	e06d      	b.n	8001a3e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001962:	4b3a      	ldr	r3, [pc, #232]	; (8001a4c <HAL_RCC_ClockConfig+0x258>)
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	f003 030c 	and.w	r3, r3, #12
 800196a:	2b04      	cmp	r3, #4
 800196c:	d1ee      	bne.n	800194c <HAL_RCC_ClockConfig+0x158>
 800196e:	e010      	b.n	8001992 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001970:	f7ff f8b8 	bl	8000ae4 <HAL_GetTick>
 8001974:	4602      	mov	r2, r0
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	f241 3288 	movw	r2, #5000	; 0x1388
 800197e:	4293      	cmp	r3, r2
 8001980:	d901      	bls.n	8001986 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8001982:	2303      	movs	r3, #3
 8001984:	e05b      	b.n	8001a3e <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001986:	4b31      	ldr	r3, [pc, #196]	; (8001a4c <HAL_RCC_ClockConfig+0x258>)
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	f003 030c 	and.w	r3, r3, #12
 800198e:	2b00      	cmp	r3, #0
 8001990:	d1ee      	bne.n	8001970 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001992:	4b2d      	ldr	r3, [pc, #180]	; (8001a48 <HAL_RCC_ClockConfig+0x254>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0301 	and.w	r3, r3, #1
 800199a:	683a      	ldr	r2, [r7, #0]
 800199c:	429a      	cmp	r2, r3
 800199e:	d219      	bcs.n	80019d4 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d105      	bne.n	80019b2 <HAL_RCC_ClockConfig+0x1be>
 80019a6:	4b28      	ldr	r3, [pc, #160]	; (8001a48 <HAL_RCC_ClockConfig+0x254>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a27      	ldr	r2, [pc, #156]	; (8001a48 <HAL_RCC_ClockConfig+0x254>)
 80019ac:	f043 0304 	orr.w	r3, r3, #4
 80019b0:	6013      	str	r3, [r2, #0]
 80019b2:	4b25      	ldr	r3, [pc, #148]	; (8001a48 <HAL_RCC_ClockConfig+0x254>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f023 0201 	bic.w	r2, r3, #1
 80019ba:	4923      	ldr	r1, [pc, #140]	; (8001a48 <HAL_RCC_ClockConfig+0x254>)
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	4313      	orrs	r3, r2
 80019c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019c2:	4b21      	ldr	r3, [pc, #132]	; (8001a48 <HAL_RCC_ClockConfig+0x254>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 0301 	and.w	r3, r3, #1
 80019ca:	683a      	ldr	r2, [r7, #0]
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d001      	beq.n	80019d4 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	e034      	b.n	8001a3e <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 0304 	and.w	r3, r3, #4
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d008      	beq.n	80019f2 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019e0:	4b1a      	ldr	r3, [pc, #104]	; (8001a4c <HAL_RCC_ClockConfig+0x258>)
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	4917      	ldr	r1, [pc, #92]	; (8001a4c <HAL_RCC_ClockConfig+0x258>)
 80019ee:	4313      	orrs	r3, r2
 80019f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 0308 	and.w	r3, r3, #8
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d009      	beq.n	8001a12 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019fe:	4b13      	ldr	r3, [pc, #76]	; (8001a4c <HAL_RCC_ClockConfig+0x258>)
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	691b      	ldr	r3, [r3, #16]
 8001a0a:	00db      	lsls	r3, r3, #3
 8001a0c:	490f      	ldr	r1, [pc, #60]	; (8001a4c <HAL_RCC_ClockConfig+0x258>)
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a12:	f000 f823 	bl	8001a5c <HAL_RCC_GetSysClockFreq>
 8001a16:	4602      	mov	r2, r0
 8001a18:	4b0c      	ldr	r3, [pc, #48]	; (8001a4c <HAL_RCC_ClockConfig+0x258>)
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	091b      	lsrs	r3, r3, #4
 8001a1e:	f003 030f 	and.w	r3, r3, #15
 8001a22:	490b      	ldr	r1, [pc, #44]	; (8001a50 <HAL_RCC_ClockConfig+0x25c>)
 8001a24:	5ccb      	ldrb	r3, [r1, r3]
 8001a26:	fa22 f303 	lsr.w	r3, r2, r3
 8001a2a:	4a0a      	ldr	r2, [pc, #40]	; (8001a54 <HAL_RCC_ClockConfig+0x260>)
 8001a2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001a2e:	4b0a      	ldr	r3, [pc, #40]	; (8001a58 <HAL_RCC_ClockConfig+0x264>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4618      	mov	r0, r3
 8001a34:	f7ff f80a 	bl	8000a4c <HAL_InitTick>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	72fb      	strb	r3, [r7, #11]

  return status;
 8001a3c:	7afb      	ldrb	r3, [r7, #11]
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3710      	adds	r7, #16
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	40023c00 	.word	0x40023c00
 8001a4c:	40023800 	.word	0x40023800
 8001a50:	08004244 	.word	0x08004244
 8001a54:	20000000 	.word	0x20000000
 8001a58:	20000004 	.word	0x20000004

08001a5c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a60:	b092      	sub	sp, #72	; 0x48
 8001a62:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8001a64:	4b79      	ldr	r3, [pc, #484]	; (8001c4c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a6c:	f003 030c 	and.w	r3, r3, #12
 8001a70:	2b0c      	cmp	r3, #12
 8001a72:	d00d      	beq.n	8001a90 <HAL_RCC_GetSysClockFreq+0x34>
 8001a74:	2b0c      	cmp	r3, #12
 8001a76:	f200 80d5 	bhi.w	8001c24 <HAL_RCC_GetSysClockFreq+0x1c8>
 8001a7a:	2b04      	cmp	r3, #4
 8001a7c:	d002      	beq.n	8001a84 <HAL_RCC_GetSysClockFreq+0x28>
 8001a7e:	2b08      	cmp	r3, #8
 8001a80:	d003      	beq.n	8001a8a <HAL_RCC_GetSysClockFreq+0x2e>
 8001a82:	e0cf      	b.n	8001c24 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a84:	4b72      	ldr	r3, [pc, #456]	; (8001c50 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8001a86:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8001a88:	e0da      	b.n	8001c40 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a8a:	4b72      	ldr	r3, [pc, #456]	; (8001c54 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8001a8c:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8001a8e:	e0d7      	b.n	8001c40 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001a90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a92:	0c9b      	lsrs	r3, r3, #18
 8001a94:	f003 020f 	and.w	r2, r3, #15
 8001a98:	4b6f      	ldr	r3, [pc, #444]	; (8001c58 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8001a9a:	5c9b      	ldrb	r3, [r3, r2]
 8001a9c:	63bb      	str	r3, [r7, #56]	; 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001a9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001aa0:	0d9b      	lsrs	r3, r3, #22
 8001aa2:	f003 0303 	and.w	r3, r3, #3
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001aaa:	4b68      	ldr	r3, [pc, #416]	; (8001c4c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d05d      	beq.n	8001b72 <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ab8:	2200      	movs	r2, #0
 8001aba:	4618      	mov	r0, r3
 8001abc:	4611      	mov	r1, r2
 8001abe:	4604      	mov	r4, r0
 8001ac0:	460d      	mov	r5, r1
 8001ac2:	4622      	mov	r2, r4
 8001ac4:	462b      	mov	r3, r5
 8001ac6:	f04f 0000 	mov.w	r0, #0
 8001aca:	f04f 0100 	mov.w	r1, #0
 8001ace:	0159      	lsls	r1, r3, #5
 8001ad0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ad4:	0150      	lsls	r0, r2, #5
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	460b      	mov	r3, r1
 8001ada:	4621      	mov	r1, r4
 8001adc:	1a51      	subs	r1, r2, r1
 8001ade:	6139      	str	r1, [r7, #16]
 8001ae0:	4629      	mov	r1, r5
 8001ae2:	eb63 0301 	sbc.w	r3, r3, r1
 8001ae6:	617b      	str	r3, [r7, #20]
 8001ae8:	f04f 0200 	mov.w	r2, #0
 8001aec:	f04f 0300 	mov.w	r3, #0
 8001af0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001af4:	4659      	mov	r1, fp
 8001af6:	018b      	lsls	r3, r1, #6
 8001af8:	4651      	mov	r1, sl
 8001afa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001afe:	4651      	mov	r1, sl
 8001b00:	018a      	lsls	r2, r1, #6
 8001b02:	46d4      	mov	ip, sl
 8001b04:	ebb2 080c 	subs.w	r8, r2, ip
 8001b08:	4659      	mov	r1, fp
 8001b0a:	eb63 0901 	sbc.w	r9, r3, r1
 8001b0e:	f04f 0200 	mov.w	r2, #0
 8001b12:	f04f 0300 	mov.w	r3, #0
 8001b16:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b1a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b1e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b22:	4690      	mov	r8, r2
 8001b24:	4699      	mov	r9, r3
 8001b26:	4623      	mov	r3, r4
 8001b28:	eb18 0303 	adds.w	r3, r8, r3
 8001b2c:	60bb      	str	r3, [r7, #8]
 8001b2e:	462b      	mov	r3, r5
 8001b30:	eb49 0303 	adc.w	r3, r9, r3
 8001b34:	60fb      	str	r3, [r7, #12]
 8001b36:	f04f 0200 	mov.w	r2, #0
 8001b3a:	f04f 0300 	mov.w	r3, #0
 8001b3e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001b42:	4629      	mov	r1, r5
 8001b44:	024b      	lsls	r3, r1, #9
 8001b46:	4620      	mov	r0, r4
 8001b48:	4629      	mov	r1, r5
 8001b4a:	4604      	mov	r4, r0
 8001b4c:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8001b50:	4601      	mov	r1, r0
 8001b52:	024a      	lsls	r2, r1, #9
 8001b54:	4610      	mov	r0, r2
 8001b56:	4619      	mov	r1, r3
 8001b58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b5e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001b60:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001b64:	f7fe fb12 	bl	800018c <__aeabi_uldivmod>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	460b      	mov	r3, r1
 8001b6c:	4613      	mov	r3, r2
 8001b6e:	647b      	str	r3, [r7, #68]	; 0x44
 8001b70:	e055      	b.n	8001c1e <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b74:	2200      	movs	r2, #0
 8001b76:	623b      	str	r3, [r7, #32]
 8001b78:	627a      	str	r2, [r7, #36]	; 0x24
 8001b7a:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001b7e:	4642      	mov	r2, r8
 8001b80:	464b      	mov	r3, r9
 8001b82:	f04f 0000 	mov.w	r0, #0
 8001b86:	f04f 0100 	mov.w	r1, #0
 8001b8a:	0159      	lsls	r1, r3, #5
 8001b8c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b90:	0150      	lsls	r0, r2, #5
 8001b92:	4602      	mov	r2, r0
 8001b94:	460b      	mov	r3, r1
 8001b96:	46c4      	mov	ip, r8
 8001b98:	ebb2 0a0c 	subs.w	sl, r2, ip
 8001b9c:	4640      	mov	r0, r8
 8001b9e:	4649      	mov	r1, r9
 8001ba0:	468c      	mov	ip, r1
 8001ba2:	eb63 0b0c 	sbc.w	fp, r3, ip
 8001ba6:	f04f 0200 	mov.w	r2, #0
 8001baa:	f04f 0300 	mov.w	r3, #0
 8001bae:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001bb2:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001bb6:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001bba:	ebb2 040a 	subs.w	r4, r2, sl
 8001bbe:	eb63 050b 	sbc.w	r5, r3, fp
 8001bc2:	f04f 0200 	mov.w	r2, #0
 8001bc6:	f04f 0300 	mov.w	r3, #0
 8001bca:	00eb      	lsls	r3, r5, #3
 8001bcc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001bd0:	00e2      	lsls	r2, r4, #3
 8001bd2:	4614      	mov	r4, r2
 8001bd4:	461d      	mov	r5, r3
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	18e3      	adds	r3, r4, r3
 8001bda:	603b      	str	r3, [r7, #0]
 8001bdc:	460b      	mov	r3, r1
 8001bde:	eb45 0303 	adc.w	r3, r5, r3
 8001be2:	607b      	str	r3, [r7, #4]
 8001be4:	f04f 0200 	mov.w	r2, #0
 8001be8:	f04f 0300 	mov.w	r3, #0
 8001bec:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001bf0:	4629      	mov	r1, r5
 8001bf2:	028b      	lsls	r3, r1, #10
 8001bf4:	4620      	mov	r0, r4
 8001bf6:	4629      	mov	r1, r5
 8001bf8:	4604      	mov	r4, r0
 8001bfa:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8001bfe:	4601      	mov	r1, r0
 8001c00:	028a      	lsls	r2, r1, #10
 8001c02:	4610      	mov	r0, r2
 8001c04:	4619      	mov	r1, r3
 8001c06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c08:	2200      	movs	r2, #0
 8001c0a:	61bb      	str	r3, [r7, #24]
 8001c0c:	61fa      	str	r2, [r7, #28]
 8001c0e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c12:	f7fe fabb 	bl	800018c <__aeabi_uldivmod>
 8001c16:	4602      	mov	r2, r0
 8001c18:	460b      	mov	r3, r1
 8001c1a:	4613      	mov	r3, r2
 8001c1c:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllvco;
 8001c1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c20:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8001c22:	e00d      	b.n	8001c40 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001c24:	4b09      	ldr	r3, [pc, #36]	; (8001c4c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	0b5b      	lsrs	r3, r3, #13
 8001c2a:	f003 0307 	and.w	r3, r3, #7
 8001c2e:	633b      	str	r3, [r7, #48]	; 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c32:	3301      	adds	r3, #1
 8001c34:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001c38:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3c:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8001c3e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3748      	adds	r7, #72	; 0x48
 8001c46:	46bd      	mov	sp, r7
 8001c48:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c4c:	40023800 	.word	0x40023800
 8001c50:	00f42400 	.word	0x00f42400
 8001c54:	007a1200 	.word	0x007a1200
 8001c58:	08004238 	.word	0x08004238

08001c5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c60:	4b02      	ldr	r3, [pc, #8]	; (8001c6c <HAL_RCC_GetHCLKFreq+0x10>)
 8001c62:	681b      	ldr	r3, [r3, #0]
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bc80      	pop	{r7}
 8001c6a:	4770      	bx	lr
 8001c6c:	20000000 	.word	0x20000000

08001c70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c74:	f7ff fff2 	bl	8001c5c <HAL_RCC_GetHCLKFreq>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	4b05      	ldr	r3, [pc, #20]	; (8001c90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	0a1b      	lsrs	r3, r3, #8
 8001c80:	f003 0307 	and.w	r3, r3, #7
 8001c84:	4903      	ldr	r1, [pc, #12]	; (8001c94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c86:	5ccb      	ldrb	r3, [r1, r3]
 8001c88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	40023800 	.word	0x40023800
 8001c94:	08004254 	.word	0x08004254

08001c98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001c9c:	f7ff ffde 	bl	8001c5c <HAL_RCC_GetHCLKFreq>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	4b05      	ldr	r3, [pc, #20]	; (8001cb8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	0adb      	lsrs	r3, r3, #11
 8001ca8:	f003 0307 	and.w	r3, r3, #7
 8001cac:	4903      	ldr	r1, [pc, #12]	; (8001cbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cae:	5ccb      	ldrb	r3, [r1, r3]
 8001cb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	40023800 	.word	0x40023800
 8001cbc:	08004254 	.word	0x08004254

08001cc0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b087      	sub	sp, #28
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001cc8:	2300      	movs	r3, #0
 8001cca:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001ccc:	4b29      	ldr	r3, [pc, #164]	; (8001d74 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d12c      	bne.n	8001d32 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001cd8:	4b26      	ldr	r3, [pc, #152]	; (8001d74 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d005      	beq.n	8001cf0 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001ce4:	4b24      	ldr	r3, [pc, #144]	; (8001d78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8001cec:	617b      	str	r3, [r7, #20]
 8001cee:	e016      	b.n	8001d1e <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cf0:	4b20      	ldr	r3, [pc, #128]	; (8001d74 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf4:	4a1f      	ldr	r2, [pc, #124]	; (8001d74 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001cf6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cfa:	6253      	str	r3, [r2, #36]	; 0x24
 8001cfc:	4b1d      	ldr	r3, [pc, #116]	; (8001d74 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d04:	60fb      	str	r3, [r7, #12]
 8001d06:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001d08:	4b1b      	ldr	r3, [pc, #108]	; (8001d78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8001d10:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d12:	4b18      	ldr	r3, [pc, #96]	; (8001d74 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d16:	4a17      	ldr	r2, [pc, #92]	; (8001d74 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001d18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d1c:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8001d24:	d105      	bne.n	8001d32 <RCC_SetFlashLatencyFromMSIRange+0x72>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001d2c:	d101      	bne.n	8001d32 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8001d2e:	2301      	movs	r3, #1
 8001d30:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d105      	bne.n	8001d44 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8001d38:	4b10      	ldr	r3, [pc, #64]	; (8001d7c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a0f      	ldr	r2, [pc, #60]	; (8001d7c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d3e:	f043 0304 	orr.w	r3, r3, #4
 8001d42:	6013      	str	r3, [r2, #0]
 8001d44:	4b0d      	ldr	r3, [pc, #52]	; (8001d7c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f023 0201 	bic.w	r2, r3, #1
 8001d4c:	490b      	ldr	r1, [pc, #44]	; (8001d7c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	4313      	orrs	r3, r2
 8001d52:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001d54:	4b09      	ldr	r3, [pc, #36]	; (8001d7c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 0301 	and.w	r3, r3, #1
 8001d5c:	693a      	ldr	r2, [r7, #16]
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d001      	beq.n	8001d66 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e000      	b.n	8001d68 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8001d66:	2300      	movs	r3, #0
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	371c      	adds	r7, #28
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bc80      	pop	{r7}
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	40023800 	.word	0x40023800
 8001d78:	40007000 	.word	0x40007000
 8001d7c:	40023c00 	.word	0x40023c00

08001d80 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d101      	bne.n	8001d92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e042      	b.n	8001e18 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d106      	bne.n	8001dac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2200      	movs	r2, #0
 8001da2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f7fe fdc6 	bl	8000938 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2224      	movs	r2, #36	; 0x24
 8001db0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	68da      	ldr	r2, [r3, #12]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001dc2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	f000 fcd5 	bl	8002774 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	691a      	ldr	r2, [r3, #16]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001dd8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	695a      	ldr	r2, [r3, #20]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001de8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	68da      	ldr	r2, [r3, #12]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001df8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2220      	movs	r2, #32
 8001e04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2220      	movs	r2, #32
 8001e0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2200      	movs	r2, #0
 8001e14:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001e16:	2300      	movs	r3, #0
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3708      	adds	r7, #8
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}

08001e20 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b084      	sub	sp, #16
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	60f8      	str	r0, [r7, #12]
 8001e28:	60b9      	str	r1, [r7, #8]
 8001e2a:	4613      	mov	r3, r2
 8001e2c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	2b20      	cmp	r3, #32
 8001e38:	d112      	bne.n	8001e60 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d002      	beq.n	8001e46 <HAL_UART_Receive_IT+0x26>
 8001e40:	88fb      	ldrh	r3, [r7, #6]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d101      	bne.n	8001e4a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e00b      	b.n	8001e62 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8001e50:	88fb      	ldrh	r3, [r7, #6]
 8001e52:	461a      	mov	r2, r3
 8001e54:	68b9      	ldr	r1, [r7, #8]
 8001e56:	68f8      	ldr	r0, [r7, #12]
 8001e58:	f000 fab7 	bl	80023ca <UART_Start_Receive_IT>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	e000      	b.n	8001e62 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8001e60:	2302      	movs	r3, #2
  }
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3710      	adds	r7, #16
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
	...

08001e6c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b0ba      	sub	sp, #232	; 0xe8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	695b      	ldr	r3, [r3, #20]
 8001e8e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8001e92:	2300      	movs	r3, #0
 8001e94:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001e9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001ea2:	f003 030f 	and.w	r3, r3, #15
 8001ea6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8001eaa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d10f      	bne.n	8001ed2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001eb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001eb6:	f003 0320 	and.w	r3, r3, #32
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d009      	beq.n	8001ed2 <HAL_UART_IRQHandler+0x66>
 8001ebe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001ec2:	f003 0320 	and.w	r3, r3, #32
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d003      	beq.n	8001ed2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f000 fb93 	bl	80025f6 <UART_Receive_IT>
      return;
 8001ed0:	e25b      	b.n	800238a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001ed2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	f000 80de 	beq.w	8002098 <HAL_UART_IRQHandler+0x22c>
 8001edc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001ee0:	f003 0301 	and.w	r3, r3, #1
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d106      	bne.n	8001ef6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001ee8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001eec:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	f000 80d1 	beq.w	8002098 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001ef6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001efa:	f003 0301 	and.w	r3, r3, #1
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d00b      	beq.n	8001f1a <HAL_UART_IRQHandler+0xae>
 8001f02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001f06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d005      	beq.n	8001f1a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f12:	f043 0201 	orr.w	r2, r3, #1
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001f1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001f1e:	f003 0304 	and.w	r3, r3, #4
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d00b      	beq.n	8001f3e <HAL_UART_IRQHandler+0xd2>
 8001f26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001f2a:	f003 0301 	and.w	r3, r3, #1
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d005      	beq.n	8001f3e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f36:	f043 0202 	orr.w	r2, r3, #2
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001f3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001f42:	f003 0302 	and.w	r3, r3, #2
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d00b      	beq.n	8001f62 <HAL_UART_IRQHandler+0xf6>
 8001f4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001f4e:	f003 0301 	and.w	r3, r3, #1
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d005      	beq.n	8001f62 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f5a:	f043 0204 	orr.w	r2, r3, #4
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8001f62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001f66:	f003 0308 	and.w	r3, r3, #8
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d011      	beq.n	8001f92 <HAL_UART_IRQHandler+0x126>
 8001f6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001f72:	f003 0320 	and.w	r3, r3, #32
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d105      	bne.n	8001f86 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8001f7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001f7e:	f003 0301 	and.w	r3, r3, #1
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d005      	beq.n	8001f92 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f8a:	f043 0208 	orr.w	r2, r3, #8
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	f000 81f2 	beq.w	8002380 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001f9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001fa0:	f003 0320 	and.w	r3, r3, #32
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d008      	beq.n	8001fba <HAL_UART_IRQHandler+0x14e>
 8001fa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001fac:	f003 0320 	and.w	r3, r3, #32
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d002      	beq.n	8001fba <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8001fb4:	6878      	ldr	r0, [r7, #4]
 8001fb6:	f000 fb1e 	bl	80025f6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	695b      	ldr	r3, [r3, #20]
 8001fc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fc4:	2b40      	cmp	r3, #64	; 0x40
 8001fc6:	bf0c      	ite	eq
 8001fc8:	2301      	moveq	r3, #1
 8001fca:	2300      	movne	r3, #0
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fd6:	f003 0308 	and.w	r3, r3, #8
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d103      	bne.n	8001fe6 <HAL_UART_IRQHandler+0x17a>
 8001fde:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d04f      	beq.n	8002086 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f000 fa28 	bl	800243c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	695b      	ldr	r3, [r3, #20]
 8001ff2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ff6:	2b40      	cmp	r3, #64	; 0x40
 8001ff8:	d141      	bne.n	800207e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	3314      	adds	r3, #20
 8002000:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002004:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002008:	e853 3f00 	ldrex	r3, [r3]
 800200c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002010:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002014:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002018:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	3314      	adds	r3, #20
 8002022:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002026:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800202a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800202e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002032:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002036:	e841 2300 	strex	r3, r2, [r1]
 800203a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800203e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d1d9      	bne.n	8001ffa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800204a:	2b00      	cmp	r3, #0
 800204c:	d013      	beq.n	8002076 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002052:	4a7e      	ldr	r2, [pc, #504]	; (800224c <HAL_UART_IRQHandler+0x3e0>)
 8002054:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800205a:	4618      	mov	r0, r3
 800205c:	f7fe fe96 	bl	8000d8c <HAL_DMA_Abort_IT>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d016      	beq.n	8002094 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800206a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800206c:	687a      	ldr	r2, [r7, #4]
 800206e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002070:	4610      	mov	r0, r2
 8002072:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002074:	e00e      	b.n	8002094 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f000 f993 	bl	80023a2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800207c:	e00a      	b.n	8002094 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f000 f98f 	bl	80023a2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002084:	e006      	b.n	8002094 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f000 f98b 	bl	80023a2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2200      	movs	r2, #0
 8002090:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8002092:	e175      	b.n	8002380 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002094:	bf00      	nop
    return;
 8002096:	e173      	b.n	8002380 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209c:	2b01      	cmp	r3, #1
 800209e:	f040 814f 	bne.w	8002340 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80020a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80020a6:	f003 0310 	and.w	r3, r3, #16
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	f000 8148 	beq.w	8002340 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80020b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80020b4:	f003 0310 	and.w	r3, r3, #16
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	f000 8141 	beq.w	8002340 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80020be:	2300      	movs	r3, #0
 80020c0:	60bb      	str	r3, [r7, #8]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	60bb      	str	r3, [r7, #8]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	60bb      	str	r3, [r7, #8]
 80020d2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	695b      	ldr	r3, [r3, #20]
 80020da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020de:	2b40      	cmp	r3, #64	; 0x40
 80020e0:	f040 80b6 	bne.w	8002250 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80020f0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	f000 8145 	beq.w	8002384 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80020fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002102:	429a      	cmp	r2, r3
 8002104:	f080 813e 	bcs.w	8002384 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800210e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002114:	699b      	ldr	r3, [r3, #24]
 8002116:	2b20      	cmp	r3, #32
 8002118:	f000 8088 	beq.w	800222c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	330c      	adds	r3, #12
 8002122:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002126:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800212a:	e853 3f00 	ldrex	r3, [r3]
 800212e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002132:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002136:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800213a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	330c      	adds	r3, #12
 8002144:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002148:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800214c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002150:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002154:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002158:	e841 2300 	strex	r3, r2, [r1]
 800215c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002160:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002164:	2b00      	cmp	r3, #0
 8002166:	d1d9      	bne.n	800211c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	3314      	adds	r3, #20
 800216e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002170:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002172:	e853 3f00 	ldrex	r3, [r3]
 8002176:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002178:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800217a:	f023 0301 	bic.w	r3, r3, #1
 800217e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	3314      	adds	r3, #20
 8002188:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800218c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002190:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002192:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002194:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002198:	e841 2300 	strex	r3, r2, [r1]
 800219c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800219e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d1e1      	bne.n	8002168 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	3314      	adds	r3, #20
 80021aa:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80021ae:	e853 3f00 	ldrex	r3, [r3]
 80021b2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80021b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80021ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	3314      	adds	r3, #20
 80021c4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80021c8:	66fa      	str	r2, [r7, #108]	; 0x6c
 80021ca:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021cc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80021ce:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80021d0:	e841 2300 	strex	r3, r2, [r1]
 80021d4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80021d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d1e3      	bne.n	80021a4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2220      	movs	r2, #32
 80021e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2200      	movs	r2, #0
 80021e8:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	330c      	adds	r3, #12
 80021f0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021f4:	e853 3f00 	ldrex	r3, [r3]
 80021f8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80021fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021fc:	f023 0310 	bic.w	r3, r3, #16
 8002200:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	330c      	adds	r3, #12
 800220a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800220e:	65ba      	str	r2, [r7, #88]	; 0x58
 8002210:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002212:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002214:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002216:	e841 2300 	strex	r3, r2, [r1]
 800221a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800221c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800221e:	2b00      	cmp	r3, #0
 8002220:	d1e3      	bne.n	80021ea <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002226:	4618      	mov	r0, r3
 8002228:	f7fe fd73 	bl	8000d12 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2202      	movs	r2, #2
 8002230:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800223a:	b29b      	uxth	r3, r3
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	b29b      	uxth	r3, r3
 8002240:	4619      	mov	r1, r3
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f000 f8b6 	bl	80023b4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002248:	e09c      	b.n	8002384 <HAL_UART_IRQHandler+0x518>
 800224a:	bf00      	nop
 800224c:	08002501 	.word	0x08002501
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002258:	b29b      	uxth	r3, r3
 800225a:	1ad3      	subs	r3, r2, r3
 800225c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002264:	b29b      	uxth	r3, r3
 8002266:	2b00      	cmp	r3, #0
 8002268:	f000 808e 	beq.w	8002388 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800226c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002270:	2b00      	cmp	r3, #0
 8002272:	f000 8089 	beq.w	8002388 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	330c      	adds	r3, #12
 800227c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800227e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002280:	e853 3f00 	ldrex	r3, [r3]
 8002284:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002286:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002288:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800228c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	330c      	adds	r3, #12
 8002296:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800229a:	647a      	str	r2, [r7, #68]	; 0x44
 800229c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800229e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80022a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80022a2:	e841 2300 	strex	r3, r2, [r1]
 80022a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80022a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d1e3      	bne.n	8002276 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	3314      	adds	r3, #20
 80022b4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b8:	e853 3f00 	ldrex	r3, [r3]
 80022bc:	623b      	str	r3, [r7, #32]
   return(result);
 80022be:	6a3b      	ldr	r3, [r7, #32]
 80022c0:	f023 0301 	bic.w	r3, r3, #1
 80022c4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	3314      	adds	r3, #20
 80022ce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80022d2:	633a      	str	r2, [r7, #48]	; 0x30
 80022d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80022d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80022da:	e841 2300 	strex	r3, r2, [r1]
 80022de:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80022e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d1e3      	bne.n	80022ae <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2220      	movs	r2, #32
 80022ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2200      	movs	r2, #0
 80022f2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	330c      	adds	r3, #12
 80022fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	e853 3f00 	ldrex	r3, [r3]
 8002302:	60fb      	str	r3, [r7, #12]
   return(result);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	f023 0310 	bic.w	r3, r3, #16
 800230a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	330c      	adds	r3, #12
 8002314:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002318:	61fa      	str	r2, [r7, #28]
 800231a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800231c:	69b9      	ldr	r1, [r7, #24]
 800231e:	69fa      	ldr	r2, [r7, #28]
 8002320:	e841 2300 	strex	r3, r2, [r1]
 8002324:	617b      	str	r3, [r7, #20]
   return(result);
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d1e3      	bne.n	80022f4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2202      	movs	r2, #2
 8002330:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002332:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002336:	4619      	mov	r1, r3
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	f000 f83b 	bl	80023b4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800233e:	e023      	b.n	8002388 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002340:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002344:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002348:	2b00      	cmp	r3, #0
 800234a:	d009      	beq.n	8002360 <HAL_UART_IRQHandler+0x4f4>
 800234c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002350:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002354:	2b00      	cmp	r3, #0
 8002356:	d003      	beq.n	8002360 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	f000 f8e5 	bl	8002528 <UART_Transmit_IT>
    return;
 800235e:	e014      	b.n	800238a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002360:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002364:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002368:	2b00      	cmp	r3, #0
 800236a:	d00e      	beq.n	800238a <HAL_UART_IRQHandler+0x51e>
 800236c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002370:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002374:	2b00      	cmp	r3, #0
 8002376:	d008      	beq.n	800238a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002378:	6878      	ldr	r0, [r7, #4]
 800237a:	f000 f924 	bl	80025c6 <UART_EndTransmit_IT>
    return;
 800237e:	e004      	b.n	800238a <HAL_UART_IRQHandler+0x51e>
    return;
 8002380:	bf00      	nop
 8002382:	e002      	b.n	800238a <HAL_UART_IRQHandler+0x51e>
      return;
 8002384:	bf00      	nop
 8002386:	e000      	b.n	800238a <HAL_UART_IRQHandler+0x51e>
      return;
 8002388:	bf00      	nop
  }
}
 800238a:	37e8      	adds	r7, #232	; 0xe8
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}

08002390 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002390:	b480      	push	{r7}
 8002392:	b083      	sub	sp, #12
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002398:	bf00      	nop
 800239a:	370c      	adds	r7, #12
 800239c:	46bd      	mov	sp, r7
 800239e:	bc80      	pop	{r7}
 80023a0:	4770      	bx	lr

080023a2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80023a2:	b480      	push	{r7}
 80023a4:	b083      	sub	sp, #12
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80023aa:	bf00      	nop
 80023ac:	370c      	adds	r7, #12
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bc80      	pop	{r7}
 80023b2:	4770      	bx	lr

080023b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	460b      	mov	r3, r1
 80023be:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80023c0:	bf00      	nop
 80023c2:	370c      	adds	r7, #12
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bc80      	pop	{r7}
 80023c8:	4770      	bx	lr

080023ca <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80023ca:	b480      	push	{r7}
 80023cc:	b085      	sub	sp, #20
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	60f8      	str	r0, [r7, #12]
 80023d2:	60b9      	str	r1, [r7, #8]
 80023d4:	4613      	mov	r3, r2
 80023d6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	68ba      	ldr	r2, [r7, #8]
 80023dc:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	88fa      	ldrh	r2, [r7, #6]
 80023e2:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	88fa      	ldrh	r2, [r7, #6]
 80023e8:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2200      	movs	r2, #0
 80023ee:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2222      	movs	r2, #34	; 0x22
 80023f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	691b      	ldr	r3, [r3, #16]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d007      	beq.n	8002410 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	68da      	ldr	r2, [r3, #12]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800240e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	695a      	ldr	r2, [r3, #20]
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f042 0201 	orr.w	r2, r2, #1
 800241e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	68da      	ldr	r2, [r3, #12]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f042 0220 	orr.w	r2, r2, #32
 800242e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002430:	2300      	movs	r3, #0
}
 8002432:	4618      	mov	r0, r3
 8002434:	3714      	adds	r7, #20
 8002436:	46bd      	mov	sp, r7
 8002438:	bc80      	pop	{r7}
 800243a:	4770      	bx	lr

0800243c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800243c:	b480      	push	{r7}
 800243e:	b095      	sub	sp, #84	; 0x54
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	330c      	adds	r3, #12
 800244a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800244c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800244e:	e853 3f00 	ldrex	r3, [r3]
 8002452:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002456:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800245a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	330c      	adds	r3, #12
 8002462:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002464:	643a      	str	r2, [r7, #64]	; 0x40
 8002466:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002468:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800246a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800246c:	e841 2300 	strex	r3, r2, [r1]
 8002470:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002474:	2b00      	cmp	r3, #0
 8002476:	d1e5      	bne.n	8002444 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	3314      	adds	r3, #20
 800247e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002480:	6a3b      	ldr	r3, [r7, #32]
 8002482:	e853 3f00 	ldrex	r3, [r3]
 8002486:	61fb      	str	r3, [r7, #28]
   return(result);
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	f023 0301 	bic.w	r3, r3, #1
 800248e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	3314      	adds	r3, #20
 8002496:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002498:	62fa      	str	r2, [r7, #44]	; 0x2c
 800249a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800249c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800249e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024a0:	e841 2300 	strex	r3, r2, [r1]
 80024a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80024a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d1e5      	bne.n	8002478 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	d119      	bne.n	80024e8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	330c      	adds	r3, #12
 80024ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	e853 3f00 	ldrex	r3, [r3]
 80024c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	f023 0310 	bic.w	r3, r3, #16
 80024ca:	647b      	str	r3, [r7, #68]	; 0x44
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	330c      	adds	r3, #12
 80024d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80024d4:	61ba      	str	r2, [r7, #24]
 80024d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024d8:	6979      	ldr	r1, [r7, #20]
 80024da:	69ba      	ldr	r2, [r7, #24]
 80024dc:	e841 2300 	strex	r3, r2, [r1]
 80024e0:	613b      	str	r3, [r7, #16]
   return(result);
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d1e5      	bne.n	80024b4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2220      	movs	r2, #32
 80024ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2200      	movs	r2, #0
 80024f4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80024f6:	bf00      	nop
 80024f8:	3754      	adds	r7, #84	; 0x54
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bc80      	pop	{r7}
 80024fe:	4770      	bx	lr

08002500 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b084      	sub	sp, #16
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800250c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	2200      	movs	r2, #0
 8002512:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	2200      	movs	r2, #0
 8002518:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800251a:	68f8      	ldr	r0, [r7, #12]
 800251c:	f7ff ff41 	bl	80023a2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002520:	bf00      	nop
 8002522:	3710      	adds	r7, #16
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}

08002528 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002528:	b480      	push	{r7}
 800252a:	b085      	sub	sp, #20
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002536:	b2db      	uxtb	r3, r3
 8002538:	2b21      	cmp	r3, #33	; 0x21
 800253a:	d13e      	bne.n	80025ba <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002544:	d114      	bne.n	8002570 <UART_Transmit_IT+0x48>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	691b      	ldr	r3, [r3, #16]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d110      	bne.n	8002570 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6a1b      	ldr	r3, [r3, #32]
 8002552:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	881b      	ldrh	r3, [r3, #0]
 8002558:	461a      	mov	r2, r3
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002562:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6a1b      	ldr	r3, [r3, #32]
 8002568:	1c9a      	adds	r2, r3, #2
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	621a      	str	r2, [r3, #32]
 800256e:	e008      	b.n	8002582 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6a1b      	ldr	r3, [r3, #32]
 8002574:	1c59      	adds	r1, r3, #1
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	6211      	str	r1, [r2, #32]
 800257a:	781a      	ldrb	r2, [r3, #0]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002586:	b29b      	uxth	r3, r3
 8002588:	3b01      	subs	r3, #1
 800258a:	b29b      	uxth	r3, r3
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	4619      	mov	r1, r3
 8002590:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002592:	2b00      	cmp	r3, #0
 8002594:	d10f      	bne.n	80025b6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	68da      	ldr	r2, [r3, #12]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025a4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	68da      	ldr	r2, [r3, #12]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025b4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80025b6:	2300      	movs	r3, #0
 80025b8:	e000      	b.n	80025bc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80025ba:	2302      	movs	r3, #2
  }
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3714      	adds	r7, #20
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bc80      	pop	{r7}
 80025c4:	4770      	bx	lr

080025c6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80025c6:	b580      	push	{r7, lr}
 80025c8:	b082      	sub	sp, #8
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	68da      	ldr	r2, [r3, #12]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025dc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2220      	movs	r2, #32
 80025e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f7ff fed2 	bl	8002390 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80025ec:	2300      	movs	r3, #0
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3708      	adds	r7, #8
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}

080025f6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80025f6:	b580      	push	{r7, lr}
 80025f8:	b08c      	sub	sp, #48	; 0x30
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002604:	b2db      	uxtb	r3, r3
 8002606:	2b22      	cmp	r3, #34	; 0x22
 8002608:	f040 80ae 	bne.w	8002768 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002614:	d117      	bne.n	8002646 <UART_Receive_IT+0x50>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	691b      	ldr	r3, [r3, #16]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d113      	bne.n	8002646 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800261e:	2300      	movs	r3, #0
 8002620:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002626:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	b29b      	uxth	r3, r3
 8002630:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002634:	b29a      	uxth	r2, r3
 8002636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002638:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800263e:	1c9a      	adds	r2, r3, #2
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	629a      	str	r2, [r3, #40]	; 0x28
 8002644:	e026      	b.n	8002694 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800264a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800264c:	2300      	movs	r3, #0
 800264e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002658:	d007      	beq.n	800266a <UART_Receive_IT+0x74>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d10a      	bne.n	8002678 <UART_Receive_IT+0x82>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	691b      	ldr	r3, [r3, #16]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d106      	bne.n	8002678 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	b2da      	uxtb	r2, r3
 8002672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002674:	701a      	strb	r2, [r3, #0]
 8002676:	e008      	b.n	800268a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	b2db      	uxtb	r3, r3
 8002680:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002684:	b2da      	uxtb	r2, r3
 8002686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002688:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800268e:	1c5a      	adds	r2, r3, #1
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002698:	b29b      	uxth	r3, r3
 800269a:	3b01      	subs	r3, #1
 800269c:	b29b      	uxth	r3, r3
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	4619      	mov	r1, r3
 80026a2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d15d      	bne.n	8002764 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	68da      	ldr	r2, [r3, #12]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f022 0220 	bic.w	r2, r2, #32
 80026b6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	68da      	ldr	r2, [r3, #12]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80026c6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	695a      	ldr	r2, [r3, #20]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f022 0201 	bic.w	r2, r2, #1
 80026d6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2220      	movs	r2, #32
 80026dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2200      	movs	r2, #0
 80026e4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d135      	bne.n	800275a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2200      	movs	r2, #0
 80026f2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	330c      	adds	r3, #12
 80026fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	e853 3f00 	ldrex	r3, [r3]
 8002702:	613b      	str	r3, [r7, #16]
   return(result);
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	f023 0310 	bic.w	r3, r3, #16
 800270a:	627b      	str	r3, [r7, #36]	; 0x24
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	330c      	adds	r3, #12
 8002712:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002714:	623a      	str	r2, [r7, #32]
 8002716:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002718:	69f9      	ldr	r1, [r7, #28]
 800271a:	6a3a      	ldr	r2, [r7, #32]
 800271c:	e841 2300 	strex	r3, r2, [r1]
 8002720:	61bb      	str	r3, [r7, #24]
   return(result);
 8002722:	69bb      	ldr	r3, [r7, #24]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d1e5      	bne.n	80026f4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0310 	and.w	r3, r3, #16
 8002732:	2b10      	cmp	r3, #16
 8002734:	d10a      	bne.n	800274c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002736:	2300      	movs	r3, #0
 8002738:	60fb      	str	r3, [r7, #12]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	60fb      	str	r3, [r7, #12]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	60fb      	str	r3, [r7, #12]
 800274a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002750:	4619      	mov	r1, r3
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f7ff fe2e 	bl	80023b4 <HAL_UARTEx_RxEventCallback>
 8002758:	e002      	b.n	8002760 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f7fd ff5e 	bl	800061c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002760:	2300      	movs	r3, #0
 8002762:	e002      	b.n	800276a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002764:	2300      	movs	r3, #0
 8002766:	e000      	b.n	800276a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002768:	2302      	movs	r3, #2
  }
}
 800276a:	4618      	mov	r0, r3
 800276c:	3730      	adds	r7, #48	; 0x30
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
	...

08002774 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b084      	sub	sp, #16
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	691b      	ldr	r3, [r3, #16]
 8002782:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	68da      	ldr	r2, [r3, #12]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	430a      	orrs	r2, r1
 8002790:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	689a      	ldr	r2, [r3, #8]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	691b      	ldr	r3, [r3, #16]
 800279a:	431a      	orrs	r2, r3
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	695b      	ldr	r3, [r3, #20]
 80027a0:	431a      	orrs	r2, r3
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	69db      	ldr	r3, [r3, #28]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80027b4:	f023 030c 	bic.w	r3, r3, #12
 80027b8:	687a      	ldr	r2, [r7, #4]
 80027ba:	6812      	ldr	r2, [r2, #0]
 80027bc:	68b9      	ldr	r1, [r7, #8]
 80027be:	430b      	orrs	r3, r1
 80027c0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	695b      	ldr	r3, [r3, #20]
 80027c8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	699a      	ldr	r2, [r3, #24]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	430a      	orrs	r2, r1
 80027d6:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a55      	ldr	r2, [pc, #340]	; (8002934 <UART_SetConfig+0x1c0>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d103      	bne.n	80027ea <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80027e2:	f7ff fa59 	bl	8001c98 <HAL_RCC_GetPCLK2Freq>
 80027e6:	60f8      	str	r0, [r7, #12]
 80027e8:	e002      	b.n	80027f0 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80027ea:	f7ff fa41 	bl	8001c70 <HAL_RCC_GetPCLK1Freq>
 80027ee:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	69db      	ldr	r3, [r3, #28]
 80027f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027f8:	d14c      	bne.n	8002894 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80027fa:	68fa      	ldr	r2, [r7, #12]
 80027fc:	4613      	mov	r3, r2
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	4413      	add	r3, r2
 8002802:	009a      	lsls	r2, r3, #2
 8002804:	441a      	add	r2, r3
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	005b      	lsls	r3, r3, #1
 800280c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002810:	4a49      	ldr	r2, [pc, #292]	; (8002938 <UART_SetConfig+0x1c4>)
 8002812:	fba2 2303 	umull	r2, r3, r2, r3
 8002816:	095b      	lsrs	r3, r3, #5
 8002818:	0119      	lsls	r1, r3, #4
 800281a:	68fa      	ldr	r2, [r7, #12]
 800281c:	4613      	mov	r3, r2
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	4413      	add	r3, r2
 8002822:	009a      	lsls	r2, r3, #2
 8002824:	441a      	add	r2, r3
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	005b      	lsls	r3, r3, #1
 800282c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002830:	4b41      	ldr	r3, [pc, #260]	; (8002938 <UART_SetConfig+0x1c4>)
 8002832:	fba3 0302 	umull	r0, r3, r3, r2
 8002836:	095b      	lsrs	r3, r3, #5
 8002838:	2064      	movs	r0, #100	; 0x64
 800283a:	fb00 f303 	mul.w	r3, r0, r3
 800283e:	1ad3      	subs	r3, r2, r3
 8002840:	00db      	lsls	r3, r3, #3
 8002842:	3332      	adds	r3, #50	; 0x32
 8002844:	4a3c      	ldr	r2, [pc, #240]	; (8002938 <UART_SetConfig+0x1c4>)
 8002846:	fba2 2303 	umull	r2, r3, r2, r3
 800284a:	095b      	lsrs	r3, r3, #5
 800284c:	005b      	lsls	r3, r3, #1
 800284e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002852:	4419      	add	r1, r3
 8002854:	68fa      	ldr	r2, [r7, #12]
 8002856:	4613      	mov	r3, r2
 8002858:	009b      	lsls	r3, r3, #2
 800285a:	4413      	add	r3, r2
 800285c:	009a      	lsls	r2, r3, #2
 800285e:	441a      	add	r2, r3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	005b      	lsls	r3, r3, #1
 8002866:	fbb2 f2f3 	udiv	r2, r2, r3
 800286a:	4b33      	ldr	r3, [pc, #204]	; (8002938 <UART_SetConfig+0x1c4>)
 800286c:	fba3 0302 	umull	r0, r3, r3, r2
 8002870:	095b      	lsrs	r3, r3, #5
 8002872:	2064      	movs	r0, #100	; 0x64
 8002874:	fb00 f303 	mul.w	r3, r0, r3
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	00db      	lsls	r3, r3, #3
 800287c:	3332      	adds	r3, #50	; 0x32
 800287e:	4a2e      	ldr	r2, [pc, #184]	; (8002938 <UART_SetConfig+0x1c4>)
 8002880:	fba2 2303 	umull	r2, r3, r2, r3
 8002884:	095b      	lsrs	r3, r3, #5
 8002886:	f003 0207 	and.w	r2, r3, #7
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	440a      	add	r2, r1
 8002890:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002892:	e04a      	b.n	800292a <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002894:	68fa      	ldr	r2, [r7, #12]
 8002896:	4613      	mov	r3, r2
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	4413      	add	r3, r2
 800289c:	009a      	lsls	r2, r3, #2
 800289e:	441a      	add	r2, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80028aa:	4a23      	ldr	r2, [pc, #140]	; (8002938 <UART_SetConfig+0x1c4>)
 80028ac:	fba2 2303 	umull	r2, r3, r2, r3
 80028b0:	095b      	lsrs	r3, r3, #5
 80028b2:	0119      	lsls	r1, r3, #4
 80028b4:	68fa      	ldr	r2, [r7, #12]
 80028b6:	4613      	mov	r3, r2
 80028b8:	009b      	lsls	r3, r3, #2
 80028ba:	4413      	add	r3, r2
 80028bc:	009a      	lsls	r2, r3, #2
 80028be:	441a      	add	r2, r3
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	fbb2 f2f3 	udiv	r2, r2, r3
 80028ca:	4b1b      	ldr	r3, [pc, #108]	; (8002938 <UART_SetConfig+0x1c4>)
 80028cc:	fba3 0302 	umull	r0, r3, r3, r2
 80028d0:	095b      	lsrs	r3, r3, #5
 80028d2:	2064      	movs	r0, #100	; 0x64
 80028d4:	fb00 f303 	mul.w	r3, r0, r3
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	011b      	lsls	r3, r3, #4
 80028dc:	3332      	adds	r3, #50	; 0x32
 80028de:	4a16      	ldr	r2, [pc, #88]	; (8002938 <UART_SetConfig+0x1c4>)
 80028e0:	fba2 2303 	umull	r2, r3, r2, r3
 80028e4:	095b      	lsrs	r3, r3, #5
 80028e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028ea:	4419      	add	r1, r3
 80028ec:	68fa      	ldr	r2, [r7, #12]
 80028ee:	4613      	mov	r3, r2
 80028f0:	009b      	lsls	r3, r3, #2
 80028f2:	4413      	add	r3, r2
 80028f4:	009a      	lsls	r2, r3, #2
 80028f6:	441a      	add	r2, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	fbb2 f2f3 	udiv	r2, r2, r3
 8002902:	4b0d      	ldr	r3, [pc, #52]	; (8002938 <UART_SetConfig+0x1c4>)
 8002904:	fba3 0302 	umull	r0, r3, r3, r2
 8002908:	095b      	lsrs	r3, r3, #5
 800290a:	2064      	movs	r0, #100	; 0x64
 800290c:	fb00 f303 	mul.w	r3, r0, r3
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	011b      	lsls	r3, r3, #4
 8002914:	3332      	adds	r3, #50	; 0x32
 8002916:	4a08      	ldr	r2, [pc, #32]	; (8002938 <UART_SetConfig+0x1c4>)
 8002918:	fba2 2303 	umull	r2, r3, r2, r3
 800291c:	095b      	lsrs	r3, r3, #5
 800291e:	f003 020f 	and.w	r2, r3, #15
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	440a      	add	r2, r1
 8002928:	609a      	str	r2, [r3, #8]
}
 800292a:	bf00      	nop
 800292c:	3710      	adds	r7, #16
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	40013800 	.word	0x40013800
 8002938:	51eb851f 	.word	0x51eb851f

0800293c <std>:
 800293c:	2300      	movs	r3, #0
 800293e:	b510      	push	{r4, lr}
 8002940:	4604      	mov	r4, r0
 8002942:	e9c0 3300 	strd	r3, r3, [r0]
 8002946:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800294a:	6083      	str	r3, [r0, #8]
 800294c:	8181      	strh	r1, [r0, #12]
 800294e:	6643      	str	r3, [r0, #100]	; 0x64
 8002950:	81c2      	strh	r2, [r0, #14]
 8002952:	6183      	str	r3, [r0, #24]
 8002954:	4619      	mov	r1, r3
 8002956:	2208      	movs	r2, #8
 8002958:	305c      	adds	r0, #92	; 0x5c
 800295a:	f000 f932 	bl	8002bc2 <memset>
 800295e:	4b0d      	ldr	r3, [pc, #52]	; (8002994 <std+0x58>)
 8002960:	6224      	str	r4, [r4, #32]
 8002962:	6263      	str	r3, [r4, #36]	; 0x24
 8002964:	4b0c      	ldr	r3, [pc, #48]	; (8002998 <std+0x5c>)
 8002966:	62a3      	str	r3, [r4, #40]	; 0x28
 8002968:	4b0c      	ldr	r3, [pc, #48]	; (800299c <std+0x60>)
 800296a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800296c:	4b0c      	ldr	r3, [pc, #48]	; (80029a0 <std+0x64>)
 800296e:	6323      	str	r3, [r4, #48]	; 0x30
 8002970:	4b0c      	ldr	r3, [pc, #48]	; (80029a4 <std+0x68>)
 8002972:	429c      	cmp	r4, r3
 8002974:	d006      	beq.n	8002984 <std+0x48>
 8002976:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800297a:	4294      	cmp	r4, r2
 800297c:	d002      	beq.n	8002984 <std+0x48>
 800297e:	33d0      	adds	r3, #208	; 0xd0
 8002980:	429c      	cmp	r4, r3
 8002982:	d105      	bne.n	8002990 <std+0x54>
 8002984:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002988:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800298c:	f000 b992 	b.w	8002cb4 <__retarget_lock_init_recursive>
 8002990:	bd10      	pop	{r4, pc}
 8002992:	bf00      	nop
 8002994:	08002b39 	.word	0x08002b39
 8002998:	08002b5f 	.word	0x08002b5f
 800299c:	08002b97 	.word	0x08002b97
 80029a0:	08002bbb 	.word	0x08002bbb
 80029a4:	20000160 	.word	0x20000160

080029a8 <stdio_exit_handler>:
 80029a8:	4a02      	ldr	r2, [pc, #8]	; (80029b4 <stdio_exit_handler+0xc>)
 80029aa:	4903      	ldr	r1, [pc, #12]	; (80029b8 <stdio_exit_handler+0x10>)
 80029ac:	4803      	ldr	r0, [pc, #12]	; (80029bc <stdio_exit_handler+0x14>)
 80029ae:	f000 b869 	b.w	8002a84 <_fwalk_sglue>
 80029b2:	bf00      	nop
 80029b4:	2000000c 	.word	0x2000000c
 80029b8:	08003b91 	.word	0x08003b91
 80029bc:	20000018 	.word	0x20000018

080029c0 <cleanup_stdio>:
 80029c0:	6841      	ldr	r1, [r0, #4]
 80029c2:	4b0c      	ldr	r3, [pc, #48]	; (80029f4 <cleanup_stdio+0x34>)
 80029c4:	b510      	push	{r4, lr}
 80029c6:	4299      	cmp	r1, r3
 80029c8:	4604      	mov	r4, r0
 80029ca:	d001      	beq.n	80029d0 <cleanup_stdio+0x10>
 80029cc:	f001 f8e0 	bl	8003b90 <_fflush_r>
 80029d0:	68a1      	ldr	r1, [r4, #8]
 80029d2:	4b09      	ldr	r3, [pc, #36]	; (80029f8 <cleanup_stdio+0x38>)
 80029d4:	4299      	cmp	r1, r3
 80029d6:	d002      	beq.n	80029de <cleanup_stdio+0x1e>
 80029d8:	4620      	mov	r0, r4
 80029da:	f001 f8d9 	bl	8003b90 <_fflush_r>
 80029de:	68e1      	ldr	r1, [r4, #12]
 80029e0:	4b06      	ldr	r3, [pc, #24]	; (80029fc <cleanup_stdio+0x3c>)
 80029e2:	4299      	cmp	r1, r3
 80029e4:	d004      	beq.n	80029f0 <cleanup_stdio+0x30>
 80029e6:	4620      	mov	r0, r4
 80029e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80029ec:	f001 b8d0 	b.w	8003b90 <_fflush_r>
 80029f0:	bd10      	pop	{r4, pc}
 80029f2:	bf00      	nop
 80029f4:	20000160 	.word	0x20000160
 80029f8:	200001c8 	.word	0x200001c8
 80029fc:	20000230 	.word	0x20000230

08002a00 <global_stdio_init.part.0>:
 8002a00:	b510      	push	{r4, lr}
 8002a02:	4b0b      	ldr	r3, [pc, #44]	; (8002a30 <global_stdio_init.part.0+0x30>)
 8002a04:	4c0b      	ldr	r4, [pc, #44]	; (8002a34 <global_stdio_init.part.0+0x34>)
 8002a06:	4a0c      	ldr	r2, [pc, #48]	; (8002a38 <global_stdio_init.part.0+0x38>)
 8002a08:	4620      	mov	r0, r4
 8002a0a:	601a      	str	r2, [r3, #0]
 8002a0c:	2104      	movs	r1, #4
 8002a0e:	2200      	movs	r2, #0
 8002a10:	f7ff ff94 	bl	800293c <std>
 8002a14:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8002a18:	2201      	movs	r2, #1
 8002a1a:	2109      	movs	r1, #9
 8002a1c:	f7ff ff8e 	bl	800293c <std>
 8002a20:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8002a24:	2202      	movs	r2, #2
 8002a26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002a2a:	2112      	movs	r1, #18
 8002a2c:	f7ff bf86 	b.w	800293c <std>
 8002a30:	20000298 	.word	0x20000298
 8002a34:	20000160 	.word	0x20000160
 8002a38:	080029a9 	.word	0x080029a9

08002a3c <__sfp_lock_acquire>:
 8002a3c:	4801      	ldr	r0, [pc, #4]	; (8002a44 <__sfp_lock_acquire+0x8>)
 8002a3e:	f000 b93a 	b.w	8002cb6 <__retarget_lock_acquire_recursive>
 8002a42:	bf00      	nop
 8002a44:	200002a1 	.word	0x200002a1

08002a48 <__sfp_lock_release>:
 8002a48:	4801      	ldr	r0, [pc, #4]	; (8002a50 <__sfp_lock_release+0x8>)
 8002a4a:	f000 b935 	b.w	8002cb8 <__retarget_lock_release_recursive>
 8002a4e:	bf00      	nop
 8002a50:	200002a1 	.word	0x200002a1

08002a54 <__sinit>:
 8002a54:	b510      	push	{r4, lr}
 8002a56:	4604      	mov	r4, r0
 8002a58:	f7ff fff0 	bl	8002a3c <__sfp_lock_acquire>
 8002a5c:	6a23      	ldr	r3, [r4, #32]
 8002a5e:	b11b      	cbz	r3, 8002a68 <__sinit+0x14>
 8002a60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002a64:	f7ff bff0 	b.w	8002a48 <__sfp_lock_release>
 8002a68:	4b04      	ldr	r3, [pc, #16]	; (8002a7c <__sinit+0x28>)
 8002a6a:	6223      	str	r3, [r4, #32]
 8002a6c:	4b04      	ldr	r3, [pc, #16]	; (8002a80 <__sinit+0x2c>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d1f5      	bne.n	8002a60 <__sinit+0xc>
 8002a74:	f7ff ffc4 	bl	8002a00 <global_stdio_init.part.0>
 8002a78:	e7f2      	b.n	8002a60 <__sinit+0xc>
 8002a7a:	bf00      	nop
 8002a7c:	080029c1 	.word	0x080029c1
 8002a80:	20000298 	.word	0x20000298

08002a84 <_fwalk_sglue>:
 8002a84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002a88:	4607      	mov	r7, r0
 8002a8a:	4688      	mov	r8, r1
 8002a8c:	4614      	mov	r4, r2
 8002a8e:	2600      	movs	r6, #0
 8002a90:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002a94:	f1b9 0901 	subs.w	r9, r9, #1
 8002a98:	d505      	bpl.n	8002aa6 <_fwalk_sglue+0x22>
 8002a9a:	6824      	ldr	r4, [r4, #0]
 8002a9c:	2c00      	cmp	r4, #0
 8002a9e:	d1f7      	bne.n	8002a90 <_fwalk_sglue+0xc>
 8002aa0:	4630      	mov	r0, r6
 8002aa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002aa6:	89ab      	ldrh	r3, [r5, #12]
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d907      	bls.n	8002abc <_fwalk_sglue+0x38>
 8002aac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002ab0:	3301      	adds	r3, #1
 8002ab2:	d003      	beq.n	8002abc <_fwalk_sglue+0x38>
 8002ab4:	4629      	mov	r1, r5
 8002ab6:	4638      	mov	r0, r7
 8002ab8:	47c0      	blx	r8
 8002aba:	4306      	orrs	r6, r0
 8002abc:	3568      	adds	r5, #104	; 0x68
 8002abe:	e7e9      	b.n	8002a94 <_fwalk_sglue+0x10>

08002ac0 <iprintf>:
 8002ac0:	b40f      	push	{r0, r1, r2, r3}
 8002ac2:	b507      	push	{r0, r1, r2, lr}
 8002ac4:	4906      	ldr	r1, [pc, #24]	; (8002ae0 <iprintf+0x20>)
 8002ac6:	ab04      	add	r3, sp, #16
 8002ac8:	6808      	ldr	r0, [r1, #0]
 8002aca:	f853 2b04 	ldr.w	r2, [r3], #4
 8002ace:	6881      	ldr	r1, [r0, #8]
 8002ad0:	9301      	str	r3, [sp, #4]
 8002ad2:	f000 fbe1 	bl	8003298 <_vfiprintf_r>
 8002ad6:	b003      	add	sp, #12
 8002ad8:	f85d eb04 	ldr.w	lr, [sp], #4
 8002adc:	b004      	add	sp, #16
 8002ade:	4770      	bx	lr
 8002ae0:	20000064 	.word	0x20000064

08002ae4 <siscanf>:
 8002ae4:	b40e      	push	{r1, r2, r3}
 8002ae6:	f44f 7201 	mov.w	r2, #516	; 0x204
 8002aea:	b530      	push	{r4, r5, lr}
 8002aec:	b09c      	sub	sp, #112	; 0x70
 8002aee:	ac1f      	add	r4, sp, #124	; 0x7c
 8002af0:	f854 5b04 	ldr.w	r5, [r4], #4
 8002af4:	f8ad 2014 	strh.w	r2, [sp, #20]
 8002af8:	9002      	str	r0, [sp, #8]
 8002afa:	9006      	str	r0, [sp, #24]
 8002afc:	f7fd fb3e 	bl	800017c <strlen>
 8002b00:	4b0b      	ldr	r3, [pc, #44]	; (8002b30 <siscanf+0x4c>)
 8002b02:	9003      	str	r0, [sp, #12]
 8002b04:	930b      	str	r3, [sp, #44]	; 0x2c
 8002b06:	2300      	movs	r3, #0
 8002b08:	930f      	str	r3, [sp, #60]	; 0x3c
 8002b0a:	9314      	str	r3, [sp, #80]	; 0x50
 8002b0c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b10:	9007      	str	r0, [sp, #28]
 8002b12:	4808      	ldr	r0, [pc, #32]	; (8002b34 <siscanf+0x50>)
 8002b14:	f8ad 3016 	strh.w	r3, [sp, #22]
 8002b18:	462a      	mov	r2, r5
 8002b1a:	4623      	mov	r3, r4
 8002b1c:	a902      	add	r1, sp, #8
 8002b1e:	6800      	ldr	r0, [r0, #0]
 8002b20:	9401      	str	r4, [sp, #4]
 8002b22:	f000 fa19 	bl	8002f58 <__ssvfiscanf_r>
 8002b26:	b01c      	add	sp, #112	; 0x70
 8002b28:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002b2c:	b003      	add	sp, #12
 8002b2e:	4770      	bx	lr
 8002b30:	08002b5b 	.word	0x08002b5b
 8002b34:	20000064 	.word	0x20000064

08002b38 <__sread>:
 8002b38:	b510      	push	{r4, lr}
 8002b3a:	460c      	mov	r4, r1
 8002b3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b40:	f000 f86a 	bl	8002c18 <_read_r>
 8002b44:	2800      	cmp	r0, #0
 8002b46:	bfab      	itete	ge
 8002b48:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002b4a:	89a3      	ldrhlt	r3, [r4, #12]
 8002b4c:	181b      	addge	r3, r3, r0
 8002b4e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002b52:	bfac      	ite	ge
 8002b54:	6563      	strge	r3, [r4, #84]	; 0x54
 8002b56:	81a3      	strhlt	r3, [r4, #12]
 8002b58:	bd10      	pop	{r4, pc}

08002b5a <__seofread>:
 8002b5a:	2000      	movs	r0, #0
 8002b5c:	4770      	bx	lr

08002b5e <__swrite>:
 8002b5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b62:	461f      	mov	r7, r3
 8002b64:	898b      	ldrh	r3, [r1, #12]
 8002b66:	4605      	mov	r5, r0
 8002b68:	05db      	lsls	r3, r3, #23
 8002b6a:	460c      	mov	r4, r1
 8002b6c:	4616      	mov	r6, r2
 8002b6e:	d505      	bpl.n	8002b7c <__swrite+0x1e>
 8002b70:	2302      	movs	r3, #2
 8002b72:	2200      	movs	r2, #0
 8002b74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b78:	f000 f83c 	bl	8002bf4 <_lseek_r>
 8002b7c:	89a3      	ldrh	r3, [r4, #12]
 8002b7e:	4632      	mov	r2, r6
 8002b80:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002b84:	81a3      	strh	r3, [r4, #12]
 8002b86:	4628      	mov	r0, r5
 8002b88:	463b      	mov	r3, r7
 8002b8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002b8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002b92:	f000 b853 	b.w	8002c3c <_write_r>

08002b96 <__sseek>:
 8002b96:	b510      	push	{r4, lr}
 8002b98:	460c      	mov	r4, r1
 8002b9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b9e:	f000 f829 	bl	8002bf4 <_lseek_r>
 8002ba2:	1c43      	adds	r3, r0, #1
 8002ba4:	89a3      	ldrh	r3, [r4, #12]
 8002ba6:	bf15      	itete	ne
 8002ba8:	6560      	strne	r0, [r4, #84]	; 0x54
 8002baa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002bae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002bb2:	81a3      	strheq	r3, [r4, #12]
 8002bb4:	bf18      	it	ne
 8002bb6:	81a3      	strhne	r3, [r4, #12]
 8002bb8:	bd10      	pop	{r4, pc}

08002bba <__sclose>:
 8002bba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002bbe:	f000 b809 	b.w	8002bd4 <_close_r>

08002bc2 <memset>:
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	4402      	add	r2, r0
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d100      	bne.n	8002bcc <memset+0xa>
 8002bca:	4770      	bx	lr
 8002bcc:	f803 1b01 	strb.w	r1, [r3], #1
 8002bd0:	e7f9      	b.n	8002bc6 <memset+0x4>
	...

08002bd4 <_close_r>:
 8002bd4:	b538      	push	{r3, r4, r5, lr}
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	4d05      	ldr	r5, [pc, #20]	; (8002bf0 <_close_r+0x1c>)
 8002bda:	4604      	mov	r4, r0
 8002bdc:	4608      	mov	r0, r1
 8002bde:	602b      	str	r3, [r5, #0]
 8002be0:	f7fd fe13 	bl	800080a <_close>
 8002be4:	1c43      	adds	r3, r0, #1
 8002be6:	d102      	bne.n	8002bee <_close_r+0x1a>
 8002be8:	682b      	ldr	r3, [r5, #0]
 8002bea:	b103      	cbz	r3, 8002bee <_close_r+0x1a>
 8002bec:	6023      	str	r3, [r4, #0]
 8002bee:	bd38      	pop	{r3, r4, r5, pc}
 8002bf0:	2000029c 	.word	0x2000029c

08002bf4 <_lseek_r>:
 8002bf4:	b538      	push	{r3, r4, r5, lr}
 8002bf6:	4604      	mov	r4, r0
 8002bf8:	4608      	mov	r0, r1
 8002bfa:	4611      	mov	r1, r2
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	4d05      	ldr	r5, [pc, #20]	; (8002c14 <_lseek_r+0x20>)
 8002c00:	602a      	str	r2, [r5, #0]
 8002c02:	461a      	mov	r2, r3
 8002c04:	f7fd fe25 	bl	8000852 <_lseek>
 8002c08:	1c43      	adds	r3, r0, #1
 8002c0a:	d102      	bne.n	8002c12 <_lseek_r+0x1e>
 8002c0c:	682b      	ldr	r3, [r5, #0]
 8002c0e:	b103      	cbz	r3, 8002c12 <_lseek_r+0x1e>
 8002c10:	6023      	str	r3, [r4, #0]
 8002c12:	bd38      	pop	{r3, r4, r5, pc}
 8002c14:	2000029c 	.word	0x2000029c

08002c18 <_read_r>:
 8002c18:	b538      	push	{r3, r4, r5, lr}
 8002c1a:	4604      	mov	r4, r0
 8002c1c:	4608      	mov	r0, r1
 8002c1e:	4611      	mov	r1, r2
 8002c20:	2200      	movs	r2, #0
 8002c22:	4d05      	ldr	r5, [pc, #20]	; (8002c38 <_read_r+0x20>)
 8002c24:	602a      	str	r2, [r5, #0]
 8002c26:	461a      	mov	r2, r3
 8002c28:	f7fd fdb6 	bl	8000798 <_read>
 8002c2c:	1c43      	adds	r3, r0, #1
 8002c2e:	d102      	bne.n	8002c36 <_read_r+0x1e>
 8002c30:	682b      	ldr	r3, [r5, #0]
 8002c32:	b103      	cbz	r3, 8002c36 <_read_r+0x1e>
 8002c34:	6023      	str	r3, [r4, #0]
 8002c36:	bd38      	pop	{r3, r4, r5, pc}
 8002c38:	2000029c 	.word	0x2000029c

08002c3c <_write_r>:
 8002c3c:	b538      	push	{r3, r4, r5, lr}
 8002c3e:	4604      	mov	r4, r0
 8002c40:	4608      	mov	r0, r1
 8002c42:	4611      	mov	r1, r2
 8002c44:	2200      	movs	r2, #0
 8002c46:	4d05      	ldr	r5, [pc, #20]	; (8002c5c <_write_r+0x20>)
 8002c48:	602a      	str	r2, [r5, #0]
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	f7fd fdc1 	bl	80007d2 <_write>
 8002c50:	1c43      	adds	r3, r0, #1
 8002c52:	d102      	bne.n	8002c5a <_write_r+0x1e>
 8002c54:	682b      	ldr	r3, [r5, #0]
 8002c56:	b103      	cbz	r3, 8002c5a <_write_r+0x1e>
 8002c58:	6023      	str	r3, [r4, #0]
 8002c5a:	bd38      	pop	{r3, r4, r5, pc}
 8002c5c:	2000029c 	.word	0x2000029c

08002c60 <__errno>:
 8002c60:	4b01      	ldr	r3, [pc, #4]	; (8002c68 <__errno+0x8>)
 8002c62:	6818      	ldr	r0, [r3, #0]
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop
 8002c68:	20000064 	.word	0x20000064

08002c6c <__libc_init_array>:
 8002c6c:	b570      	push	{r4, r5, r6, lr}
 8002c6e:	2600      	movs	r6, #0
 8002c70:	4d0c      	ldr	r5, [pc, #48]	; (8002ca4 <__libc_init_array+0x38>)
 8002c72:	4c0d      	ldr	r4, [pc, #52]	; (8002ca8 <__libc_init_array+0x3c>)
 8002c74:	1b64      	subs	r4, r4, r5
 8002c76:	10a4      	asrs	r4, r4, #2
 8002c78:	42a6      	cmp	r6, r4
 8002c7a:	d109      	bne.n	8002c90 <__libc_init_array+0x24>
 8002c7c:	f001 fa92 	bl	80041a4 <_init>
 8002c80:	2600      	movs	r6, #0
 8002c82:	4d0a      	ldr	r5, [pc, #40]	; (8002cac <__libc_init_array+0x40>)
 8002c84:	4c0a      	ldr	r4, [pc, #40]	; (8002cb0 <__libc_init_array+0x44>)
 8002c86:	1b64      	subs	r4, r4, r5
 8002c88:	10a4      	asrs	r4, r4, #2
 8002c8a:	42a6      	cmp	r6, r4
 8002c8c:	d105      	bne.n	8002c9a <__libc_init_array+0x2e>
 8002c8e:	bd70      	pop	{r4, r5, r6, pc}
 8002c90:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c94:	4798      	blx	r3
 8002c96:	3601      	adds	r6, #1
 8002c98:	e7ee      	b.n	8002c78 <__libc_init_array+0xc>
 8002c9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c9e:	4798      	blx	r3
 8002ca0:	3601      	adds	r6, #1
 8002ca2:	e7f2      	b.n	8002c8a <__libc_init_array+0x1e>
 8002ca4:	080043b4 	.word	0x080043b4
 8002ca8:	080043b4 	.word	0x080043b4
 8002cac:	080043b4 	.word	0x080043b4
 8002cb0:	080043b8 	.word	0x080043b8

08002cb4 <__retarget_lock_init_recursive>:
 8002cb4:	4770      	bx	lr

08002cb6 <__retarget_lock_acquire_recursive>:
 8002cb6:	4770      	bx	lr

08002cb8 <__retarget_lock_release_recursive>:
 8002cb8:	4770      	bx	lr
	...

08002cbc <_free_r>:
 8002cbc:	b538      	push	{r3, r4, r5, lr}
 8002cbe:	4605      	mov	r5, r0
 8002cc0:	2900      	cmp	r1, #0
 8002cc2:	d040      	beq.n	8002d46 <_free_r+0x8a>
 8002cc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002cc8:	1f0c      	subs	r4, r1, #4
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	bfb8      	it	lt
 8002cce:	18e4      	addlt	r4, r4, r3
 8002cd0:	f000 f8dc 	bl	8002e8c <__malloc_lock>
 8002cd4:	4a1c      	ldr	r2, [pc, #112]	; (8002d48 <_free_r+0x8c>)
 8002cd6:	6813      	ldr	r3, [r2, #0]
 8002cd8:	b933      	cbnz	r3, 8002ce8 <_free_r+0x2c>
 8002cda:	6063      	str	r3, [r4, #4]
 8002cdc:	6014      	str	r4, [r2, #0]
 8002cde:	4628      	mov	r0, r5
 8002ce0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002ce4:	f000 b8d8 	b.w	8002e98 <__malloc_unlock>
 8002ce8:	42a3      	cmp	r3, r4
 8002cea:	d908      	bls.n	8002cfe <_free_r+0x42>
 8002cec:	6820      	ldr	r0, [r4, #0]
 8002cee:	1821      	adds	r1, r4, r0
 8002cf0:	428b      	cmp	r3, r1
 8002cf2:	bf01      	itttt	eq
 8002cf4:	6819      	ldreq	r1, [r3, #0]
 8002cf6:	685b      	ldreq	r3, [r3, #4]
 8002cf8:	1809      	addeq	r1, r1, r0
 8002cfa:	6021      	streq	r1, [r4, #0]
 8002cfc:	e7ed      	b.n	8002cda <_free_r+0x1e>
 8002cfe:	461a      	mov	r2, r3
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	b10b      	cbz	r3, 8002d08 <_free_r+0x4c>
 8002d04:	42a3      	cmp	r3, r4
 8002d06:	d9fa      	bls.n	8002cfe <_free_r+0x42>
 8002d08:	6811      	ldr	r1, [r2, #0]
 8002d0a:	1850      	adds	r0, r2, r1
 8002d0c:	42a0      	cmp	r0, r4
 8002d0e:	d10b      	bne.n	8002d28 <_free_r+0x6c>
 8002d10:	6820      	ldr	r0, [r4, #0]
 8002d12:	4401      	add	r1, r0
 8002d14:	1850      	adds	r0, r2, r1
 8002d16:	4283      	cmp	r3, r0
 8002d18:	6011      	str	r1, [r2, #0]
 8002d1a:	d1e0      	bne.n	8002cde <_free_r+0x22>
 8002d1c:	6818      	ldr	r0, [r3, #0]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	4408      	add	r0, r1
 8002d22:	6010      	str	r0, [r2, #0]
 8002d24:	6053      	str	r3, [r2, #4]
 8002d26:	e7da      	b.n	8002cde <_free_r+0x22>
 8002d28:	d902      	bls.n	8002d30 <_free_r+0x74>
 8002d2a:	230c      	movs	r3, #12
 8002d2c:	602b      	str	r3, [r5, #0]
 8002d2e:	e7d6      	b.n	8002cde <_free_r+0x22>
 8002d30:	6820      	ldr	r0, [r4, #0]
 8002d32:	1821      	adds	r1, r4, r0
 8002d34:	428b      	cmp	r3, r1
 8002d36:	bf01      	itttt	eq
 8002d38:	6819      	ldreq	r1, [r3, #0]
 8002d3a:	685b      	ldreq	r3, [r3, #4]
 8002d3c:	1809      	addeq	r1, r1, r0
 8002d3e:	6021      	streq	r1, [r4, #0]
 8002d40:	6063      	str	r3, [r4, #4]
 8002d42:	6054      	str	r4, [r2, #4]
 8002d44:	e7cb      	b.n	8002cde <_free_r+0x22>
 8002d46:	bd38      	pop	{r3, r4, r5, pc}
 8002d48:	200002a4 	.word	0x200002a4

08002d4c <sbrk_aligned>:
 8002d4c:	b570      	push	{r4, r5, r6, lr}
 8002d4e:	4e0e      	ldr	r6, [pc, #56]	; (8002d88 <sbrk_aligned+0x3c>)
 8002d50:	460c      	mov	r4, r1
 8002d52:	6831      	ldr	r1, [r6, #0]
 8002d54:	4605      	mov	r5, r0
 8002d56:	b911      	cbnz	r1, 8002d5e <sbrk_aligned+0x12>
 8002d58:	f001 f848 	bl	8003dec <_sbrk_r>
 8002d5c:	6030      	str	r0, [r6, #0]
 8002d5e:	4621      	mov	r1, r4
 8002d60:	4628      	mov	r0, r5
 8002d62:	f001 f843 	bl	8003dec <_sbrk_r>
 8002d66:	1c43      	adds	r3, r0, #1
 8002d68:	d00a      	beq.n	8002d80 <sbrk_aligned+0x34>
 8002d6a:	1cc4      	adds	r4, r0, #3
 8002d6c:	f024 0403 	bic.w	r4, r4, #3
 8002d70:	42a0      	cmp	r0, r4
 8002d72:	d007      	beq.n	8002d84 <sbrk_aligned+0x38>
 8002d74:	1a21      	subs	r1, r4, r0
 8002d76:	4628      	mov	r0, r5
 8002d78:	f001 f838 	bl	8003dec <_sbrk_r>
 8002d7c:	3001      	adds	r0, #1
 8002d7e:	d101      	bne.n	8002d84 <sbrk_aligned+0x38>
 8002d80:	f04f 34ff 	mov.w	r4, #4294967295
 8002d84:	4620      	mov	r0, r4
 8002d86:	bd70      	pop	{r4, r5, r6, pc}
 8002d88:	200002a8 	.word	0x200002a8

08002d8c <_malloc_r>:
 8002d8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002d90:	1ccd      	adds	r5, r1, #3
 8002d92:	f025 0503 	bic.w	r5, r5, #3
 8002d96:	3508      	adds	r5, #8
 8002d98:	2d0c      	cmp	r5, #12
 8002d9a:	bf38      	it	cc
 8002d9c:	250c      	movcc	r5, #12
 8002d9e:	2d00      	cmp	r5, #0
 8002da0:	4607      	mov	r7, r0
 8002da2:	db01      	blt.n	8002da8 <_malloc_r+0x1c>
 8002da4:	42a9      	cmp	r1, r5
 8002da6:	d905      	bls.n	8002db4 <_malloc_r+0x28>
 8002da8:	230c      	movs	r3, #12
 8002daa:	2600      	movs	r6, #0
 8002dac:	603b      	str	r3, [r7, #0]
 8002dae:	4630      	mov	r0, r6
 8002db0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002db4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002e88 <_malloc_r+0xfc>
 8002db8:	f000 f868 	bl	8002e8c <__malloc_lock>
 8002dbc:	f8d8 3000 	ldr.w	r3, [r8]
 8002dc0:	461c      	mov	r4, r3
 8002dc2:	bb5c      	cbnz	r4, 8002e1c <_malloc_r+0x90>
 8002dc4:	4629      	mov	r1, r5
 8002dc6:	4638      	mov	r0, r7
 8002dc8:	f7ff ffc0 	bl	8002d4c <sbrk_aligned>
 8002dcc:	1c43      	adds	r3, r0, #1
 8002dce:	4604      	mov	r4, r0
 8002dd0:	d155      	bne.n	8002e7e <_malloc_r+0xf2>
 8002dd2:	f8d8 4000 	ldr.w	r4, [r8]
 8002dd6:	4626      	mov	r6, r4
 8002dd8:	2e00      	cmp	r6, #0
 8002dda:	d145      	bne.n	8002e68 <_malloc_r+0xdc>
 8002ddc:	2c00      	cmp	r4, #0
 8002dde:	d048      	beq.n	8002e72 <_malloc_r+0xe6>
 8002de0:	6823      	ldr	r3, [r4, #0]
 8002de2:	4631      	mov	r1, r6
 8002de4:	4638      	mov	r0, r7
 8002de6:	eb04 0903 	add.w	r9, r4, r3
 8002dea:	f000 ffff 	bl	8003dec <_sbrk_r>
 8002dee:	4581      	cmp	r9, r0
 8002df0:	d13f      	bne.n	8002e72 <_malloc_r+0xe6>
 8002df2:	6821      	ldr	r1, [r4, #0]
 8002df4:	4638      	mov	r0, r7
 8002df6:	1a6d      	subs	r5, r5, r1
 8002df8:	4629      	mov	r1, r5
 8002dfa:	f7ff ffa7 	bl	8002d4c <sbrk_aligned>
 8002dfe:	3001      	adds	r0, #1
 8002e00:	d037      	beq.n	8002e72 <_malloc_r+0xe6>
 8002e02:	6823      	ldr	r3, [r4, #0]
 8002e04:	442b      	add	r3, r5
 8002e06:	6023      	str	r3, [r4, #0]
 8002e08:	f8d8 3000 	ldr.w	r3, [r8]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d038      	beq.n	8002e82 <_malloc_r+0xf6>
 8002e10:	685a      	ldr	r2, [r3, #4]
 8002e12:	42a2      	cmp	r2, r4
 8002e14:	d12b      	bne.n	8002e6e <_malloc_r+0xe2>
 8002e16:	2200      	movs	r2, #0
 8002e18:	605a      	str	r2, [r3, #4]
 8002e1a:	e00f      	b.n	8002e3c <_malloc_r+0xb0>
 8002e1c:	6822      	ldr	r2, [r4, #0]
 8002e1e:	1b52      	subs	r2, r2, r5
 8002e20:	d41f      	bmi.n	8002e62 <_malloc_r+0xd6>
 8002e22:	2a0b      	cmp	r2, #11
 8002e24:	d917      	bls.n	8002e56 <_malloc_r+0xca>
 8002e26:	1961      	adds	r1, r4, r5
 8002e28:	42a3      	cmp	r3, r4
 8002e2a:	6025      	str	r5, [r4, #0]
 8002e2c:	bf18      	it	ne
 8002e2e:	6059      	strne	r1, [r3, #4]
 8002e30:	6863      	ldr	r3, [r4, #4]
 8002e32:	bf08      	it	eq
 8002e34:	f8c8 1000 	streq.w	r1, [r8]
 8002e38:	5162      	str	r2, [r4, r5]
 8002e3a:	604b      	str	r3, [r1, #4]
 8002e3c:	4638      	mov	r0, r7
 8002e3e:	f104 060b 	add.w	r6, r4, #11
 8002e42:	f000 f829 	bl	8002e98 <__malloc_unlock>
 8002e46:	f026 0607 	bic.w	r6, r6, #7
 8002e4a:	1d23      	adds	r3, r4, #4
 8002e4c:	1af2      	subs	r2, r6, r3
 8002e4e:	d0ae      	beq.n	8002dae <_malloc_r+0x22>
 8002e50:	1b9b      	subs	r3, r3, r6
 8002e52:	50a3      	str	r3, [r4, r2]
 8002e54:	e7ab      	b.n	8002dae <_malloc_r+0x22>
 8002e56:	42a3      	cmp	r3, r4
 8002e58:	6862      	ldr	r2, [r4, #4]
 8002e5a:	d1dd      	bne.n	8002e18 <_malloc_r+0x8c>
 8002e5c:	f8c8 2000 	str.w	r2, [r8]
 8002e60:	e7ec      	b.n	8002e3c <_malloc_r+0xb0>
 8002e62:	4623      	mov	r3, r4
 8002e64:	6864      	ldr	r4, [r4, #4]
 8002e66:	e7ac      	b.n	8002dc2 <_malloc_r+0x36>
 8002e68:	4634      	mov	r4, r6
 8002e6a:	6876      	ldr	r6, [r6, #4]
 8002e6c:	e7b4      	b.n	8002dd8 <_malloc_r+0x4c>
 8002e6e:	4613      	mov	r3, r2
 8002e70:	e7cc      	b.n	8002e0c <_malloc_r+0x80>
 8002e72:	230c      	movs	r3, #12
 8002e74:	4638      	mov	r0, r7
 8002e76:	603b      	str	r3, [r7, #0]
 8002e78:	f000 f80e 	bl	8002e98 <__malloc_unlock>
 8002e7c:	e797      	b.n	8002dae <_malloc_r+0x22>
 8002e7e:	6025      	str	r5, [r4, #0]
 8002e80:	e7dc      	b.n	8002e3c <_malloc_r+0xb0>
 8002e82:	605b      	str	r3, [r3, #4]
 8002e84:	deff      	udf	#255	; 0xff
 8002e86:	bf00      	nop
 8002e88:	200002a4 	.word	0x200002a4

08002e8c <__malloc_lock>:
 8002e8c:	4801      	ldr	r0, [pc, #4]	; (8002e94 <__malloc_lock+0x8>)
 8002e8e:	f7ff bf12 	b.w	8002cb6 <__retarget_lock_acquire_recursive>
 8002e92:	bf00      	nop
 8002e94:	200002a0 	.word	0x200002a0

08002e98 <__malloc_unlock>:
 8002e98:	4801      	ldr	r0, [pc, #4]	; (8002ea0 <__malloc_unlock+0x8>)
 8002e9a:	f7ff bf0d 	b.w	8002cb8 <__retarget_lock_release_recursive>
 8002e9e:	bf00      	nop
 8002ea0:	200002a0 	.word	0x200002a0

08002ea4 <_sungetc_r>:
 8002ea4:	b538      	push	{r3, r4, r5, lr}
 8002ea6:	1c4b      	adds	r3, r1, #1
 8002ea8:	4614      	mov	r4, r2
 8002eaa:	d103      	bne.n	8002eb4 <_sungetc_r+0x10>
 8002eac:	f04f 35ff 	mov.w	r5, #4294967295
 8002eb0:	4628      	mov	r0, r5
 8002eb2:	bd38      	pop	{r3, r4, r5, pc}
 8002eb4:	8993      	ldrh	r3, [r2, #12]
 8002eb6:	b2cd      	uxtb	r5, r1
 8002eb8:	f023 0320 	bic.w	r3, r3, #32
 8002ebc:	8193      	strh	r3, [r2, #12]
 8002ebe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002ec0:	6852      	ldr	r2, [r2, #4]
 8002ec2:	b18b      	cbz	r3, 8002ee8 <_sungetc_r+0x44>
 8002ec4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	dd08      	ble.n	8002edc <_sungetc_r+0x38>
 8002eca:	6823      	ldr	r3, [r4, #0]
 8002ecc:	1e5a      	subs	r2, r3, #1
 8002ece:	6022      	str	r2, [r4, #0]
 8002ed0:	f803 5c01 	strb.w	r5, [r3, #-1]
 8002ed4:	6863      	ldr	r3, [r4, #4]
 8002ed6:	3301      	adds	r3, #1
 8002ed8:	6063      	str	r3, [r4, #4]
 8002eda:	e7e9      	b.n	8002eb0 <_sungetc_r+0xc>
 8002edc:	4621      	mov	r1, r4
 8002ede:	f000 feb8 	bl	8003c52 <__submore>
 8002ee2:	2800      	cmp	r0, #0
 8002ee4:	d0f1      	beq.n	8002eca <_sungetc_r+0x26>
 8002ee6:	e7e1      	b.n	8002eac <_sungetc_r+0x8>
 8002ee8:	6921      	ldr	r1, [r4, #16]
 8002eea:	6823      	ldr	r3, [r4, #0]
 8002eec:	b151      	cbz	r1, 8002f04 <_sungetc_r+0x60>
 8002eee:	4299      	cmp	r1, r3
 8002ef0:	d208      	bcs.n	8002f04 <_sungetc_r+0x60>
 8002ef2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8002ef6:	42a9      	cmp	r1, r5
 8002ef8:	d104      	bne.n	8002f04 <_sungetc_r+0x60>
 8002efa:	3b01      	subs	r3, #1
 8002efc:	3201      	adds	r2, #1
 8002efe:	6023      	str	r3, [r4, #0]
 8002f00:	6062      	str	r2, [r4, #4]
 8002f02:	e7d5      	b.n	8002eb0 <_sungetc_r+0xc>
 8002f04:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8002f08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002f0c:	6363      	str	r3, [r4, #52]	; 0x34
 8002f0e:	2303      	movs	r3, #3
 8002f10:	63a3      	str	r3, [r4, #56]	; 0x38
 8002f12:	4623      	mov	r3, r4
 8002f14:	f803 5f46 	strb.w	r5, [r3, #70]!
 8002f18:	6023      	str	r3, [r4, #0]
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e7dc      	b.n	8002ed8 <_sungetc_r+0x34>

08002f1e <__ssrefill_r>:
 8002f1e:	b510      	push	{r4, lr}
 8002f20:	460c      	mov	r4, r1
 8002f22:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8002f24:	b169      	cbz	r1, 8002f42 <__ssrefill_r+0x24>
 8002f26:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002f2a:	4299      	cmp	r1, r3
 8002f2c:	d001      	beq.n	8002f32 <__ssrefill_r+0x14>
 8002f2e:	f7ff fec5 	bl	8002cbc <_free_r>
 8002f32:	2000      	movs	r0, #0
 8002f34:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002f36:	6360      	str	r0, [r4, #52]	; 0x34
 8002f38:	6063      	str	r3, [r4, #4]
 8002f3a:	b113      	cbz	r3, 8002f42 <__ssrefill_r+0x24>
 8002f3c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002f3e:	6023      	str	r3, [r4, #0]
 8002f40:	bd10      	pop	{r4, pc}
 8002f42:	6923      	ldr	r3, [r4, #16]
 8002f44:	f04f 30ff 	mov.w	r0, #4294967295
 8002f48:	6023      	str	r3, [r4, #0]
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	6063      	str	r3, [r4, #4]
 8002f4e:	89a3      	ldrh	r3, [r4, #12]
 8002f50:	f043 0320 	orr.w	r3, r3, #32
 8002f54:	81a3      	strh	r3, [r4, #12]
 8002f56:	e7f3      	b.n	8002f40 <__ssrefill_r+0x22>

08002f58 <__ssvfiscanf_r>:
 8002f58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f5c:	460c      	mov	r4, r1
 8002f5e:	2100      	movs	r1, #0
 8002f60:	4606      	mov	r6, r0
 8002f62:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8002f66:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8002f6a:	49a6      	ldr	r1, [pc, #664]	; (8003204 <__ssvfiscanf_r+0x2ac>)
 8002f6c:	f10d 0804 	add.w	r8, sp, #4
 8002f70:	91a0      	str	r1, [sp, #640]	; 0x280
 8002f72:	49a5      	ldr	r1, [pc, #660]	; (8003208 <__ssvfiscanf_r+0x2b0>)
 8002f74:	4fa5      	ldr	r7, [pc, #660]	; (800320c <__ssvfiscanf_r+0x2b4>)
 8002f76:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8003210 <__ssvfiscanf_r+0x2b8>
 8002f7a:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8002f7e:	91a1      	str	r1, [sp, #644]	; 0x284
 8002f80:	9300      	str	r3, [sp, #0]
 8002f82:	7813      	ldrb	r3, [r2, #0]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	f000 815a 	beq.w	800323e <__ssvfiscanf_r+0x2e6>
 8002f8a:	5cf9      	ldrb	r1, [r7, r3]
 8002f8c:	1c55      	adds	r5, r2, #1
 8002f8e:	f011 0108 	ands.w	r1, r1, #8
 8002f92:	d019      	beq.n	8002fc8 <__ssvfiscanf_r+0x70>
 8002f94:	6863      	ldr	r3, [r4, #4]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	dd0f      	ble.n	8002fba <__ssvfiscanf_r+0x62>
 8002f9a:	6823      	ldr	r3, [r4, #0]
 8002f9c:	781a      	ldrb	r2, [r3, #0]
 8002f9e:	5cba      	ldrb	r2, [r7, r2]
 8002fa0:	0712      	lsls	r2, r2, #28
 8002fa2:	d401      	bmi.n	8002fa8 <__ssvfiscanf_r+0x50>
 8002fa4:	462a      	mov	r2, r5
 8002fa6:	e7ec      	b.n	8002f82 <__ssvfiscanf_r+0x2a>
 8002fa8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8002faa:	3301      	adds	r3, #1
 8002fac:	3201      	adds	r2, #1
 8002fae:	9245      	str	r2, [sp, #276]	; 0x114
 8002fb0:	6862      	ldr	r2, [r4, #4]
 8002fb2:	6023      	str	r3, [r4, #0]
 8002fb4:	3a01      	subs	r2, #1
 8002fb6:	6062      	str	r2, [r4, #4]
 8002fb8:	e7ec      	b.n	8002f94 <__ssvfiscanf_r+0x3c>
 8002fba:	4621      	mov	r1, r4
 8002fbc:	4630      	mov	r0, r6
 8002fbe:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8002fc0:	4798      	blx	r3
 8002fc2:	2800      	cmp	r0, #0
 8002fc4:	d0e9      	beq.n	8002f9a <__ssvfiscanf_r+0x42>
 8002fc6:	e7ed      	b.n	8002fa4 <__ssvfiscanf_r+0x4c>
 8002fc8:	2b25      	cmp	r3, #37	; 0x25
 8002fca:	d012      	beq.n	8002ff2 <__ssvfiscanf_r+0x9a>
 8002fcc:	469a      	mov	sl, r3
 8002fce:	6863      	ldr	r3, [r4, #4]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	f340 8092 	ble.w	80030fa <__ssvfiscanf_r+0x1a2>
 8002fd6:	6822      	ldr	r2, [r4, #0]
 8002fd8:	7813      	ldrb	r3, [r2, #0]
 8002fda:	4553      	cmp	r3, sl
 8002fdc:	f040 812f 	bne.w	800323e <__ssvfiscanf_r+0x2e6>
 8002fe0:	6863      	ldr	r3, [r4, #4]
 8002fe2:	3201      	adds	r2, #1
 8002fe4:	3b01      	subs	r3, #1
 8002fe6:	6063      	str	r3, [r4, #4]
 8002fe8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8002fea:	6022      	str	r2, [r4, #0]
 8002fec:	3301      	adds	r3, #1
 8002fee:	9345      	str	r3, [sp, #276]	; 0x114
 8002ff0:	e7d8      	b.n	8002fa4 <__ssvfiscanf_r+0x4c>
 8002ff2:	9141      	str	r1, [sp, #260]	; 0x104
 8002ff4:	9143      	str	r1, [sp, #268]	; 0x10c
 8002ff6:	7853      	ldrb	r3, [r2, #1]
 8002ff8:	2b2a      	cmp	r3, #42	; 0x2a
 8002ffa:	bf04      	itt	eq
 8002ffc:	2310      	moveq	r3, #16
 8002ffe:	1c95      	addeq	r5, r2, #2
 8003000:	f04f 020a 	mov.w	r2, #10
 8003004:	bf08      	it	eq
 8003006:	9341      	streq	r3, [sp, #260]	; 0x104
 8003008:	46aa      	mov	sl, r5
 800300a:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800300e:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8003012:	2b09      	cmp	r3, #9
 8003014:	d91c      	bls.n	8003050 <__ssvfiscanf_r+0xf8>
 8003016:	2203      	movs	r2, #3
 8003018:	487d      	ldr	r0, [pc, #500]	; (8003210 <__ssvfiscanf_r+0x2b8>)
 800301a:	f000 fef7 	bl	8003e0c <memchr>
 800301e:	b138      	cbz	r0, 8003030 <__ssvfiscanf_r+0xd8>
 8003020:	2301      	movs	r3, #1
 8003022:	4655      	mov	r5, sl
 8003024:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8003026:	eba0 0009 	sub.w	r0, r0, r9
 800302a:	4083      	lsls	r3, r0
 800302c:	4313      	orrs	r3, r2
 800302e:	9341      	str	r3, [sp, #260]	; 0x104
 8003030:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003034:	2b78      	cmp	r3, #120	; 0x78
 8003036:	d806      	bhi.n	8003046 <__ssvfiscanf_r+0xee>
 8003038:	2b57      	cmp	r3, #87	; 0x57
 800303a:	d810      	bhi.n	800305e <__ssvfiscanf_r+0x106>
 800303c:	2b25      	cmp	r3, #37	; 0x25
 800303e:	d0c5      	beq.n	8002fcc <__ssvfiscanf_r+0x74>
 8003040:	d856      	bhi.n	80030f0 <__ssvfiscanf_r+0x198>
 8003042:	2b00      	cmp	r3, #0
 8003044:	d064      	beq.n	8003110 <__ssvfiscanf_r+0x1b8>
 8003046:	2303      	movs	r3, #3
 8003048:	9347      	str	r3, [sp, #284]	; 0x11c
 800304a:	230a      	movs	r3, #10
 800304c:	9342      	str	r3, [sp, #264]	; 0x108
 800304e:	e075      	b.n	800313c <__ssvfiscanf_r+0x1e4>
 8003050:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8003052:	4655      	mov	r5, sl
 8003054:	fb02 1103 	mla	r1, r2, r3, r1
 8003058:	3930      	subs	r1, #48	; 0x30
 800305a:	9143      	str	r1, [sp, #268]	; 0x10c
 800305c:	e7d4      	b.n	8003008 <__ssvfiscanf_r+0xb0>
 800305e:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8003062:	2a20      	cmp	r2, #32
 8003064:	d8ef      	bhi.n	8003046 <__ssvfiscanf_r+0xee>
 8003066:	a101      	add	r1, pc, #4	; (adr r1, 800306c <__ssvfiscanf_r+0x114>)
 8003068:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800306c:	0800311f 	.word	0x0800311f
 8003070:	08003047 	.word	0x08003047
 8003074:	08003047 	.word	0x08003047
 8003078:	0800317d 	.word	0x0800317d
 800307c:	08003047 	.word	0x08003047
 8003080:	08003047 	.word	0x08003047
 8003084:	08003047 	.word	0x08003047
 8003088:	08003047 	.word	0x08003047
 800308c:	08003047 	.word	0x08003047
 8003090:	08003047 	.word	0x08003047
 8003094:	08003047 	.word	0x08003047
 8003098:	08003193 	.word	0x08003193
 800309c:	08003179 	.word	0x08003179
 80030a0:	080030f7 	.word	0x080030f7
 80030a4:	080030f7 	.word	0x080030f7
 80030a8:	080030f7 	.word	0x080030f7
 80030ac:	08003047 	.word	0x08003047
 80030b0:	08003135 	.word	0x08003135
 80030b4:	08003047 	.word	0x08003047
 80030b8:	08003047 	.word	0x08003047
 80030bc:	08003047 	.word	0x08003047
 80030c0:	08003047 	.word	0x08003047
 80030c4:	080031a3 	.word	0x080031a3
 80030c8:	08003171 	.word	0x08003171
 80030cc:	08003117 	.word	0x08003117
 80030d0:	08003047 	.word	0x08003047
 80030d4:	08003047 	.word	0x08003047
 80030d8:	0800319f 	.word	0x0800319f
 80030dc:	08003047 	.word	0x08003047
 80030e0:	08003179 	.word	0x08003179
 80030e4:	08003047 	.word	0x08003047
 80030e8:	08003047 	.word	0x08003047
 80030ec:	0800311f 	.word	0x0800311f
 80030f0:	3b45      	subs	r3, #69	; 0x45
 80030f2:	2b02      	cmp	r3, #2
 80030f4:	d8a7      	bhi.n	8003046 <__ssvfiscanf_r+0xee>
 80030f6:	2305      	movs	r3, #5
 80030f8:	e01f      	b.n	800313a <__ssvfiscanf_r+0x1e2>
 80030fa:	4621      	mov	r1, r4
 80030fc:	4630      	mov	r0, r6
 80030fe:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003100:	4798      	blx	r3
 8003102:	2800      	cmp	r0, #0
 8003104:	f43f af67 	beq.w	8002fd6 <__ssvfiscanf_r+0x7e>
 8003108:	9844      	ldr	r0, [sp, #272]	; 0x110
 800310a:	2800      	cmp	r0, #0
 800310c:	f040 808d 	bne.w	800322a <__ssvfiscanf_r+0x2d2>
 8003110:	f04f 30ff 	mov.w	r0, #4294967295
 8003114:	e08f      	b.n	8003236 <__ssvfiscanf_r+0x2de>
 8003116:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8003118:	f042 0220 	orr.w	r2, r2, #32
 800311c:	9241      	str	r2, [sp, #260]	; 0x104
 800311e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8003120:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003124:	9241      	str	r2, [sp, #260]	; 0x104
 8003126:	2210      	movs	r2, #16
 8003128:	2b6f      	cmp	r3, #111	; 0x6f
 800312a:	bf34      	ite	cc
 800312c:	2303      	movcc	r3, #3
 800312e:	2304      	movcs	r3, #4
 8003130:	9242      	str	r2, [sp, #264]	; 0x108
 8003132:	e002      	b.n	800313a <__ssvfiscanf_r+0x1e2>
 8003134:	2300      	movs	r3, #0
 8003136:	9342      	str	r3, [sp, #264]	; 0x108
 8003138:	2303      	movs	r3, #3
 800313a:	9347      	str	r3, [sp, #284]	; 0x11c
 800313c:	6863      	ldr	r3, [r4, #4]
 800313e:	2b00      	cmp	r3, #0
 8003140:	dd3d      	ble.n	80031be <__ssvfiscanf_r+0x266>
 8003142:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003144:	0659      	lsls	r1, r3, #25
 8003146:	d404      	bmi.n	8003152 <__ssvfiscanf_r+0x1fa>
 8003148:	6823      	ldr	r3, [r4, #0]
 800314a:	781a      	ldrb	r2, [r3, #0]
 800314c:	5cba      	ldrb	r2, [r7, r2]
 800314e:	0712      	lsls	r2, r2, #28
 8003150:	d43c      	bmi.n	80031cc <__ssvfiscanf_r+0x274>
 8003152:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8003154:	2b02      	cmp	r3, #2
 8003156:	dc4b      	bgt.n	80031f0 <__ssvfiscanf_r+0x298>
 8003158:	466b      	mov	r3, sp
 800315a:	4622      	mov	r2, r4
 800315c:	4630      	mov	r0, r6
 800315e:	a941      	add	r1, sp, #260	; 0x104
 8003160:	f000 fb48 	bl	80037f4 <_scanf_chars>
 8003164:	2801      	cmp	r0, #1
 8003166:	d06a      	beq.n	800323e <__ssvfiscanf_r+0x2e6>
 8003168:	2802      	cmp	r0, #2
 800316a:	f47f af1b 	bne.w	8002fa4 <__ssvfiscanf_r+0x4c>
 800316e:	e7cb      	b.n	8003108 <__ssvfiscanf_r+0x1b0>
 8003170:	2308      	movs	r3, #8
 8003172:	9342      	str	r3, [sp, #264]	; 0x108
 8003174:	2304      	movs	r3, #4
 8003176:	e7e0      	b.n	800313a <__ssvfiscanf_r+0x1e2>
 8003178:	220a      	movs	r2, #10
 800317a:	e7d5      	b.n	8003128 <__ssvfiscanf_r+0x1d0>
 800317c:	4629      	mov	r1, r5
 800317e:	4640      	mov	r0, r8
 8003180:	f000 fd2e 	bl	8003be0 <__sccl>
 8003184:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003186:	4605      	mov	r5, r0
 8003188:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800318c:	9341      	str	r3, [sp, #260]	; 0x104
 800318e:	2301      	movs	r3, #1
 8003190:	e7d3      	b.n	800313a <__ssvfiscanf_r+0x1e2>
 8003192:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003194:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003198:	9341      	str	r3, [sp, #260]	; 0x104
 800319a:	2300      	movs	r3, #0
 800319c:	e7cd      	b.n	800313a <__ssvfiscanf_r+0x1e2>
 800319e:	2302      	movs	r3, #2
 80031a0:	e7cb      	b.n	800313a <__ssvfiscanf_r+0x1e2>
 80031a2:	9841      	ldr	r0, [sp, #260]	; 0x104
 80031a4:	06c3      	lsls	r3, r0, #27
 80031a6:	f53f aefd 	bmi.w	8002fa4 <__ssvfiscanf_r+0x4c>
 80031aa:	9b00      	ldr	r3, [sp, #0]
 80031ac:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80031ae:	1d19      	adds	r1, r3, #4
 80031b0:	9100      	str	r1, [sp, #0]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	07c0      	lsls	r0, r0, #31
 80031b6:	bf4c      	ite	mi
 80031b8:	801a      	strhmi	r2, [r3, #0]
 80031ba:	601a      	strpl	r2, [r3, #0]
 80031bc:	e6f2      	b.n	8002fa4 <__ssvfiscanf_r+0x4c>
 80031be:	4621      	mov	r1, r4
 80031c0:	4630      	mov	r0, r6
 80031c2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80031c4:	4798      	blx	r3
 80031c6:	2800      	cmp	r0, #0
 80031c8:	d0bb      	beq.n	8003142 <__ssvfiscanf_r+0x1ea>
 80031ca:	e79d      	b.n	8003108 <__ssvfiscanf_r+0x1b0>
 80031cc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80031ce:	3201      	adds	r2, #1
 80031d0:	9245      	str	r2, [sp, #276]	; 0x114
 80031d2:	6862      	ldr	r2, [r4, #4]
 80031d4:	3a01      	subs	r2, #1
 80031d6:	2a00      	cmp	r2, #0
 80031d8:	6062      	str	r2, [r4, #4]
 80031da:	dd02      	ble.n	80031e2 <__ssvfiscanf_r+0x28a>
 80031dc:	3301      	adds	r3, #1
 80031de:	6023      	str	r3, [r4, #0]
 80031e0:	e7b2      	b.n	8003148 <__ssvfiscanf_r+0x1f0>
 80031e2:	4621      	mov	r1, r4
 80031e4:	4630      	mov	r0, r6
 80031e6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80031e8:	4798      	blx	r3
 80031ea:	2800      	cmp	r0, #0
 80031ec:	d0ac      	beq.n	8003148 <__ssvfiscanf_r+0x1f0>
 80031ee:	e78b      	b.n	8003108 <__ssvfiscanf_r+0x1b0>
 80031f0:	2b04      	cmp	r3, #4
 80031f2:	dc0f      	bgt.n	8003214 <__ssvfiscanf_r+0x2bc>
 80031f4:	466b      	mov	r3, sp
 80031f6:	4622      	mov	r2, r4
 80031f8:	4630      	mov	r0, r6
 80031fa:	a941      	add	r1, sp, #260	; 0x104
 80031fc:	f000 fb54 	bl	80038a8 <_scanf_i>
 8003200:	e7b0      	b.n	8003164 <__ssvfiscanf_r+0x20c>
 8003202:	bf00      	nop
 8003204:	08002ea5 	.word	0x08002ea5
 8003208:	08002f1f 	.word	0x08002f1f
 800320c:	080042ab 	.word	0x080042ab
 8003210:	0800425c 	.word	0x0800425c
 8003214:	4b0b      	ldr	r3, [pc, #44]	; (8003244 <__ssvfiscanf_r+0x2ec>)
 8003216:	2b00      	cmp	r3, #0
 8003218:	f43f aec4 	beq.w	8002fa4 <__ssvfiscanf_r+0x4c>
 800321c:	466b      	mov	r3, sp
 800321e:	4622      	mov	r2, r4
 8003220:	4630      	mov	r0, r6
 8003222:	a941      	add	r1, sp, #260	; 0x104
 8003224:	f3af 8000 	nop.w
 8003228:	e79c      	b.n	8003164 <__ssvfiscanf_r+0x20c>
 800322a:	89a3      	ldrh	r3, [r4, #12]
 800322c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003230:	bf18      	it	ne
 8003232:	f04f 30ff 	movne.w	r0, #4294967295
 8003236:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800323a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800323e:	9844      	ldr	r0, [sp, #272]	; 0x110
 8003240:	e7f9      	b.n	8003236 <__ssvfiscanf_r+0x2de>
 8003242:	bf00      	nop
 8003244:	00000000 	.word	0x00000000

08003248 <__sfputc_r>:
 8003248:	6893      	ldr	r3, [r2, #8]
 800324a:	b410      	push	{r4}
 800324c:	3b01      	subs	r3, #1
 800324e:	2b00      	cmp	r3, #0
 8003250:	6093      	str	r3, [r2, #8]
 8003252:	da07      	bge.n	8003264 <__sfputc_r+0x1c>
 8003254:	6994      	ldr	r4, [r2, #24]
 8003256:	42a3      	cmp	r3, r4
 8003258:	db01      	blt.n	800325e <__sfputc_r+0x16>
 800325a:	290a      	cmp	r1, #10
 800325c:	d102      	bne.n	8003264 <__sfputc_r+0x1c>
 800325e:	bc10      	pop	{r4}
 8003260:	f000 bd2f 	b.w	8003cc2 <__swbuf_r>
 8003264:	6813      	ldr	r3, [r2, #0]
 8003266:	1c58      	adds	r0, r3, #1
 8003268:	6010      	str	r0, [r2, #0]
 800326a:	7019      	strb	r1, [r3, #0]
 800326c:	4608      	mov	r0, r1
 800326e:	bc10      	pop	{r4}
 8003270:	4770      	bx	lr

08003272 <__sfputs_r>:
 8003272:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003274:	4606      	mov	r6, r0
 8003276:	460f      	mov	r7, r1
 8003278:	4614      	mov	r4, r2
 800327a:	18d5      	adds	r5, r2, r3
 800327c:	42ac      	cmp	r4, r5
 800327e:	d101      	bne.n	8003284 <__sfputs_r+0x12>
 8003280:	2000      	movs	r0, #0
 8003282:	e007      	b.n	8003294 <__sfputs_r+0x22>
 8003284:	463a      	mov	r2, r7
 8003286:	4630      	mov	r0, r6
 8003288:	f814 1b01 	ldrb.w	r1, [r4], #1
 800328c:	f7ff ffdc 	bl	8003248 <__sfputc_r>
 8003290:	1c43      	adds	r3, r0, #1
 8003292:	d1f3      	bne.n	800327c <__sfputs_r+0xa>
 8003294:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003298 <_vfiprintf_r>:
 8003298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800329c:	460d      	mov	r5, r1
 800329e:	4614      	mov	r4, r2
 80032a0:	4698      	mov	r8, r3
 80032a2:	4606      	mov	r6, r0
 80032a4:	b09d      	sub	sp, #116	; 0x74
 80032a6:	b118      	cbz	r0, 80032b0 <_vfiprintf_r+0x18>
 80032a8:	6a03      	ldr	r3, [r0, #32]
 80032aa:	b90b      	cbnz	r3, 80032b0 <_vfiprintf_r+0x18>
 80032ac:	f7ff fbd2 	bl	8002a54 <__sinit>
 80032b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80032b2:	07d9      	lsls	r1, r3, #31
 80032b4:	d405      	bmi.n	80032c2 <_vfiprintf_r+0x2a>
 80032b6:	89ab      	ldrh	r3, [r5, #12]
 80032b8:	059a      	lsls	r2, r3, #22
 80032ba:	d402      	bmi.n	80032c2 <_vfiprintf_r+0x2a>
 80032bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80032be:	f7ff fcfa 	bl	8002cb6 <__retarget_lock_acquire_recursive>
 80032c2:	89ab      	ldrh	r3, [r5, #12]
 80032c4:	071b      	lsls	r3, r3, #28
 80032c6:	d501      	bpl.n	80032cc <_vfiprintf_r+0x34>
 80032c8:	692b      	ldr	r3, [r5, #16]
 80032ca:	b99b      	cbnz	r3, 80032f4 <_vfiprintf_r+0x5c>
 80032cc:	4629      	mov	r1, r5
 80032ce:	4630      	mov	r0, r6
 80032d0:	f000 fd34 	bl	8003d3c <__swsetup_r>
 80032d4:	b170      	cbz	r0, 80032f4 <_vfiprintf_r+0x5c>
 80032d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80032d8:	07dc      	lsls	r4, r3, #31
 80032da:	d504      	bpl.n	80032e6 <_vfiprintf_r+0x4e>
 80032dc:	f04f 30ff 	mov.w	r0, #4294967295
 80032e0:	b01d      	add	sp, #116	; 0x74
 80032e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80032e6:	89ab      	ldrh	r3, [r5, #12]
 80032e8:	0598      	lsls	r0, r3, #22
 80032ea:	d4f7      	bmi.n	80032dc <_vfiprintf_r+0x44>
 80032ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80032ee:	f7ff fce3 	bl	8002cb8 <__retarget_lock_release_recursive>
 80032f2:	e7f3      	b.n	80032dc <_vfiprintf_r+0x44>
 80032f4:	2300      	movs	r3, #0
 80032f6:	9309      	str	r3, [sp, #36]	; 0x24
 80032f8:	2320      	movs	r3, #32
 80032fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80032fe:	2330      	movs	r3, #48	; 0x30
 8003300:	f04f 0901 	mov.w	r9, #1
 8003304:	f8cd 800c 	str.w	r8, [sp, #12]
 8003308:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80034b8 <_vfiprintf_r+0x220>
 800330c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003310:	4623      	mov	r3, r4
 8003312:	469a      	mov	sl, r3
 8003314:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003318:	b10a      	cbz	r2, 800331e <_vfiprintf_r+0x86>
 800331a:	2a25      	cmp	r2, #37	; 0x25
 800331c:	d1f9      	bne.n	8003312 <_vfiprintf_r+0x7a>
 800331e:	ebba 0b04 	subs.w	fp, sl, r4
 8003322:	d00b      	beq.n	800333c <_vfiprintf_r+0xa4>
 8003324:	465b      	mov	r3, fp
 8003326:	4622      	mov	r2, r4
 8003328:	4629      	mov	r1, r5
 800332a:	4630      	mov	r0, r6
 800332c:	f7ff ffa1 	bl	8003272 <__sfputs_r>
 8003330:	3001      	adds	r0, #1
 8003332:	f000 80a9 	beq.w	8003488 <_vfiprintf_r+0x1f0>
 8003336:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003338:	445a      	add	r2, fp
 800333a:	9209      	str	r2, [sp, #36]	; 0x24
 800333c:	f89a 3000 	ldrb.w	r3, [sl]
 8003340:	2b00      	cmp	r3, #0
 8003342:	f000 80a1 	beq.w	8003488 <_vfiprintf_r+0x1f0>
 8003346:	2300      	movs	r3, #0
 8003348:	f04f 32ff 	mov.w	r2, #4294967295
 800334c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003350:	f10a 0a01 	add.w	sl, sl, #1
 8003354:	9304      	str	r3, [sp, #16]
 8003356:	9307      	str	r3, [sp, #28]
 8003358:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800335c:	931a      	str	r3, [sp, #104]	; 0x68
 800335e:	4654      	mov	r4, sl
 8003360:	2205      	movs	r2, #5
 8003362:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003366:	4854      	ldr	r0, [pc, #336]	; (80034b8 <_vfiprintf_r+0x220>)
 8003368:	f000 fd50 	bl	8003e0c <memchr>
 800336c:	9a04      	ldr	r2, [sp, #16]
 800336e:	b9d8      	cbnz	r0, 80033a8 <_vfiprintf_r+0x110>
 8003370:	06d1      	lsls	r1, r2, #27
 8003372:	bf44      	itt	mi
 8003374:	2320      	movmi	r3, #32
 8003376:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800337a:	0713      	lsls	r3, r2, #28
 800337c:	bf44      	itt	mi
 800337e:	232b      	movmi	r3, #43	; 0x2b
 8003380:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003384:	f89a 3000 	ldrb.w	r3, [sl]
 8003388:	2b2a      	cmp	r3, #42	; 0x2a
 800338a:	d015      	beq.n	80033b8 <_vfiprintf_r+0x120>
 800338c:	4654      	mov	r4, sl
 800338e:	2000      	movs	r0, #0
 8003390:	f04f 0c0a 	mov.w	ip, #10
 8003394:	9a07      	ldr	r2, [sp, #28]
 8003396:	4621      	mov	r1, r4
 8003398:	f811 3b01 	ldrb.w	r3, [r1], #1
 800339c:	3b30      	subs	r3, #48	; 0x30
 800339e:	2b09      	cmp	r3, #9
 80033a0:	d94d      	bls.n	800343e <_vfiprintf_r+0x1a6>
 80033a2:	b1b0      	cbz	r0, 80033d2 <_vfiprintf_r+0x13a>
 80033a4:	9207      	str	r2, [sp, #28]
 80033a6:	e014      	b.n	80033d2 <_vfiprintf_r+0x13a>
 80033a8:	eba0 0308 	sub.w	r3, r0, r8
 80033ac:	fa09 f303 	lsl.w	r3, r9, r3
 80033b0:	4313      	orrs	r3, r2
 80033b2:	46a2      	mov	sl, r4
 80033b4:	9304      	str	r3, [sp, #16]
 80033b6:	e7d2      	b.n	800335e <_vfiprintf_r+0xc6>
 80033b8:	9b03      	ldr	r3, [sp, #12]
 80033ba:	1d19      	adds	r1, r3, #4
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	9103      	str	r1, [sp, #12]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	bfbb      	ittet	lt
 80033c4:	425b      	neglt	r3, r3
 80033c6:	f042 0202 	orrlt.w	r2, r2, #2
 80033ca:	9307      	strge	r3, [sp, #28]
 80033cc:	9307      	strlt	r3, [sp, #28]
 80033ce:	bfb8      	it	lt
 80033d0:	9204      	strlt	r2, [sp, #16]
 80033d2:	7823      	ldrb	r3, [r4, #0]
 80033d4:	2b2e      	cmp	r3, #46	; 0x2e
 80033d6:	d10c      	bne.n	80033f2 <_vfiprintf_r+0x15a>
 80033d8:	7863      	ldrb	r3, [r4, #1]
 80033da:	2b2a      	cmp	r3, #42	; 0x2a
 80033dc:	d134      	bne.n	8003448 <_vfiprintf_r+0x1b0>
 80033de:	9b03      	ldr	r3, [sp, #12]
 80033e0:	3402      	adds	r4, #2
 80033e2:	1d1a      	adds	r2, r3, #4
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	9203      	str	r2, [sp, #12]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	bfb8      	it	lt
 80033ec:	f04f 33ff 	movlt.w	r3, #4294967295
 80033f0:	9305      	str	r3, [sp, #20]
 80033f2:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80034bc <_vfiprintf_r+0x224>
 80033f6:	2203      	movs	r2, #3
 80033f8:	4650      	mov	r0, sl
 80033fa:	7821      	ldrb	r1, [r4, #0]
 80033fc:	f000 fd06 	bl	8003e0c <memchr>
 8003400:	b138      	cbz	r0, 8003412 <_vfiprintf_r+0x17a>
 8003402:	2240      	movs	r2, #64	; 0x40
 8003404:	9b04      	ldr	r3, [sp, #16]
 8003406:	eba0 000a 	sub.w	r0, r0, sl
 800340a:	4082      	lsls	r2, r0
 800340c:	4313      	orrs	r3, r2
 800340e:	3401      	adds	r4, #1
 8003410:	9304      	str	r3, [sp, #16]
 8003412:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003416:	2206      	movs	r2, #6
 8003418:	4829      	ldr	r0, [pc, #164]	; (80034c0 <_vfiprintf_r+0x228>)
 800341a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800341e:	f000 fcf5 	bl	8003e0c <memchr>
 8003422:	2800      	cmp	r0, #0
 8003424:	d03f      	beq.n	80034a6 <_vfiprintf_r+0x20e>
 8003426:	4b27      	ldr	r3, [pc, #156]	; (80034c4 <_vfiprintf_r+0x22c>)
 8003428:	bb1b      	cbnz	r3, 8003472 <_vfiprintf_r+0x1da>
 800342a:	9b03      	ldr	r3, [sp, #12]
 800342c:	3307      	adds	r3, #7
 800342e:	f023 0307 	bic.w	r3, r3, #7
 8003432:	3308      	adds	r3, #8
 8003434:	9303      	str	r3, [sp, #12]
 8003436:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003438:	443b      	add	r3, r7
 800343a:	9309      	str	r3, [sp, #36]	; 0x24
 800343c:	e768      	b.n	8003310 <_vfiprintf_r+0x78>
 800343e:	460c      	mov	r4, r1
 8003440:	2001      	movs	r0, #1
 8003442:	fb0c 3202 	mla	r2, ip, r2, r3
 8003446:	e7a6      	b.n	8003396 <_vfiprintf_r+0xfe>
 8003448:	2300      	movs	r3, #0
 800344a:	f04f 0c0a 	mov.w	ip, #10
 800344e:	4619      	mov	r1, r3
 8003450:	3401      	adds	r4, #1
 8003452:	9305      	str	r3, [sp, #20]
 8003454:	4620      	mov	r0, r4
 8003456:	f810 2b01 	ldrb.w	r2, [r0], #1
 800345a:	3a30      	subs	r2, #48	; 0x30
 800345c:	2a09      	cmp	r2, #9
 800345e:	d903      	bls.n	8003468 <_vfiprintf_r+0x1d0>
 8003460:	2b00      	cmp	r3, #0
 8003462:	d0c6      	beq.n	80033f2 <_vfiprintf_r+0x15a>
 8003464:	9105      	str	r1, [sp, #20]
 8003466:	e7c4      	b.n	80033f2 <_vfiprintf_r+0x15a>
 8003468:	4604      	mov	r4, r0
 800346a:	2301      	movs	r3, #1
 800346c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003470:	e7f0      	b.n	8003454 <_vfiprintf_r+0x1bc>
 8003472:	ab03      	add	r3, sp, #12
 8003474:	9300      	str	r3, [sp, #0]
 8003476:	462a      	mov	r2, r5
 8003478:	4630      	mov	r0, r6
 800347a:	4b13      	ldr	r3, [pc, #76]	; (80034c8 <_vfiprintf_r+0x230>)
 800347c:	a904      	add	r1, sp, #16
 800347e:	f3af 8000 	nop.w
 8003482:	4607      	mov	r7, r0
 8003484:	1c78      	adds	r0, r7, #1
 8003486:	d1d6      	bne.n	8003436 <_vfiprintf_r+0x19e>
 8003488:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800348a:	07d9      	lsls	r1, r3, #31
 800348c:	d405      	bmi.n	800349a <_vfiprintf_r+0x202>
 800348e:	89ab      	ldrh	r3, [r5, #12]
 8003490:	059a      	lsls	r2, r3, #22
 8003492:	d402      	bmi.n	800349a <_vfiprintf_r+0x202>
 8003494:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003496:	f7ff fc0f 	bl	8002cb8 <__retarget_lock_release_recursive>
 800349a:	89ab      	ldrh	r3, [r5, #12]
 800349c:	065b      	lsls	r3, r3, #25
 800349e:	f53f af1d 	bmi.w	80032dc <_vfiprintf_r+0x44>
 80034a2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80034a4:	e71c      	b.n	80032e0 <_vfiprintf_r+0x48>
 80034a6:	ab03      	add	r3, sp, #12
 80034a8:	9300      	str	r3, [sp, #0]
 80034aa:	462a      	mov	r2, r5
 80034ac:	4630      	mov	r0, r6
 80034ae:	4b06      	ldr	r3, [pc, #24]	; (80034c8 <_vfiprintf_r+0x230>)
 80034b0:	a904      	add	r1, sp, #16
 80034b2:	f000 f87d 	bl	80035b0 <_printf_i>
 80034b6:	e7e4      	b.n	8003482 <_vfiprintf_r+0x1ea>
 80034b8:	08004260 	.word	0x08004260
 80034bc:	0800425c 	.word	0x0800425c
 80034c0:	08004266 	.word	0x08004266
 80034c4:	00000000 	.word	0x00000000
 80034c8:	08003273 	.word	0x08003273

080034cc <_printf_common>:
 80034cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80034d0:	4616      	mov	r6, r2
 80034d2:	4699      	mov	r9, r3
 80034d4:	688a      	ldr	r2, [r1, #8]
 80034d6:	690b      	ldr	r3, [r1, #16]
 80034d8:	4607      	mov	r7, r0
 80034da:	4293      	cmp	r3, r2
 80034dc:	bfb8      	it	lt
 80034de:	4613      	movlt	r3, r2
 80034e0:	6033      	str	r3, [r6, #0]
 80034e2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80034e6:	460c      	mov	r4, r1
 80034e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80034ec:	b10a      	cbz	r2, 80034f2 <_printf_common+0x26>
 80034ee:	3301      	adds	r3, #1
 80034f0:	6033      	str	r3, [r6, #0]
 80034f2:	6823      	ldr	r3, [r4, #0]
 80034f4:	0699      	lsls	r1, r3, #26
 80034f6:	bf42      	ittt	mi
 80034f8:	6833      	ldrmi	r3, [r6, #0]
 80034fa:	3302      	addmi	r3, #2
 80034fc:	6033      	strmi	r3, [r6, #0]
 80034fe:	6825      	ldr	r5, [r4, #0]
 8003500:	f015 0506 	ands.w	r5, r5, #6
 8003504:	d106      	bne.n	8003514 <_printf_common+0x48>
 8003506:	f104 0a19 	add.w	sl, r4, #25
 800350a:	68e3      	ldr	r3, [r4, #12]
 800350c:	6832      	ldr	r2, [r6, #0]
 800350e:	1a9b      	subs	r3, r3, r2
 8003510:	42ab      	cmp	r3, r5
 8003512:	dc2b      	bgt.n	800356c <_printf_common+0xa0>
 8003514:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003518:	1e13      	subs	r3, r2, #0
 800351a:	6822      	ldr	r2, [r4, #0]
 800351c:	bf18      	it	ne
 800351e:	2301      	movne	r3, #1
 8003520:	0692      	lsls	r2, r2, #26
 8003522:	d430      	bmi.n	8003586 <_printf_common+0xba>
 8003524:	4649      	mov	r1, r9
 8003526:	4638      	mov	r0, r7
 8003528:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800352c:	47c0      	blx	r8
 800352e:	3001      	adds	r0, #1
 8003530:	d023      	beq.n	800357a <_printf_common+0xae>
 8003532:	6823      	ldr	r3, [r4, #0]
 8003534:	6922      	ldr	r2, [r4, #16]
 8003536:	f003 0306 	and.w	r3, r3, #6
 800353a:	2b04      	cmp	r3, #4
 800353c:	bf14      	ite	ne
 800353e:	2500      	movne	r5, #0
 8003540:	6833      	ldreq	r3, [r6, #0]
 8003542:	f04f 0600 	mov.w	r6, #0
 8003546:	bf08      	it	eq
 8003548:	68e5      	ldreq	r5, [r4, #12]
 800354a:	f104 041a 	add.w	r4, r4, #26
 800354e:	bf08      	it	eq
 8003550:	1aed      	subeq	r5, r5, r3
 8003552:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003556:	bf08      	it	eq
 8003558:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800355c:	4293      	cmp	r3, r2
 800355e:	bfc4      	itt	gt
 8003560:	1a9b      	subgt	r3, r3, r2
 8003562:	18ed      	addgt	r5, r5, r3
 8003564:	42b5      	cmp	r5, r6
 8003566:	d11a      	bne.n	800359e <_printf_common+0xd2>
 8003568:	2000      	movs	r0, #0
 800356a:	e008      	b.n	800357e <_printf_common+0xb2>
 800356c:	2301      	movs	r3, #1
 800356e:	4652      	mov	r2, sl
 8003570:	4649      	mov	r1, r9
 8003572:	4638      	mov	r0, r7
 8003574:	47c0      	blx	r8
 8003576:	3001      	adds	r0, #1
 8003578:	d103      	bne.n	8003582 <_printf_common+0xb6>
 800357a:	f04f 30ff 	mov.w	r0, #4294967295
 800357e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003582:	3501      	adds	r5, #1
 8003584:	e7c1      	b.n	800350a <_printf_common+0x3e>
 8003586:	2030      	movs	r0, #48	; 0x30
 8003588:	18e1      	adds	r1, r4, r3
 800358a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800358e:	1c5a      	adds	r2, r3, #1
 8003590:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003594:	4422      	add	r2, r4
 8003596:	3302      	adds	r3, #2
 8003598:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800359c:	e7c2      	b.n	8003524 <_printf_common+0x58>
 800359e:	2301      	movs	r3, #1
 80035a0:	4622      	mov	r2, r4
 80035a2:	4649      	mov	r1, r9
 80035a4:	4638      	mov	r0, r7
 80035a6:	47c0      	blx	r8
 80035a8:	3001      	adds	r0, #1
 80035aa:	d0e6      	beq.n	800357a <_printf_common+0xae>
 80035ac:	3601      	adds	r6, #1
 80035ae:	e7d9      	b.n	8003564 <_printf_common+0x98>

080035b0 <_printf_i>:
 80035b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80035b4:	7e0f      	ldrb	r7, [r1, #24]
 80035b6:	4691      	mov	r9, r2
 80035b8:	2f78      	cmp	r7, #120	; 0x78
 80035ba:	4680      	mov	r8, r0
 80035bc:	460c      	mov	r4, r1
 80035be:	469a      	mov	sl, r3
 80035c0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80035c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80035c6:	d807      	bhi.n	80035d8 <_printf_i+0x28>
 80035c8:	2f62      	cmp	r7, #98	; 0x62
 80035ca:	d80a      	bhi.n	80035e2 <_printf_i+0x32>
 80035cc:	2f00      	cmp	r7, #0
 80035ce:	f000 80d5 	beq.w	800377c <_printf_i+0x1cc>
 80035d2:	2f58      	cmp	r7, #88	; 0x58
 80035d4:	f000 80c1 	beq.w	800375a <_printf_i+0x1aa>
 80035d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80035dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80035e0:	e03a      	b.n	8003658 <_printf_i+0xa8>
 80035e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80035e6:	2b15      	cmp	r3, #21
 80035e8:	d8f6      	bhi.n	80035d8 <_printf_i+0x28>
 80035ea:	a101      	add	r1, pc, #4	; (adr r1, 80035f0 <_printf_i+0x40>)
 80035ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80035f0:	08003649 	.word	0x08003649
 80035f4:	0800365d 	.word	0x0800365d
 80035f8:	080035d9 	.word	0x080035d9
 80035fc:	080035d9 	.word	0x080035d9
 8003600:	080035d9 	.word	0x080035d9
 8003604:	080035d9 	.word	0x080035d9
 8003608:	0800365d 	.word	0x0800365d
 800360c:	080035d9 	.word	0x080035d9
 8003610:	080035d9 	.word	0x080035d9
 8003614:	080035d9 	.word	0x080035d9
 8003618:	080035d9 	.word	0x080035d9
 800361c:	08003763 	.word	0x08003763
 8003620:	08003689 	.word	0x08003689
 8003624:	0800371d 	.word	0x0800371d
 8003628:	080035d9 	.word	0x080035d9
 800362c:	080035d9 	.word	0x080035d9
 8003630:	08003785 	.word	0x08003785
 8003634:	080035d9 	.word	0x080035d9
 8003638:	08003689 	.word	0x08003689
 800363c:	080035d9 	.word	0x080035d9
 8003640:	080035d9 	.word	0x080035d9
 8003644:	08003725 	.word	0x08003725
 8003648:	682b      	ldr	r3, [r5, #0]
 800364a:	1d1a      	adds	r2, r3, #4
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	602a      	str	r2, [r5, #0]
 8003650:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003654:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003658:	2301      	movs	r3, #1
 800365a:	e0a0      	b.n	800379e <_printf_i+0x1ee>
 800365c:	6820      	ldr	r0, [r4, #0]
 800365e:	682b      	ldr	r3, [r5, #0]
 8003660:	0607      	lsls	r7, r0, #24
 8003662:	f103 0104 	add.w	r1, r3, #4
 8003666:	6029      	str	r1, [r5, #0]
 8003668:	d501      	bpl.n	800366e <_printf_i+0xbe>
 800366a:	681e      	ldr	r6, [r3, #0]
 800366c:	e003      	b.n	8003676 <_printf_i+0xc6>
 800366e:	0646      	lsls	r6, r0, #25
 8003670:	d5fb      	bpl.n	800366a <_printf_i+0xba>
 8003672:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003676:	2e00      	cmp	r6, #0
 8003678:	da03      	bge.n	8003682 <_printf_i+0xd2>
 800367a:	232d      	movs	r3, #45	; 0x2d
 800367c:	4276      	negs	r6, r6
 800367e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003682:	230a      	movs	r3, #10
 8003684:	4859      	ldr	r0, [pc, #356]	; (80037ec <_printf_i+0x23c>)
 8003686:	e012      	b.n	80036ae <_printf_i+0xfe>
 8003688:	682b      	ldr	r3, [r5, #0]
 800368a:	6820      	ldr	r0, [r4, #0]
 800368c:	1d19      	adds	r1, r3, #4
 800368e:	6029      	str	r1, [r5, #0]
 8003690:	0605      	lsls	r5, r0, #24
 8003692:	d501      	bpl.n	8003698 <_printf_i+0xe8>
 8003694:	681e      	ldr	r6, [r3, #0]
 8003696:	e002      	b.n	800369e <_printf_i+0xee>
 8003698:	0641      	lsls	r1, r0, #25
 800369a:	d5fb      	bpl.n	8003694 <_printf_i+0xe4>
 800369c:	881e      	ldrh	r6, [r3, #0]
 800369e:	2f6f      	cmp	r7, #111	; 0x6f
 80036a0:	bf0c      	ite	eq
 80036a2:	2308      	moveq	r3, #8
 80036a4:	230a      	movne	r3, #10
 80036a6:	4851      	ldr	r0, [pc, #324]	; (80037ec <_printf_i+0x23c>)
 80036a8:	2100      	movs	r1, #0
 80036aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80036ae:	6865      	ldr	r5, [r4, #4]
 80036b0:	2d00      	cmp	r5, #0
 80036b2:	bfa8      	it	ge
 80036b4:	6821      	ldrge	r1, [r4, #0]
 80036b6:	60a5      	str	r5, [r4, #8]
 80036b8:	bfa4      	itt	ge
 80036ba:	f021 0104 	bicge.w	r1, r1, #4
 80036be:	6021      	strge	r1, [r4, #0]
 80036c0:	b90e      	cbnz	r6, 80036c6 <_printf_i+0x116>
 80036c2:	2d00      	cmp	r5, #0
 80036c4:	d04b      	beq.n	800375e <_printf_i+0x1ae>
 80036c6:	4615      	mov	r5, r2
 80036c8:	fbb6 f1f3 	udiv	r1, r6, r3
 80036cc:	fb03 6711 	mls	r7, r3, r1, r6
 80036d0:	5dc7      	ldrb	r7, [r0, r7]
 80036d2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80036d6:	4637      	mov	r7, r6
 80036d8:	42bb      	cmp	r3, r7
 80036da:	460e      	mov	r6, r1
 80036dc:	d9f4      	bls.n	80036c8 <_printf_i+0x118>
 80036de:	2b08      	cmp	r3, #8
 80036e0:	d10b      	bne.n	80036fa <_printf_i+0x14a>
 80036e2:	6823      	ldr	r3, [r4, #0]
 80036e4:	07de      	lsls	r6, r3, #31
 80036e6:	d508      	bpl.n	80036fa <_printf_i+0x14a>
 80036e8:	6923      	ldr	r3, [r4, #16]
 80036ea:	6861      	ldr	r1, [r4, #4]
 80036ec:	4299      	cmp	r1, r3
 80036ee:	bfde      	ittt	le
 80036f0:	2330      	movle	r3, #48	; 0x30
 80036f2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80036f6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80036fa:	1b52      	subs	r2, r2, r5
 80036fc:	6122      	str	r2, [r4, #16]
 80036fe:	464b      	mov	r3, r9
 8003700:	4621      	mov	r1, r4
 8003702:	4640      	mov	r0, r8
 8003704:	f8cd a000 	str.w	sl, [sp]
 8003708:	aa03      	add	r2, sp, #12
 800370a:	f7ff fedf 	bl	80034cc <_printf_common>
 800370e:	3001      	adds	r0, #1
 8003710:	d14a      	bne.n	80037a8 <_printf_i+0x1f8>
 8003712:	f04f 30ff 	mov.w	r0, #4294967295
 8003716:	b004      	add	sp, #16
 8003718:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800371c:	6823      	ldr	r3, [r4, #0]
 800371e:	f043 0320 	orr.w	r3, r3, #32
 8003722:	6023      	str	r3, [r4, #0]
 8003724:	2778      	movs	r7, #120	; 0x78
 8003726:	4832      	ldr	r0, [pc, #200]	; (80037f0 <_printf_i+0x240>)
 8003728:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800372c:	6823      	ldr	r3, [r4, #0]
 800372e:	6829      	ldr	r1, [r5, #0]
 8003730:	061f      	lsls	r7, r3, #24
 8003732:	f851 6b04 	ldr.w	r6, [r1], #4
 8003736:	d402      	bmi.n	800373e <_printf_i+0x18e>
 8003738:	065f      	lsls	r7, r3, #25
 800373a:	bf48      	it	mi
 800373c:	b2b6      	uxthmi	r6, r6
 800373e:	07df      	lsls	r7, r3, #31
 8003740:	bf48      	it	mi
 8003742:	f043 0320 	orrmi.w	r3, r3, #32
 8003746:	6029      	str	r1, [r5, #0]
 8003748:	bf48      	it	mi
 800374a:	6023      	strmi	r3, [r4, #0]
 800374c:	b91e      	cbnz	r6, 8003756 <_printf_i+0x1a6>
 800374e:	6823      	ldr	r3, [r4, #0]
 8003750:	f023 0320 	bic.w	r3, r3, #32
 8003754:	6023      	str	r3, [r4, #0]
 8003756:	2310      	movs	r3, #16
 8003758:	e7a6      	b.n	80036a8 <_printf_i+0xf8>
 800375a:	4824      	ldr	r0, [pc, #144]	; (80037ec <_printf_i+0x23c>)
 800375c:	e7e4      	b.n	8003728 <_printf_i+0x178>
 800375e:	4615      	mov	r5, r2
 8003760:	e7bd      	b.n	80036de <_printf_i+0x12e>
 8003762:	682b      	ldr	r3, [r5, #0]
 8003764:	6826      	ldr	r6, [r4, #0]
 8003766:	1d18      	adds	r0, r3, #4
 8003768:	6961      	ldr	r1, [r4, #20]
 800376a:	6028      	str	r0, [r5, #0]
 800376c:	0635      	lsls	r5, r6, #24
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	d501      	bpl.n	8003776 <_printf_i+0x1c6>
 8003772:	6019      	str	r1, [r3, #0]
 8003774:	e002      	b.n	800377c <_printf_i+0x1cc>
 8003776:	0670      	lsls	r0, r6, #25
 8003778:	d5fb      	bpl.n	8003772 <_printf_i+0x1c2>
 800377a:	8019      	strh	r1, [r3, #0]
 800377c:	2300      	movs	r3, #0
 800377e:	4615      	mov	r5, r2
 8003780:	6123      	str	r3, [r4, #16]
 8003782:	e7bc      	b.n	80036fe <_printf_i+0x14e>
 8003784:	682b      	ldr	r3, [r5, #0]
 8003786:	2100      	movs	r1, #0
 8003788:	1d1a      	adds	r2, r3, #4
 800378a:	602a      	str	r2, [r5, #0]
 800378c:	681d      	ldr	r5, [r3, #0]
 800378e:	6862      	ldr	r2, [r4, #4]
 8003790:	4628      	mov	r0, r5
 8003792:	f000 fb3b 	bl	8003e0c <memchr>
 8003796:	b108      	cbz	r0, 800379c <_printf_i+0x1ec>
 8003798:	1b40      	subs	r0, r0, r5
 800379a:	6060      	str	r0, [r4, #4]
 800379c:	6863      	ldr	r3, [r4, #4]
 800379e:	6123      	str	r3, [r4, #16]
 80037a0:	2300      	movs	r3, #0
 80037a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80037a6:	e7aa      	b.n	80036fe <_printf_i+0x14e>
 80037a8:	462a      	mov	r2, r5
 80037aa:	4649      	mov	r1, r9
 80037ac:	4640      	mov	r0, r8
 80037ae:	6923      	ldr	r3, [r4, #16]
 80037b0:	47d0      	blx	sl
 80037b2:	3001      	adds	r0, #1
 80037b4:	d0ad      	beq.n	8003712 <_printf_i+0x162>
 80037b6:	6823      	ldr	r3, [r4, #0]
 80037b8:	079b      	lsls	r3, r3, #30
 80037ba:	d413      	bmi.n	80037e4 <_printf_i+0x234>
 80037bc:	68e0      	ldr	r0, [r4, #12]
 80037be:	9b03      	ldr	r3, [sp, #12]
 80037c0:	4298      	cmp	r0, r3
 80037c2:	bfb8      	it	lt
 80037c4:	4618      	movlt	r0, r3
 80037c6:	e7a6      	b.n	8003716 <_printf_i+0x166>
 80037c8:	2301      	movs	r3, #1
 80037ca:	4632      	mov	r2, r6
 80037cc:	4649      	mov	r1, r9
 80037ce:	4640      	mov	r0, r8
 80037d0:	47d0      	blx	sl
 80037d2:	3001      	adds	r0, #1
 80037d4:	d09d      	beq.n	8003712 <_printf_i+0x162>
 80037d6:	3501      	adds	r5, #1
 80037d8:	68e3      	ldr	r3, [r4, #12]
 80037da:	9903      	ldr	r1, [sp, #12]
 80037dc:	1a5b      	subs	r3, r3, r1
 80037de:	42ab      	cmp	r3, r5
 80037e0:	dcf2      	bgt.n	80037c8 <_printf_i+0x218>
 80037e2:	e7eb      	b.n	80037bc <_printf_i+0x20c>
 80037e4:	2500      	movs	r5, #0
 80037e6:	f104 0619 	add.w	r6, r4, #25
 80037ea:	e7f5      	b.n	80037d8 <_printf_i+0x228>
 80037ec:	0800426d 	.word	0x0800426d
 80037f0:	0800427e 	.word	0x0800427e

080037f4 <_scanf_chars>:
 80037f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80037f8:	4615      	mov	r5, r2
 80037fa:	688a      	ldr	r2, [r1, #8]
 80037fc:	4680      	mov	r8, r0
 80037fe:	460c      	mov	r4, r1
 8003800:	b932      	cbnz	r2, 8003810 <_scanf_chars+0x1c>
 8003802:	698a      	ldr	r2, [r1, #24]
 8003804:	2a00      	cmp	r2, #0
 8003806:	bf0c      	ite	eq
 8003808:	2201      	moveq	r2, #1
 800380a:	f04f 32ff 	movne.w	r2, #4294967295
 800380e:	608a      	str	r2, [r1, #8]
 8003810:	2700      	movs	r7, #0
 8003812:	6822      	ldr	r2, [r4, #0]
 8003814:	f8df 908c 	ldr.w	r9, [pc, #140]	; 80038a4 <_scanf_chars+0xb0>
 8003818:	06d1      	lsls	r1, r2, #27
 800381a:	bf5f      	itttt	pl
 800381c:	681a      	ldrpl	r2, [r3, #0]
 800381e:	1d11      	addpl	r1, r2, #4
 8003820:	6019      	strpl	r1, [r3, #0]
 8003822:	6816      	ldrpl	r6, [r2, #0]
 8003824:	69a0      	ldr	r0, [r4, #24]
 8003826:	b188      	cbz	r0, 800384c <_scanf_chars+0x58>
 8003828:	2801      	cmp	r0, #1
 800382a:	d107      	bne.n	800383c <_scanf_chars+0x48>
 800382c:	682b      	ldr	r3, [r5, #0]
 800382e:	781a      	ldrb	r2, [r3, #0]
 8003830:	6963      	ldr	r3, [r4, #20]
 8003832:	5c9b      	ldrb	r3, [r3, r2]
 8003834:	b953      	cbnz	r3, 800384c <_scanf_chars+0x58>
 8003836:	2f00      	cmp	r7, #0
 8003838:	d031      	beq.n	800389e <_scanf_chars+0xaa>
 800383a:	e022      	b.n	8003882 <_scanf_chars+0x8e>
 800383c:	2802      	cmp	r0, #2
 800383e:	d120      	bne.n	8003882 <_scanf_chars+0x8e>
 8003840:	682b      	ldr	r3, [r5, #0]
 8003842:	781b      	ldrb	r3, [r3, #0]
 8003844:	f819 3003 	ldrb.w	r3, [r9, r3]
 8003848:	071b      	lsls	r3, r3, #28
 800384a:	d41a      	bmi.n	8003882 <_scanf_chars+0x8e>
 800384c:	6823      	ldr	r3, [r4, #0]
 800384e:	3701      	adds	r7, #1
 8003850:	06da      	lsls	r2, r3, #27
 8003852:	bf5e      	ittt	pl
 8003854:	682b      	ldrpl	r3, [r5, #0]
 8003856:	781b      	ldrbpl	r3, [r3, #0]
 8003858:	f806 3b01 	strbpl.w	r3, [r6], #1
 800385c:	682a      	ldr	r2, [r5, #0]
 800385e:	686b      	ldr	r3, [r5, #4]
 8003860:	3201      	adds	r2, #1
 8003862:	602a      	str	r2, [r5, #0]
 8003864:	68a2      	ldr	r2, [r4, #8]
 8003866:	3b01      	subs	r3, #1
 8003868:	3a01      	subs	r2, #1
 800386a:	606b      	str	r3, [r5, #4]
 800386c:	60a2      	str	r2, [r4, #8]
 800386e:	b142      	cbz	r2, 8003882 <_scanf_chars+0x8e>
 8003870:	2b00      	cmp	r3, #0
 8003872:	dcd7      	bgt.n	8003824 <_scanf_chars+0x30>
 8003874:	4629      	mov	r1, r5
 8003876:	4640      	mov	r0, r8
 8003878:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800387c:	4798      	blx	r3
 800387e:	2800      	cmp	r0, #0
 8003880:	d0d0      	beq.n	8003824 <_scanf_chars+0x30>
 8003882:	6823      	ldr	r3, [r4, #0]
 8003884:	f013 0310 	ands.w	r3, r3, #16
 8003888:	d105      	bne.n	8003896 <_scanf_chars+0xa2>
 800388a:	68e2      	ldr	r2, [r4, #12]
 800388c:	3201      	adds	r2, #1
 800388e:	60e2      	str	r2, [r4, #12]
 8003890:	69a2      	ldr	r2, [r4, #24]
 8003892:	b102      	cbz	r2, 8003896 <_scanf_chars+0xa2>
 8003894:	7033      	strb	r3, [r6, #0]
 8003896:	2000      	movs	r0, #0
 8003898:	6923      	ldr	r3, [r4, #16]
 800389a:	443b      	add	r3, r7
 800389c:	6123      	str	r3, [r4, #16]
 800389e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80038a2:	bf00      	nop
 80038a4:	080042ab 	.word	0x080042ab

080038a8 <_scanf_i>:
 80038a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038ac:	460c      	mov	r4, r1
 80038ae:	4698      	mov	r8, r3
 80038b0:	4b72      	ldr	r3, [pc, #456]	; (8003a7c <_scanf_i+0x1d4>)
 80038b2:	b087      	sub	sp, #28
 80038b4:	4682      	mov	sl, r0
 80038b6:	4616      	mov	r6, r2
 80038b8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80038bc:	ab03      	add	r3, sp, #12
 80038be:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80038c2:	4b6f      	ldr	r3, [pc, #444]	; (8003a80 <_scanf_i+0x1d8>)
 80038c4:	69a1      	ldr	r1, [r4, #24]
 80038c6:	4a6f      	ldr	r2, [pc, #444]	; (8003a84 <_scanf_i+0x1dc>)
 80038c8:	4627      	mov	r7, r4
 80038ca:	2903      	cmp	r1, #3
 80038cc:	bf18      	it	ne
 80038ce:	461a      	movne	r2, r3
 80038d0:	68a3      	ldr	r3, [r4, #8]
 80038d2:	9201      	str	r2, [sp, #4]
 80038d4:	1e5a      	subs	r2, r3, #1
 80038d6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80038da:	bf81      	itttt	hi
 80038dc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80038e0:	eb03 0905 	addhi.w	r9, r3, r5
 80038e4:	f240 135d 	movwhi	r3, #349	; 0x15d
 80038e8:	60a3      	strhi	r3, [r4, #8]
 80038ea:	f857 3b1c 	ldr.w	r3, [r7], #28
 80038ee:	bf98      	it	ls
 80038f0:	f04f 0900 	movls.w	r9, #0
 80038f4:	463d      	mov	r5, r7
 80038f6:	f04f 0b00 	mov.w	fp, #0
 80038fa:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80038fe:	6023      	str	r3, [r4, #0]
 8003900:	6831      	ldr	r1, [r6, #0]
 8003902:	ab03      	add	r3, sp, #12
 8003904:	2202      	movs	r2, #2
 8003906:	7809      	ldrb	r1, [r1, #0]
 8003908:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800390c:	f000 fa7e 	bl	8003e0c <memchr>
 8003910:	b328      	cbz	r0, 800395e <_scanf_i+0xb6>
 8003912:	f1bb 0f01 	cmp.w	fp, #1
 8003916:	d159      	bne.n	80039cc <_scanf_i+0x124>
 8003918:	6862      	ldr	r2, [r4, #4]
 800391a:	b92a      	cbnz	r2, 8003928 <_scanf_i+0x80>
 800391c:	2308      	movs	r3, #8
 800391e:	6822      	ldr	r2, [r4, #0]
 8003920:	6063      	str	r3, [r4, #4]
 8003922:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003926:	6022      	str	r2, [r4, #0]
 8003928:	6822      	ldr	r2, [r4, #0]
 800392a:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800392e:	6022      	str	r2, [r4, #0]
 8003930:	68a2      	ldr	r2, [r4, #8]
 8003932:	1e51      	subs	r1, r2, #1
 8003934:	60a1      	str	r1, [r4, #8]
 8003936:	b192      	cbz	r2, 800395e <_scanf_i+0xb6>
 8003938:	6832      	ldr	r2, [r6, #0]
 800393a:	1c51      	adds	r1, r2, #1
 800393c:	6031      	str	r1, [r6, #0]
 800393e:	7812      	ldrb	r2, [r2, #0]
 8003940:	f805 2b01 	strb.w	r2, [r5], #1
 8003944:	6872      	ldr	r2, [r6, #4]
 8003946:	3a01      	subs	r2, #1
 8003948:	2a00      	cmp	r2, #0
 800394a:	6072      	str	r2, [r6, #4]
 800394c:	dc07      	bgt.n	800395e <_scanf_i+0xb6>
 800394e:	4631      	mov	r1, r6
 8003950:	4650      	mov	r0, sl
 8003952:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8003956:	4790      	blx	r2
 8003958:	2800      	cmp	r0, #0
 800395a:	f040 8085 	bne.w	8003a68 <_scanf_i+0x1c0>
 800395e:	f10b 0b01 	add.w	fp, fp, #1
 8003962:	f1bb 0f03 	cmp.w	fp, #3
 8003966:	d1cb      	bne.n	8003900 <_scanf_i+0x58>
 8003968:	6863      	ldr	r3, [r4, #4]
 800396a:	b90b      	cbnz	r3, 8003970 <_scanf_i+0xc8>
 800396c:	230a      	movs	r3, #10
 800396e:	6063      	str	r3, [r4, #4]
 8003970:	6863      	ldr	r3, [r4, #4]
 8003972:	4945      	ldr	r1, [pc, #276]	; (8003a88 <_scanf_i+0x1e0>)
 8003974:	6960      	ldr	r0, [r4, #20]
 8003976:	1ac9      	subs	r1, r1, r3
 8003978:	f000 f932 	bl	8003be0 <__sccl>
 800397c:	f04f 0b00 	mov.w	fp, #0
 8003980:	68a3      	ldr	r3, [r4, #8]
 8003982:	6822      	ldr	r2, [r4, #0]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d03d      	beq.n	8003a04 <_scanf_i+0x15c>
 8003988:	6831      	ldr	r1, [r6, #0]
 800398a:	6960      	ldr	r0, [r4, #20]
 800398c:	f891 c000 	ldrb.w	ip, [r1]
 8003990:	f810 000c 	ldrb.w	r0, [r0, ip]
 8003994:	2800      	cmp	r0, #0
 8003996:	d035      	beq.n	8003a04 <_scanf_i+0x15c>
 8003998:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800399c:	d124      	bne.n	80039e8 <_scanf_i+0x140>
 800399e:	0510      	lsls	r0, r2, #20
 80039a0:	d522      	bpl.n	80039e8 <_scanf_i+0x140>
 80039a2:	f10b 0b01 	add.w	fp, fp, #1
 80039a6:	f1b9 0f00 	cmp.w	r9, #0
 80039aa:	d003      	beq.n	80039b4 <_scanf_i+0x10c>
 80039ac:	3301      	adds	r3, #1
 80039ae:	f109 39ff 	add.w	r9, r9, #4294967295
 80039b2:	60a3      	str	r3, [r4, #8]
 80039b4:	6873      	ldr	r3, [r6, #4]
 80039b6:	3b01      	subs	r3, #1
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	6073      	str	r3, [r6, #4]
 80039bc:	dd1b      	ble.n	80039f6 <_scanf_i+0x14e>
 80039be:	6833      	ldr	r3, [r6, #0]
 80039c0:	3301      	adds	r3, #1
 80039c2:	6033      	str	r3, [r6, #0]
 80039c4:	68a3      	ldr	r3, [r4, #8]
 80039c6:	3b01      	subs	r3, #1
 80039c8:	60a3      	str	r3, [r4, #8]
 80039ca:	e7d9      	b.n	8003980 <_scanf_i+0xd8>
 80039cc:	f1bb 0f02 	cmp.w	fp, #2
 80039d0:	d1ae      	bne.n	8003930 <_scanf_i+0x88>
 80039d2:	6822      	ldr	r2, [r4, #0]
 80039d4:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80039d8:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80039dc:	d1bf      	bne.n	800395e <_scanf_i+0xb6>
 80039de:	2310      	movs	r3, #16
 80039e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039e4:	6063      	str	r3, [r4, #4]
 80039e6:	e7a2      	b.n	800392e <_scanf_i+0x86>
 80039e8:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80039ec:	6022      	str	r2, [r4, #0]
 80039ee:	780b      	ldrb	r3, [r1, #0]
 80039f0:	f805 3b01 	strb.w	r3, [r5], #1
 80039f4:	e7de      	b.n	80039b4 <_scanf_i+0x10c>
 80039f6:	4631      	mov	r1, r6
 80039f8:	4650      	mov	r0, sl
 80039fa:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80039fe:	4798      	blx	r3
 8003a00:	2800      	cmp	r0, #0
 8003a02:	d0df      	beq.n	80039c4 <_scanf_i+0x11c>
 8003a04:	6823      	ldr	r3, [r4, #0]
 8003a06:	05d9      	lsls	r1, r3, #23
 8003a08:	d50d      	bpl.n	8003a26 <_scanf_i+0x17e>
 8003a0a:	42bd      	cmp	r5, r7
 8003a0c:	d909      	bls.n	8003a22 <_scanf_i+0x17a>
 8003a0e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8003a12:	4632      	mov	r2, r6
 8003a14:	4650      	mov	r0, sl
 8003a16:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003a1a:	f105 39ff 	add.w	r9, r5, #4294967295
 8003a1e:	4798      	blx	r3
 8003a20:	464d      	mov	r5, r9
 8003a22:	42bd      	cmp	r5, r7
 8003a24:	d028      	beq.n	8003a78 <_scanf_i+0x1d0>
 8003a26:	6822      	ldr	r2, [r4, #0]
 8003a28:	f012 0210 	ands.w	r2, r2, #16
 8003a2c:	d113      	bne.n	8003a56 <_scanf_i+0x1ae>
 8003a2e:	702a      	strb	r2, [r5, #0]
 8003a30:	4639      	mov	r1, r7
 8003a32:	6863      	ldr	r3, [r4, #4]
 8003a34:	4650      	mov	r0, sl
 8003a36:	9e01      	ldr	r6, [sp, #4]
 8003a38:	47b0      	blx	r6
 8003a3a:	f8d8 3000 	ldr.w	r3, [r8]
 8003a3e:	6821      	ldr	r1, [r4, #0]
 8003a40:	1d1a      	adds	r2, r3, #4
 8003a42:	f8c8 2000 	str.w	r2, [r8]
 8003a46:	f011 0f20 	tst.w	r1, #32
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	d00f      	beq.n	8003a6e <_scanf_i+0x1c6>
 8003a4e:	6018      	str	r0, [r3, #0]
 8003a50:	68e3      	ldr	r3, [r4, #12]
 8003a52:	3301      	adds	r3, #1
 8003a54:	60e3      	str	r3, [r4, #12]
 8003a56:	2000      	movs	r0, #0
 8003a58:	6923      	ldr	r3, [r4, #16]
 8003a5a:	1bed      	subs	r5, r5, r7
 8003a5c:	445d      	add	r5, fp
 8003a5e:	442b      	add	r3, r5
 8003a60:	6123      	str	r3, [r4, #16]
 8003a62:	b007      	add	sp, #28
 8003a64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a68:	f04f 0b00 	mov.w	fp, #0
 8003a6c:	e7ca      	b.n	8003a04 <_scanf_i+0x15c>
 8003a6e:	07ca      	lsls	r2, r1, #31
 8003a70:	bf4c      	ite	mi
 8003a72:	8018      	strhmi	r0, [r3, #0]
 8003a74:	6018      	strpl	r0, [r3, #0]
 8003a76:	e7eb      	b.n	8003a50 <_scanf_i+0x1a8>
 8003a78:	2001      	movs	r0, #1
 8003a7a:	e7f2      	b.n	8003a62 <_scanf_i+0x1ba>
 8003a7c:	0800422c 	.word	0x0800422c
 8003a80:	08004089 	.word	0x08004089
 8003a84:	08003fa1 	.word	0x08003fa1
 8003a88:	0800429f 	.word	0x0800429f

08003a8c <__sflush_r>:
 8003a8c:	898a      	ldrh	r2, [r1, #12]
 8003a8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a90:	4605      	mov	r5, r0
 8003a92:	0710      	lsls	r0, r2, #28
 8003a94:	460c      	mov	r4, r1
 8003a96:	d457      	bmi.n	8003b48 <__sflush_r+0xbc>
 8003a98:	684b      	ldr	r3, [r1, #4]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	dc04      	bgt.n	8003aa8 <__sflush_r+0x1c>
 8003a9e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	dc01      	bgt.n	8003aa8 <__sflush_r+0x1c>
 8003aa4:	2000      	movs	r0, #0
 8003aa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003aa8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003aaa:	2e00      	cmp	r6, #0
 8003aac:	d0fa      	beq.n	8003aa4 <__sflush_r+0x18>
 8003aae:	2300      	movs	r3, #0
 8003ab0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003ab4:	682f      	ldr	r7, [r5, #0]
 8003ab6:	6a21      	ldr	r1, [r4, #32]
 8003ab8:	602b      	str	r3, [r5, #0]
 8003aba:	d032      	beq.n	8003b22 <__sflush_r+0x96>
 8003abc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003abe:	89a3      	ldrh	r3, [r4, #12]
 8003ac0:	075a      	lsls	r2, r3, #29
 8003ac2:	d505      	bpl.n	8003ad0 <__sflush_r+0x44>
 8003ac4:	6863      	ldr	r3, [r4, #4]
 8003ac6:	1ac0      	subs	r0, r0, r3
 8003ac8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003aca:	b10b      	cbz	r3, 8003ad0 <__sflush_r+0x44>
 8003acc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003ace:	1ac0      	subs	r0, r0, r3
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003ad6:	4628      	mov	r0, r5
 8003ad8:	6a21      	ldr	r1, [r4, #32]
 8003ada:	47b0      	blx	r6
 8003adc:	1c43      	adds	r3, r0, #1
 8003ade:	89a3      	ldrh	r3, [r4, #12]
 8003ae0:	d106      	bne.n	8003af0 <__sflush_r+0x64>
 8003ae2:	6829      	ldr	r1, [r5, #0]
 8003ae4:	291d      	cmp	r1, #29
 8003ae6:	d82b      	bhi.n	8003b40 <__sflush_r+0xb4>
 8003ae8:	4a28      	ldr	r2, [pc, #160]	; (8003b8c <__sflush_r+0x100>)
 8003aea:	410a      	asrs	r2, r1
 8003aec:	07d6      	lsls	r6, r2, #31
 8003aee:	d427      	bmi.n	8003b40 <__sflush_r+0xb4>
 8003af0:	2200      	movs	r2, #0
 8003af2:	6062      	str	r2, [r4, #4]
 8003af4:	6922      	ldr	r2, [r4, #16]
 8003af6:	04d9      	lsls	r1, r3, #19
 8003af8:	6022      	str	r2, [r4, #0]
 8003afa:	d504      	bpl.n	8003b06 <__sflush_r+0x7a>
 8003afc:	1c42      	adds	r2, r0, #1
 8003afe:	d101      	bne.n	8003b04 <__sflush_r+0x78>
 8003b00:	682b      	ldr	r3, [r5, #0]
 8003b02:	b903      	cbnz	r3, 8003b06 <__sflush_r+0x7a>
 8003b04:	6560      	str	r0, [r4, #84]	; 0x54
 8003b06:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003b08:	602f      	str	r7, [r5, #0]
 8003b0a:	2900      	cmp	r1, #0
 8003b0c:	d0ca      	beq.n	8003aa4 <__sflush_r+0x18>
 8003b0e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003b12:	4299      	cmp	r1, r3
 8003b14:	d002      	beq.n	8003b1c <__sflush_r+0x90>
 8003b16:	4628      	mov	r0, r5
 8003b18:	f7ff f8d0 	bl	8002cbc <_free_r>
 8003b1c:	2000      	movs	r0, #0
 8003b1e:	6360      	str	r0, [r4, #52]	; 0x34
 8003b20:	e7c1      	b.n	8003aa6 <__sflush_r+0x1a>
 8003b22:	2301      	movs	r3, #1
 8003b24:	4628      	mov	r0, r5
 8003b26:	47b0      	blx	r6
 8003b28:	1c41      	adds	r1, r0, #1
 8003b2a:	d1c8      	bne.n	8003abe <__sflush_r+0x32>
 8003b2c:	682b      	ldr	r3, [r5, #0]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d0c5      	beq.n	8003abe <__sflush_r+0x32>
 8003b32:	2b1d      	cmp	r3, #29
 8003b34:	d001      	beq.n	8003b3a <__sflush_r+0xae>
 8003b36:	2b16      	cmp	r3, #22
 8003b38:	d101      	bne.n	8003b3e <__sflush_r+0xb2>
 8003b3a:	602f      	str	r7, [r5, #0]
 8003b3c:	e7b2      	b.n	8003aa4 <__sflush_r+0x18>
 8003b3e:	89a3      	ldrh	r3, [r4, #12]
 8003b40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b44:	81a3      	strh	r3, [r4, #12]
 8003b46:	e7ae      	b.n	8003aa6 <__sflush_r+0x1a>
 8003b48:	690f      	ldr	r7, [r1, #16]
 8003b4a:	2f00      	cmp	r7, #0
 8003b4c:	d0aa      	beq.n	8003aa4 <__sflush_r+0x18>
 8003b4e:	0793      	lsls	r3, r2, #30
 8003b50:	bf18      	it	ne
 8003b52:	2300      	movne	r3, #0
 8003b54:	680e      	ldr	r6, [r1, #0]
 8003b56:	bf08      	it	eq
 8003b58:	694b      	ldreq	r3, [r1, #20]
 8003b5a:	1bf6      	subs	r6, r6, r7
 8003b5c:	600f      	str	r7, [r1, #0]
 8003b5e:	608b      	str	r3, [r1, #8]
 8003b60:	2e00      	cmp	r6, #0
 8003b62:	dd9f      	ble.n	8003aa4 <__sflush_r+0x18>
 8003b64:	4633      	mov	r3, r6
 8003b66:	463a      	mov	r2, r7
 8003b68:	4628      	mov	r0, r5
 8003b6a:	6a21      	ldr	r1, [r4, #32]
 8003b6c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8003b70:	47e0      	blx	ip
 8003b72:	2800      	cmp	r0, #0
 8003b74:	dc06      	bgt.n	8003b84 <__sflush_r+0xf8>
 8003b76:	89a3      	ldrh	r3, [r4, #12]
 8003b78:	f04f 30ff 	mov.w	r0, #4294967295
 8003b7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b80:	81a3      	strh	r3, [r4, #12]
 8003b82:	e790      	b.n	8003aa6 <__sflush_r+0x1a>
 8003b84:	4407      	add	r7, r0
 8003b86:	1a36      	subs	r6, r6, r0
 8003b88:	e7ea      	b.n	8003b60 <__sflush_r+0xd4>
 8003b8a:	bf00      	nop
 8003b8c:	dfbffffe 	.word	0xdfbffffe

08003b90 <_fflush_r>:
 8003b90:	b538      	push	{r3, r4, r5, lr}
 8003b92:	690b      	ldr	r3, [r1, #16]
 8003b94:	4605      	mov	r5, r0
 8003b96:	460c      	mov	r4, r1
 8003b98:	b913      	cbnz	r3, 8003ba0 <_fflush_r+0x10>
 8003b9a:	2500      	movs	r5, #0
 8003b9c:	4628      	mov	r0, r5
 8003b9e:	bd38      	pop	{r3, r4, r5, pc}
 8003ba0:	b118      	cbz	r0, 8003baa <_fflush_r+0x1a>
 8003ba2:	6a03      	ldr	r3, [r0, #32]
 8003ba4:	b90b      	cbnz	r3, 8003baa <_fflush_r+0x1a>
 8003ba6:	f7fe ff55 	bl	8002a54 <__sinit>
 8003baa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d0f3      	beq.n	8003b9a <_fflush_r+0xa>
 8003bb2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003bb4:	07d0      	lsls	r0, r2, #31
 8003bb6:	d404      	bmi.n	8003bc2 <_fflush_r+0x32>
 8003bb8:	0599      	lsls	r1, r3, #22
 8003bba:	d402      	bmi.n	8003bc2 <_fflush_r+0x32>
 8003bbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003bbe:	f7ff f87a 	bl	8002cb6 <__retarget_lock_acquire_recursive>
 8003bc2:	4628      	mov	r0, r5
 8003bc4:	4621      	mov	r1, r4
 8003bc6:	f7ff ff61 	bl	8003a8c <__sflush_r>
 8003bca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003bcc:	4605      	mov	r5, r0
 8003bce:	07da      	lsls	r2, r3, #31
 8003bd0:	d4e4      	bmi.n	8003b9c <_fflush_r+0xc>
 8003bd2:	89a3      	ldrh	r3, [r4, #12]
 8003bd4:	059b      	lsls	r3, r3, #22
 8003bd6:	d4e1      	bmi.n	8003b9c <_fflush_r+0xc>
 8003bd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003bda:	f7ff f86d 	bl	8002cb8 <__retarget_lock_release_recursive>
 8003bde:	e7dd      	b.n	8003b9c <_fflush_r+0xc>

08003be0 <__sccl>:
 8003be0:	b570      	push	{r4, r5, r6, lr}
 8003be2:	780b      	ldrb	r3, [r1, #0]
 8003be4:	4604      	mov	r4, r0
 8003be6:	2b5e      	cmp	r3, #94	; 0x5e
 8003be8:	bf0b      	itete	eq
 8003bea:	784b      	ldrbeq	r3, [r1, #1]
 8003bec:	1c4a      	addne	r2, r1, #1
 8003bee:	1c8a      	addeq	r2, r1, #2
 8003bf0:	2100      	movne	r1, #0
 8003bf2:	bf08      	it	eq
 8003bf4:	2101      	moveq	r1, #1
 8003bf6:	3801      	subs	r0, #1
 8003bf8:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8003bfc:	f800 1f01 	strb.w	r1, [r0, #1]!
 8003c00:	42a8      	cmp	r0, r5
 8003c02:	d1fb      	bne.n	8003bfc <__sccl+0x1c>
 8003c04:	b90b      	cbnz	r3, 8003c0a <__sccl+0x2a>
 8003c06:	1e50      	subs	r0, r2, #1
 8003c08:	bd70      	pop	{r4, r5, r6, pc}
 8003c0a:	f081 0101 	eor.w	r1, r1, #1
 8003c0e:	4610      	mov	r0, r2
 8003c10:	54e1      	strb	r1, [r4, r3]
 8003c12:	4602      	mov	r2, r0
 8003c14:	f812 5b01 	ldrb.w	r5, [r2], #1
 8003c18:	2d2d      	cmp	r5, #45	; 0x2d
 8003c1a:	d005      	beq.n	8003c28 <__sccl+0x48>
 8003c1c:	2d5d      	cmp	r5, #93	; 0x5d
 8003c1e:	d016      	beq.n	8003c4e <__sccl+0x6e>
 8003c20:	2d00      	cmp	r5, #0
 8003c22:	d0f1      	beq.n	8003c08 <__sccl+0x28>
 8003c24:	462b      	mov	r3, r5
 8003c26:	e7f2      	b.n	8003c0e <__sccl+0x2e>
 8003c28:	7846      	ldrb	r6, [r0, #1]
 8003c2a:	2e5d      	cmp	r6, #93	; 0x5d
 8003c2c:	d0fa      	beq.n	8003c24 <__sccl+0x44>
 8003c2e:	42b3      	cmp	r3, r6
 8003c30:	dcf8      	bgt.n	8003c24 <__sccl+0x44>
 8003c32:	461a      	mov	r2, r3
 8003c34:	3002      	adds	r0, #2
 8003c36:	3201      	adds	r2, #1
 8003c38:	4296      	cmp	r6, r2
 8003c3a:	54a1      	strb	r1, [r4, r2]
 8003c3c:	dcfb      	bgt.n	8003c36 <__sccl+0x56>
 8003c3e:	1af2      	subs	r2, r6, r3
 8003c40:	3a01      	subs	r2, #1
 8003c42:	42b3      	cmp	r3, r6
 8003c44:	bfa8      	it	ge
 8003c46:	2200      	movge	r2, #0
 8003c48:	1c5d      	adds	r5, r3, #1
 8003c4a:	18ab      	adds	r3, r5, r2
 8003c4c:	e7e1      	b.n	8003c12 <__sccl+0x32>
 8003c4e:	4610      	mov	r0, r2
 8003c50:	e7da      	b.n	8003c08 <__sccl+0x28>

08003c52 <__submore>:
 8003c52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c56:	460c      	mov	r4, r1
 8003c58:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8003c5a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003c5e:	4299      	cmp	r1, r3
 8003c60:	d11b      	bne.n	8003c9a <__submore+0x48>
 8003c62:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003c66:	f7ff f891 	bl	8002d8c <_malloc_r>
 8003c6a:	b918      	cbnz	r0, 8003c74 <__submore+0x22>
 8003c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8003c70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c78:	63a3      	str	r3, [r4, #56]	; 0x38
 8003c7a:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8003c7e:	6360      	str	r0, [r4, #52]	; 0x34
 8003c80:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8003c84:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8003c88:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8003c8c:	7043      	strb	r3, [r0, #1]
 8003c8e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8003c92:	7003      	strb	r3, [r0, #0]
 8003c94:	6020      	str	r0, [r4, #0]
 8003c96:	2000      	movs	r0, #0
 8003c98:	e7ea      	b.n	8003c70 <__submore+0x1e>
 8003c9a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8003c9c:	0077      	lsls	r7, r6, #1
 8003c9e:	463a      	mov	r2, r7
 8003ca0:	f000 f8d0 	bl	8003e44 <_realloc_r>
 8003ca4:	4605      	mov	r5, r0
 8003ca6:	2800      	cmp	r0, #0
 8003ca8:	d0e0      	beq.n	8003c6c <__submore+0x1a>
 8003caa:	eb00 0806 	add.w	r8, r0, r6
 8003cae:	4601      	mov	r1, r0
 8003cb0:	4632      	mov	r2, r6
 8003cb2:	4640      	mov	r0, r8
 8003cb4:	f000 f8b8 	bl	8003e28 <memcpy>
 8003cb8:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8003cbc:	f8c4 8000 	str.w	r8, [r4]
 8003cc0:	e7e9      	b.n	8003c96 <__submore+0x44>

08003cc2 <__swbuf_r>:
 8003cc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cc4:	460e      	mov	r6, r1
 8003cc6:	4614      	mov	r4, r2
 8003cc8:	4605      	mov	r5, r0
 8003cca:	b118      	cbz	r0, 8003cd4 <__swbuf_r+0x12>
 8003ccc:	6a03      	ldr	r3, [r0, #32]
 8003cce:	b90b      	cbnz	r3, 8003cd4 <__swbuf_r+0x12>
 8003cd0:	f7fe fec0 	bl	8002a54 <__sinit>
 8003cd4:	69a3      	ldr	r3, [r4, #24]
 8003cd6:	60a3      	str	r3, [r4, #8]
 8003cd8:	89a3      	ldrh	r3, [r4, #12]
 8003cda:	071a      	lsls	r2, r3, #28
 8003cdc:	d525      	bpl.n	8003d2a <__swbuf_r+0x68>
 8003cde:	6923      	ldr	r3, [r4, #16]
 8003ce0:	b31b      	cbz	r3, 8003d2a <__swbuf_r+0x68>
 8003ce2:	6823      	ldr	r3, [r4, #0]
 8003ce4:	6922      	ldr	r2, [r4, #16]
 8003ce6:	b2f6      	uxtb	r6, r6
 8003ce8:	1a98      	subs	r0, r3, r2
 8003cea:	6963      	ldr	r3, [r4, #20]
 8003cec:	4637      	mov	r7, r6
 8003cee:	4283      	cmp	r3, r0
 8003cf0:	dc04      	bgt.n	8003cfc <__swbuf_r+0x3a>
 8003cf2:	4621      	mov	r1, r4
 8003cf4:	4628      	mov	r0, r5
 8003cf6:	f7ff ff4b 	bl	8003b90 <_fflush_r>
 8003cfa:	b9e0      	cbnz	r0, 8003d36 <__swbuf_r+0x74>
 8003cfc:	68a3      	ldr	r3, [r4, #8]
 8003cfe:	3b01      	subs	r3, #1
 8003d00:	60a3      	str	r3, [r4, #8]
 8003d02:	6823      	ldr	r3, [r4, #0]
 8003d04:	1c5a      	adds	r2, r3, #1
 8003d06:	6022      	str	r2, [r4, #0]
 8003d08:	701e      	strb	r6, [r3, #0]
 8003d0a:	6962      	ldr	r2, [r4, #20]
 8003d0c:	1c43      	adds	r3, r0, #1
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	d004      	beq.n	8003d1c <__swbuf_r+0x5a>
 8003d12:	89a3      	ldrh	r3, [r4, #12]
 8003d14:	07db      	lsls	r3, r3, #31
 8003d16:	d506      	bpl.n	8003d26 <__swbuf_r+0x64>
 8003d18:	2e0a      	cmp	r6, #10
 8003d1a:	d104      	bne.n	8003d26 <__swbuf_r+0x64>
 8003d1c:	4621      	mov	r1, r4
 8003d1e:	4628      	mov	r0, r5
 8003d20:	f7ff ff36 	bl	8003b90 <_fflush_r>
 8003d24:	b938      	cbnz	r0, 8003d36 <__swbuf_r+0x74>
 8003d26:	4638      	mov	r0, r7
 8003d28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d2a:	4621      	mov	r1, r4
 8003d2c:	4628      	mov	r0, r5
 8003d2e:	f000 f805 	bl	8003d3c <__swsetup_r>
 8003d32:	2800      	cmp	r0, #0
 8003d34:	d0d5      	beq.n	8003ce2 <__swbuf_r+0x20>
 8003d36:	f04f 37ff 	mov.w	r7, #4294967295
 8003d3a:	e7f4      	b.n	8003d26 <__swbuf_r+0x64>

08003d3c <__swsetup_r>:
 8003d3c:	b538      	push	{r3, r4, r5, lr}
 8003d3e:	4b2a      	ldr	r3, [pc, #168]	; (8003de8 <__swsetup_r+0xac>)
 8003d40:	4605      	mov	r5, r0
 8003d42:	6818      	ldr	r0, [r3, #0]
 8003d44:	460c      	mov	r4, r1
 8003d46:	b118      	cbz	r0, 8003d50 <__swsetup_r+0x14>
 8003d48:	6a03      	ldr	r3, [r0, #32]
 8003d4a:	b90b      	cbnz	r3, 8003d50 <__swsetup_r+0x14>
 8003d4c:	f7fe fe82 	bl	8002a54 <__sinit>
 8003d50:	89a3      	ldrh	r3, [r4, #12]
 8003d52:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003d56:	0718      	lsls	r0, r3, #28
 8003d58:	d422      	bmi.n	8003da0 <__swsetup_r+0x64>
 8003d5a:	06d9      	lsls	r1, r3, #27
 8003d5c:	d407      	bmi.n	8003d6e <__swsetup_r+0x32>
 8003d5e:	2309      	movs	r3, #9
 8003d60:	602b      	str	r3, [r5, #0]
 8003d62:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003d66:	f04f 30ff 	mov.w	r0, #4294967295
 8003d6a:	81a3      	strh	r3, [r4, #12]
 8003d6c:	e034      	b.n	8003dd8 <__swsetup_r+0x9c>
 8003d6e:	0758      	lsls	r0, r3, #29
 8003d70:	d512      	bpl.n	8003d98 <__swsetup_r+0x5c>
 8003d72:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003d74:	b141      	cbz	r1, 8003d88 <__swsetup_r+0x4c>
 8003d76:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003d7a:	4299      	cmp	r1, r3
 8003d7c:	d002      	beq.n	8003d84 <__swsetup_r+0x48>
 8003d7e:	4628      	mov	r0, r5
 8003d80:	f7fe ff9c 	bl	8002cbc <_free_r>
 8003d84:	2300      	movs	r3, #0
 8003d86:	6363      	str	r3, [r4, #52]	; 0x34
 8003d88:	89a3      	ldrh	r3, [r4, #12]
 8003d8a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003d8e:	81a3      	strh	r3, [r4, #12]
 8003d90:	2300      	movs	r3, #0
 8003d92:	6063      	str	r3, [r4, #4]
 8003d94:	6923      	ldr	r3, [r4, #16]
 8003d96:	6023      	str	r3, [r4, #0]
 8003d98:	89a3      	ldrh	r3, [r4, #12]
 8003d9a:	f043 0308 	orr.w	r3, r3, #8
 8003d9e:	81a3      	strh	r3, [r4, #12]
 8003da0:	6923      	ldr	r3, [r4, #16]
 8003da2:	b94b      	cbnz	r3, 8003db8 <__swsetup_r+0x7c>
 8003da4:	89a3      	ldrh	r3, [r4, #12]
 8003da6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003daa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003dae:	d003      	beq.n	8003db8 <__swsetup_r+0x7c>
 8003db0:	4621      	mov	r1, r4
 8003db2:	4628      	mov	r0, r5
 8003db4:	f000 f98f 	bl	80040d6 <__smakebuf_r>
 8003db8:	89a0      	ldrh	r0, [r4, #12]
 8003dba:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003dbe:	f010 0301 	ands.w	r3, r0, #1
 8003dc2:	d00a      	beq.n	8003dda <__swsetup_r+0x9e>
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	60a3      	str	r3, [r4, #8]
 8003dc8:	6963      	ldr	r3, [r4, #20]
 8003dca:	425b      	negs	r3, r3
 8003dcc:	61a3      	str	r3, [r4, #24]
 8003dce:	6923      	ldr	r3, [r4, #16]
 8003dd0:	b943      	cbnz	r3, 8003de4 <__swsetup_r+0xa8>
 8003dd2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003dd6:	d1c4      	bne.n	8003d62 <__swsetup_r+0x26>
 8003dd8:	bd38      	pop	{r3, r4, r5, pc}
 8003dda:	0781      	lsls	r1, r0, #30
 8003ddc:	bf58      	it	pl
 8003dde:	6963      	ldrpl	r3, [r4, #20]
 8003de0:	60a3      	str	r3, [r4, #8]
 8003de2:	e7f4      	b.n	8003dce <__swsetup_r+0x92>
 8003de4:	2000      	movs	r0, #0
 8003de6:	e7f7      	b.n	8003dd8 <__swsetup_r+0x9c>
 8003de8:	20000064 	.word	0x20000064

08003dec <_sbrk_r>:
 8003dec:	b538      	push	{r3, r4, r5, lr}
 8003dee:	2300      	movs	r3, #0
 8003df0:	4d05      	ldr	r5, [pc, #20]	; (8003e08 <_sbrk_r+0x1c>)
 8003df2:	4604      	mov	r4, r0
 8003df4:	4608      	mov	r0, r1
 8003df6:	602b      	str	r3, [r5, #0]
 8003df8:	f7fc fd38 	bl	800086c <_sbrk>
 8003dfc:	1c43      	adds	r3, r0, #1
 8003dfe:	d102      	bne.n	8003e06 <_sbrk_r+0x1a>
 8003e00:	682b      	ldr	r3, [r5, #0]
 8003e02:	b103      	cbz	r3, 8003e06 <_sbrk_r+0x1a>
 8003e04:	6023      	str	r3, [r4, #0]
 8003e06:	bd38      	pop	{r3, r4, r5, pc}
 8003e08:	2000029c 	.word	0x2000029c

08003e0c <memchr>:
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	b510      	push	{r4, lr}
 8003e10:	b2c9      	uxtb	r1, r1
 8003e12:	4402      	add	r2, r0
 8003e14:	4293      	cmp	r3, r2
 8003e16:	4618      	mov	r0, r3
 8003e18:	d101      	bne.n	8003e1e <memchr+0x12>
 8003e1a:	2000      	movs	r0, #0
 8003e1c:	e003      	b.n	8003e26 <memchr+0x1a>
 8003e1e:	7804      	ldrb	r4, [r0, #0]
 8003e20:	3301      	adds	r3, #1
 8003e22:	428c      	cmp	r4, r1
 8003e24:	d1f6      	bne.n	8003e14 <memchr+0x8>
 8003e26:	bd10      	pop	{r4, pc}

08003e28 <memcpy>:
 8003e28:	440a      	add	r2, r1
 8003e2a:	4291      	cmp	r1, r2
 8003e2c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003e30:	d100      	bne.n	8003e34 <memcpy+0xc>
 8003e32:	4770      	bx	lr
 8003e34:	b510      	push	{r4, lr}
 8003e36:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003e3a:	4291      	cmp	r1, r2
 8003e3c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003e40:	d1f9      	bne.n	8003e36 <memcpy+0xe>
 8003e42:	bd10      	pop	{r4, pc}

08003e44 <_realloc_r>:
 8003e44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e48:	4680      	mov	r8, r0
 8003e4a:	4614      	mov	r4, r2
 8003e4c:	460e      	mov	r6, r1
 8003e4e:	b921      	cbnz	r1, 8003e5a <_realloc_r+0x16>
 8003e50:	4611      	mov	r1, r2
 8003e52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003e56:	f7fe bf99 	b.w	8002d8c <_malloc_r>
 8003e5a:	b92a      	cbnz	r2, 8003e68 <_realloc_r+0x24>
 8003e5c:	f7fe ff2e 	bl	8002cbc <_free_r>
 8003e60:	4625      	mov	r5, r4
 8003e62:	4628      	mov	r0, r5
 8003e64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e68:	f000 f994 	bl	8004194 <_malloc_usable_size_r>
 8003e6c:	4284      	cmp	r4, r0
 8003e6e:	4607      	mov	r7, r0
 8003e70:	d802      	bhi.n	8003e78 <_realloc_r+0x34>
 8003e72:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003e76:	d812      	bhi.n	8003e9e <_realloc_r+0x5a>
 8003e78:	4621      	mov	r1, r4
 8003e7a:	4640      	mov	r0, r8
 8003e7c:	f7fe ff86 	bl	8002d8c <_malloc_r>
 8003e80:	4605      	mov	r5, r0
 8003e82:	2800      	cmp	r0, #0
 8003e84:	d0ed      	beq.n	8003e62 <_realloc_r+0x1e>
 8003e86:	42bc      	cmp	r4, r7
 8003e88:	4622      	mov	r2, r4
 8003e8a:	4631      	mov	r1, r6
 8003e8c:	bf28      	it	cs
 8003e8e:	463a      	movcs	r2, r7
 8003e90:	f7ff ffca 	bl	8003e28 <memcpy>
 8003e94:	4631      	mov	r1, r6
 8003e96:	4640      	mov	r0, r8
 8003e98:	f7fe ff10 	bl	8002cbc <_free_r>
 8003e9c:	e7e1      	b.n	8003e62 <_realloc_r+0x1e>
 8003e9e:	4635      	mov	r5, r6
 8003ea0:	e7df      	b.n	8003e62 <_realloc_r+0x1e>
	...

08003ea4 <_strtol_l.constprop.0>:
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003eaa:	4686      	mov	lr, r0
 8003eac:	4690      	mov	r8, r2
 8003eae:	d001      	beq.n	8003eb4 <_strtol_l.constprop.0+0x10>
 8003eb0:	2b24      	cmp	r3, #36	; 0x24
 8003eb2:	d906      	bls.n	8003ec2 <_strtol_l.constprop.0+0x1e>
 8003eb4:	f7fe fed4 	bl	8002c60 <__errno>
 8003eb8:	2316      	movs	r3, #22
 8003eba:	6003      	str	r3, [r0, #0]
 8003ebc:	2000      	movs	r0, #0
 8003ebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ec2:	460d      	mov	r5, r1
 8003ec4:	4835      	ldr	r0, [pc, #212]	; (8003f9c <_strtol_l.constprop.0+0xf8>)
 8003ec6:	462a      	mov	r2, r5
 8003ec8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003ecc:	5d06      	ldrb	r6, [r0, r4]
 8003ece:	f016 0608 	ands.w	r6, r6, #8
 8003ed2:	d1f8      	bne.n	8003ec6 <_strtol_l.constprop.0+0x22>
 8003ed4:	2c2d      	cmp	r4, #45	; 0x2d
 8003ed6:	d12e      	bne.n	8003f36 <_strtol_l.constprop.0+0x92>
 8003ed8:	2601      	movs	r6, #1
 8003eda:	782c      	ldrb	r4, [r5, #0]
 8003edc:	1c95      	adds	r5, r2, #2
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d057      	beq.n	8003f92 <_strtol_l.constprop.0+0xee>
 8003ee2:	2b10      	cmp	r3, #16
 8003ee4:	d109      	bne.n	8003efa <_strtol_l.constprop.0+0x56>
 8003ee6:	2c30      	cmp	r4, #48	; 0x30
 8003ee8:	d107      	bne.n	8003efa <_strtol_l.constprop.0+0x56>
 8003eea:	782a      	ldrb	r2, [r5, #0]
 8003eec:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8003ef0:	2a58      	cmp	r2, #88	; 0x58
 8003ef2:	d149      	bne.n	8003f88 <_strtol_l.constprop.0+0xe4>
 8003ef4:	2310      	movs	r3, #16
 8003ef6:	786c      	ldrb	r4, [r5, #1]
 8003ef8:	3502      	adds	r5, #2
 8003efa:	2200      	movs	r2, #0
 8003efc:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 8003f00:	f10c 3cff 	add.w	ip, ip, #4294967295
 8003f04:	fbbc f9f3 	udiv	r9, ip, r3
 8003f08:	4610      	mov	r0, r2
 8003f0a:	fb03 ca19 	mls	sl, r3, r9, ip
 8003f0e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8003f12:	2f09      	cmp	r7, #9
 8003f14:	d814      	bhi.n	8003f40 <_strtol_l.constprop.0+0x9c>
 8003f16:	463c      	mov	r4, r7
 8003f18:	42a3      	cmp	r3, r4
 8003f1a:	dd20      	ble.n	8003f5e <_strtol_l.constprop.0+0xba>
 8003f1c:	1c57      	adds	r7, r2, #1
 8003f1e:	d007      	beq.n	8003f30 <_strtol_l.constprop.0+0x8c>
 8003f20:	4581      	cmp	r9, r0
 8003f22:	d319      	bcc.n	8003f58 <_strtol_l.constprop.0+0xb4>
 8003f24:	d101      	bne.n	8003f2a <_strtol_l.constprop.0+0x86>
 8003f26:	45a2      	cmp	sl, r4
 8003f28:	db16      	blt.n	8003f58 <_strtol_l.constprop.0+0xb4>
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	fb00 4003 	mla	r0, r0, r3, r4
 8003f30:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003f34:	e7eb      	b.n	8003f0e <_strtol_l.constprop.0+0x6a>
 8003f36:	2c2b      	cmp	r4, #43	; 0x2b
 8003f38:	bf04      	itt	eq
 8003f3a:	782c      	ldrbeq	r4, [r5, #0]
 8003f3c:	1c95      	addeq	r5, r2, #2
 8003f3e:	e7ce      	b.n	8003ede <_strtol_l.constprop.0+0x3a>
 8003f40:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8003f44:	2f19      	cmp	r7, #25
 8003f46:	d801      	bhi.n	8003f4c <_strtol_l.constprop.0+0xa8>
 8003f48:	3c37      	subs	r4, #55	; 0x37
 8003f4a:	e7e5      	b.n	8003f18 <_strtol_l.constprop.0+0x74>
 8003f4c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8003f50:	2f19      	cmp	r7, #25
 8003f52:	d804      	bhi.n	8003f5e <_strtol_l.constprop.0+0xba>
 8003f54:	3c57      	subs	r4, #87	; 0x57
 8003f56:	e7df      	b.n	8003f18 <_strtol_l.constprop.0+0x74>
 8003f58:	f04f 32ff 	mov.w	r2, #4294967295
 8003f5c:	e7e8      	b.n	8003f30 <_strtol_l.constprop.0+0x8c>
 8003f5e:	1c53      	adds	r3, r2, #1
 8003f60:	d108      	bne.n	8003f74 <_strtol_l.constprop.0+0xd0>
 8003f62:	2322      	movs	r3, #34	; 0x22
 8003f64:	4660      	mov	r0, ip
 8003f66:	f8ce 3000 	str.w	r3, [lr]
 8003f6a:	f1b8 0f00 	cmp.w	r8, #0
 8003f6e:	d0a6      	beq.n	8003ebe <_strtol_l.constprop.0+0x1a>
 8003f70:	1e69      	subs	r1, r5, #1
 8003f72:	e006      	b.n	8003f82 <_strtol_l.constprop.0+0xde>
 8003f74:	b106      	cbz	r6, 8003f78 <_strtol_l.constprop.0+0xd4>
 8003f76:	4240      	negs	r0, r0
 8003f78:	f1b8 0f00 	cmp.w	r8, #0
 8003f7c:	d09f      	beq.n	8003ebe <_strtol_l.constprop.0+0x1a>
 8003f7e:	2a00      	cmp	r2, #0
 8003f80:	d1f6      	bne.n	8003f70 <_strtol_l.constprop.0+0xcc>
 8003f82:	f8c8 1000 	str.w	r1, [r8]
 8003f86:	e79a      	b.n	8003ebe <_strtol_l.constprop.0+0x1a>
 8003f88:	2430      	movs	r4, #48	; 0x30
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d1b5      	bne.n	8003efa <_strtol_l.constprop.0+0x56>
 8003f8e:	2308      	movs	r3, #8
 8003f90:	e7b3      	b.n	8003efa <_strtol_l.constprop.0+0x56>
 8003f92:	2c30      	cmp	r4, #48	; 0x30
 8003f94:	d0a9      	beq.n	8003eea <_strtol_l.constprop.0+0x46>
 8003f96:	230a      	movs	r3, #10
 8003f98:	e7af      	b.n	8003efa <_strtol_l.constprop.0+0x56>
 8003f9a:	bf00      	nop
 8003f9c:	080042ab 	.word	0x080042ab

08003fa0 <_strtol_r>:
 8003fa0:	f7ff bf80 	b.w	8003ea4 <_strtol_l.constprop.0>

08003fa4 <_strtoul_l.constprop.0>:
 8003fa4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003fa8:	4686      	mov	lr, r0
 8003faa:	460d      	mov	r5, r1
 8003fac:	4f35      	ldr	r7, [pc, #212]	; (8004084 <_strtoul_l.constprop.0+0xe0>)
 8003fae:	4628      	mov	r0, r5
 8003fb0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003fb4:	5d3e      	ldrb	r6, [r7, r4]
 8003fb6:	f016 0608 	ands.w	r6, r6, #8
 8003fba:	d1f8      	bne.n	8003fae <_strtoul_l.constprop.0+0xa>
 8003fbc:	2c2d      	cmp	r4, #45	; 0x2d
 8003fbe:	d130      	bne.n	8004022 <_strtoul_l.constprop.0+0x7e>
 8003fc0:	2601      	movs	r6, #1
 8003fc2:	782c      	ldrb	r4, [r5, #0]
 8003fc4:	1c85      	adds	r5, r0, #2
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d057      	beq.n	800407a <_strtoul_l.constprop.0+0xd6>
 8003fca:	2b10      	cmp	r3, #16
 8003fcc:	d109      	bne.n	8003fe2 <_strtoul_l.constprop.0+0x3e>
 8003fce:	2c30      	cmp	r4, #48	; 0x30
 8003fd0:	d107      	bne.n	8003fe2 <_strtoul_l.constprop.0+0x3e>
 8003fd2:	7828      	ldrb	r0, [r5, #0]
 8003fd4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8003fd8:	2858      	cmp	r0, #88	; 0x58
 8003fda:	d149      	bne.n	8004070 <_strtoul_l.constprop.0+0xcc>
 8003fdc:	2310      	movs	r3, #16
 8003fde:	786c      	ldrb	r4, [r5, #1]
 8003fe0:	3502      	adds	r5, #2
 8003fe2:	f04f 38ff 	mov.w	r8, #4294967295
 8003fe6:	fbb8 f8f3 	udiv	r8, r8, r3
 8003fea:	2700      	movs	r7, #0
 8003fec:	fb03 f908 	mul.w	r9, r3, r8
 8003ff0:	4638      	mov	r0, r7
 8003ff2:	ea6f 0909 	mvn.w	r9, r9
 8003ff6:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8003ffa:	f1bc 0f09 	cmp.w	ip, #9
 8003ffe:	d815      	bhi.n	800402c <_strtoul_l.constprop.0+0x88>
 8004000:	4664      	mov	r4, ip
 8004002:	42a3      	cmp	r3, r4
 8004004:	dd23      	ble.n	800404e <_strtoul_l.constprop.0+0xaa>
 8004006:	f1b7 3fff 	cmp.w	r7, #4294967295
 800400a:	d007      	beq.n	800401c <_strtoul_l.constprop.0+0x78>
 800400c:	4580      	cmp	r8, r0
 800400e:	d31b      	bcc.n	8004048 <_strtoul_l.constprop.0+0xa4>
 8004010:	d101      	bne.n	8004016 <_strtoul_l.constprop.0+0x72>
 8004012:	45a1      	cmp	r9, r4
 8004014:	db18      	blt.n	8004048 <_strtoul_l.constprop.0+0xa4>
 8004016:	2701      	movs	r7, #1
 8004018:	fb00 4003 	mla	r0, r0, r3, r4
 800401c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004020:	e7e9      	b.n	8003ff6 <_strtoul_l.constprop.0+0x52>
 8004022:	2c2b      	cmp	r4, #43	; 0x2b
 8004024:	bf04      	itt	eq
 8004026:	782c      	ldrbeq	r4, [r5, #0]
 8004028:	1c85      	addeq	r5, r0, #2
 800402a:	e7cc      	b.n	8003fc6 <_strtoul_l.constprop.0+0x22>
 800402c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8004030:	f1bc 0f19 	cmp.w	ip, #25
 8004034:	d801      	bhi.n	800403a <_strtoul_l.constprop.0+0x96>
 8004036:	3c37      	subs	r4, #55	; 0x37
 8004038:	e7e3      	b.n	8004002 <_strtoul_l.constprop.0+0x5e>
 800403a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800403e:	f1bc 0f19 	cmp.w	ip, #25
 8004042:	d804      	bhi.n	800404e <_strtoul_l.constprop.0+0xaa>
 8004044:	3c57      	subs	r4, #87	; 0x57
 8004046:	e7dc      	b.n	8004002 <_strtoul_l.constprop.0+0x5e>
 8004048:	f04f 37ff 	mov.w	r7, #4294967295
 800404c:	e7e6      	b.n	800401c <_strtoul_l.constprop.0+0x78>
 800404e:	1c7b      	adds	r3, r7, #1
 8004050:	d106      	bne.n	8004060 <_strtoul_l.constprop.0+0xbc>
 8004052:	2322      	movs	r3, #34	; 0x22
 8004054:	4638      	mov	r0, r7
 8004056:	f8ce 3000 	str.w	r3, [lr]
 800405a:	b932      	cbnz	r2, 800406a <_strtoul_l.constprop.0+0xc6>
 800405c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004060:	b106      	cbz	r6, 8004064 <_strtoul_l.constprop.0+0xc0>
 8004062:	4240      	negs	r0, r0
 8004064:	2a00      	cmp	r2, #0
 8004066:	d0f9      	beq.n	800405c <_strtoul_l.constprop.0+0xb8>
 8004068:	b107      	cbz	r7, 800406c <_strtoul_l.constprop.0+0xc8>
 800406a:	1e69      	subs	r1, r5, #1
 800406c:	6011      	str	r1, [r2, #0]
 800406e:	e7f5      	b.n	800405c <_strtoul_l.constprop.0+0xb8>
 8004070:	2430      	movs	r4, #48	; 0x30
 8004072:	2b00      	cmp	r3, #0
 8004074:	d1b5      	bne.n	8003fe2 <_strtoul_l.constprop.0+0x3e>
 8004076:	2308      	movs	r3, #8
 8004078:	e7b3      	b.n	8003fe2 <_strtoul_l.constprop.0+0x3e>
 800407a:	2c30      	cmp	r4, #48	; 0x30
 800407c:	d0a9      	beq.n	8003fd2 <_strtoul_l.constprop.0+0x2e>
 800407e:	230a      	movs	r3, #10
 8004080:	e7af      	b.n	8003fe2 <_strtoul_l.constprop.0+0x3e>
 8004082:	bf00      	nop
 8004084:	080042ab 	.word	0x080042ab

08004088 <_strtoul_r>:
 8004088:	f7ff bf8c 	b.w	8003fa4 <_strtoul_l.constprop.0>

0800408c <__swhatbuf_r>:
 800408c:	b570      	push	{r4, r5, r6, lr}
 800408e:	460c      	mov	r4, r1
 8004090:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004094:	4615      	mov	r5, r2
 8004096:	2900      	cmp	r1, #0
 8004098:	461e      	mov	r6, r3
 800409a:	b096      	sub	sp, #88	; 0x58
 800409c:	da0c      	bge.n	80040b8 <__swhatbuf_r+0x2c>
 800409e:	89a3      	ldrh	r3, [r4, #12]
 80040a0:	2100      	movs	r1, #0
 80040a2:	f013 0f80 	tst.w	r3, #128	; 0x80
 80040a6:	bf0c      	ite	eq
 80040a8:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80040ac:	2340      	movne	r3, #64	; 0x40
 80040ae:	2000      	movs	r0, #0
 80040b0:	6031      	str	r1, [r6, #0]
 80040b2:	602b      	str	r3, [r5, #0]
 80040b4:	b016      	add	sp, #88	; 0x58
 80040b6:	bd70      	pop	{r4, r5, r6, pc}
 80040b8:	466a      	mov	r2, sp
 80040ba:	f000 f849 	bl	8004150 <_fstat_r>
 80040be:	2800      	cmp	r0, #0
 80040c0:	dbed      	blt.n	800409e <__swhatbuf_r+0x12>
 80040c2:	9901      	ldr	r1, [sp, #4]
 80040c4:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80040c8:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80040cc:	4259      	negs	r1, r3
 80040ce:	4159      	adcs	r1, r3
 80040d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80040d4:	e7eb      	b.n	80040ae <__swhatbuf_r+0x22>

080040d6 <__smakebuf_r>:
 80040d6:	898b      	ldrh	r3, [r1, #12]
 80040d8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80040da:	079d      	lsls	r5, r3, #30
 80040dc:	4606      	mov	r6, r0
 80040de:	460c      	mov	r4, r1
 80040e0:	d507      	bpl.n	80040f2 <__smakebuf_r+0x1c>
 80040e2:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80040e6:	6023      	str	r3, [r4, #0]
 80040e8:	6123      	str	r3, [r4, #16]
 80040ea:	2301      	movs	r3, #1
 80040ec:	6163      	str	r3, [r4, #20]
 80040ee:	b002      	add	sp, #8
 80040f0:	bd70      	pop	{r4, r5, r6, pc}
 80040f2:	466a      	mov	r2, sp
 80040f4:	ab01      	add	r3, sp, #4
 80040f6:	f7ff ffc9 	bl	800408c <__swhatbuf_r>
 80040fa:	9900      	ldr	r1, [sp, #0]
 80040fc:	4605      	mov	r5, r0
 80040fe:	4630      	mov	r0, r6
 8004100:	f7fe fe44 	bl	8002d8c <_malloc_r>
 8004104:	b948      	cbnz	r0, 800411a <__smakebuf_r+0x44>
 8004106:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800410a:	059a      	lsls	r2, r3, #22
 800410c:	d4ef      	bmi.n	80040ee <__smakebuf_r+0x18>
 800410e:	f023 0303 	bic.w	r3, r3, #3
 8004112:	f043 0302 	orr.w	r3, r3, #2
 8004116:	81a3      	strh	r3, [r4, #12]
 8004118:	e7e3      	b.n	80040e2 <__smakebuf_r+0xc>
 800411a:	89a3      	ldrh	r3, [r4, #12]
 800411c:	6020      	str	r0, [r4, #0]
 800411e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004122:	81a3      	strh	r3, [r4, #12]
 8004124:	9b00      	ldr	r3, [sp, #0]
 8004126:	6120      	str	r0, [r4, #16]
 8004128:	6163      	str	r3, [r4, #20]
 800412a:	9b01      	ldr	r3, [sp, #4]
 800412c:	b15b      	cbz	r3, 8004146 <__smakebuf_r+0x70>
 800412e:	4630      	mov	r0, r6
 8004130:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004134:	f000 f81e 	bl	8004174 <_isatty_r>
 8004138:	b128      	cbz	r0, 8004146 <__smakebuf_r+0x70>
 800413a:	89a3      	ldrh	r3, [r4, #12]
 800413c:	f023 0303 	bic.w	r3, r3, #3
 8004140:	f043 0301 	orr.w	r3, r3, #1
 8004144:	81a3      	strh	r3, [r4, #12]
 8004146:	89a3      	ldrh	r3, [r4, #12]
 8004148:	431d      	orrs	r5, r3
 800414a:	81a5      	strh	r5, [r4, #12]
 800414c:	e7cf      	b.n	80040ee <__smakebuf_r+0x18>
	...

08004150 <_fstat_r>:
 8004150:	b538      	push	{r3, r4, r5, lr}
 8004152:	2300      	movs	r3, #0
 8004154:	4d06      	ldr	r5, [pc, #24]	; (8004170 <_fstat_r+0x20>)
 8004156:	4604      	mov	r4, r0
 8004158:	4608      	mov	r0, r1
 800415a:	4611      	mov	r1, r2
 800415c:	602b      	str	r3, [r5, #0]
 800415e:	f7fc fb5f 	bl	8000820 <_fstat>
 8004162:	1c43      	adds	r3, r0, #1
 8004164:	d102      	bne.n	800416c <_fstat_r+0x1c>
 8004166:	682b      	ldr	r3, [r5, #0]
 8004168:	b103      	cbz	r3, 800416c <_fstat_r+0x1c>
 800416a:	6023      	str	r3, [r4, #0]
 800416c:	bd38      	pop	{r3, r4, r5, pc}
 800416e:	bf00      	nop
 8004170:	2000029c 	.word	0x2000029c

08004174 <_isatty_r>:
 8004174:	b538      	push	{r3, r4, r5, lr}
 8004176:	2300      	movs	r3, #0
 8004178:	4d05      	ldr	r5, [pc, #20]	; (8004190 <_isatty_r+0x1c>)
 800417a:	4604      	mov	r4, r0
 800417c:	4608      	mov	r0, r1
 800417e:	602b      	str	r3, [r5, #0]
 8004180:	f7fc fb5d 	bl	800083e <_isatty>
 8004184:	1c43      	adds	r3, r0, #1
 8004186:	d102      	bne.n	800418e <_isatty_r+0x1a>
 8004188:	682b      	ldr	r3, [r5, #0]
 800418a:	b103      	cbz	r3, 800418e <_isatty_r+0x1a>
 800418c:	6023      	str	r3, [r4, #0]
 800418e:	bd38      	pop	{r3, r4, r5, pc}
 8004190:	2000029c 	.word	0x2000029c

08004194 <_malloc_usable_size_r>:
 8004194:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004198:	1f18      	subs	r0, r3, #4
 800419a:	2b00      	cmp	r3, #0
 800419c:	bfbc      	itt	lt
 800419e:	580b      	ldrlt	r3, [r1, r0]
 80041a0:	18c0      	addlt	r0, r0, r3
 80041a2:	4770      	bx	lr

080041a4 <_init>:
 80041a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041a6:	bf00      	nop
 80041a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041aa:	bc08      	pop	{r3}
 80041ac:	469e      	mov	lr, r3
 80041ae:	4770      	bx	lr

080041b0 <_fini>:
 80041b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041b2:	bf00      	nop
 80041b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041b6:	bc08      	pop	{r3}
 80041b8:	469e      	mov	lr, r3
 80041ba:	4770      	bx	lr
